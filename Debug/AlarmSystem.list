
AlarmSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b7c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08008d4c  08008d4c  00009d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ff0  08008ff0  0000a070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008ff0  08008ff0  00009ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ff8  08008ff8  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ff8  08008ff8  00009ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ffc  08008ffc  00009ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08009000  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c90  20000070  08009070  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d00  08009070  0000ad00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d48d  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fb5  00000000  00000000  0002752d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  0002b4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001461  00000000  00000000  0002ced0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f5c  00000000  00000000  0002e331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d520  00000000  00000000  0003228d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000deb93  00000000  00000000  0004f7ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e340  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000732c  00000000  00000000  0012e384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001356b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008d34 	.word	0x08008d34

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08008d34 	.word	0x08008d34

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af02      	add	r7, sp, #8
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==BLUE_PUSH_BTN_Pin){
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800061c:	d116      	bne.n	800064c <HAL_GPIO_EXTI_Callback+0x40>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
		xTaskNotifyFromISR(LCDLine2TaskHandle,0xFE,eSetValueWithOverwrite,&xHigherPriorityTaskWoken);
 8000622:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <HAL_GPIO_EXTI_Callback+0x48>)
 8000624:	6818      	ldr	r0, [r3, #0]
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2300      	movs	r3, #0
 800062e:	2203      	movs	r2, #3
 8000630:	21fe      	movs	r1, #254	@ 0xfe
 8000632:	f006 fda7 	bl	8007184 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d007      	beq.n	800064c <HAL_GPIO_EXTI_Callback+0x40>
 800063c:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <HAL_GPIO_EXTI_Callback+0x4c>)
 800063e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	f3bf 8f4f 	dsb	sy
 8000648:	f3bf 8f6f 	isb	sy
	}
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	2000012c 	.word	0x2000012c
 8000658:	e000ed04 	.word	0xe000ed04

0800065c <ASCIItoChar>:

char ASCIItoChar(uint8_t asciiVal){
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
//    char buff[1];
//    sprintf(buff,"%u",(asciiVal-48));
    return (char)(asciiVal+0);
 8000666:	79fb      	ldrb	r3, [r7, #7]
//    return buff[0];
}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <Write_to_Flash>:

// Function to write to flash

void Write_to_Flash(uint32_t startMemAddress,char* data){
 8000674:	b5b0      	push	{r4, r5, r7, lr}
 8000676:	b08a      	sub	sp, #40	@ 0x28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
	FLASH_EraseInitTypeDef flash_erase_struct={0};
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

	// 1) Unlock the flash
	HAL_FLASH_Unlock();
 800068e:	f001 fc27 	bl	8001ee0 <HAL_FLASH_Unlock>

	// 2) Set necessary fields in the flash data structure
	flash_erase_struct.NbSectors=1;
 8000692:	2301      	movs	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]
	flash_erase_struct.Sector=FLASH_SECTOR_7;
 8000696:	2307      	movs	r3, #7
 8000698:	617b      	str	r3, [r7, #20]
	flash_erase_struct.VoltageRange=FLASH_VOLTAGE_RANGE_3;
 800069a:	2302      	movs	r3, #2
 800069c:	61fb      	str	r3, [r7, #28]
	flash_erase_struct.TypeErase=FLASH_TYPEERASE_SECTORS;
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]

	// 3) Erase the flash sector that we will write to (in this case last sector)
	uint32_t  error_status;
	HAL_FLASHEx_Erase(&flash_erase_struct, &error_status);
 80006a2:	f107 0208 	add.w	r2, r7, #8
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	4611      	mov	r1, r2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 fd89 	bl	80021c4 <HAL_FLASHEx_Erase>


	// 4) Write to the flash starting at the sector address
	//    Writing is done in contiguous memory
	uint32_t memAddress=startMemAddress;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i=0;i<strlen(data);i++){
 80006b6:	2300      	movs	r3, #0
 80006b8:	623b      	str	r3, [r7, #32]
 80006ba:	e013      	b.n	80006e4 <Write_to_Flash+0x70>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, memAddress, data[i]);
 80006bc:	6a3b      	ldr	r3, [r7, #32]
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	4413      	add	r3, r2
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2200      	movs	r2, #0
 80006c8:	461c      	mov	r4, r3
 80006ca:	4615      	mov	r5, r2
 80006cc:	4622      	mov	r2, r4
 80006ce:	462b      	mov	r3, r5
 80006d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80006d2:	2000      	movs	r0, #0
 80006d4:	f001 fbb2 	bl	8001e3c <HAL_FLASH_Program>
		memAddress++;
 80006d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006da:	3301      	adds	r3, #1
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i=0;i<strlen(data);i++){
 80006de:	6a3b      	ldr	r3, [r7, #32]
 80006e0:	3301      	adds	r3, #1
 80006e2:	623b      	str	r3, [r7, #32]
 80006e4:	6838      	ldr	r0, [r7, #0]
 80006e6:	f7ff fd9d 	bl	8000224 <strlen>
 80006ea:	4602      	mov	r2, r0
 80006ec:	6a3b      	ldr	r3, [r7, #32]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d8e4      	bhi.n	80006bc <Write_to_Flash+0x48>
	}

	// 5) Lock the flash when done writing
	HAL_FLASH_Lock();
 80006f2:	f001 fc17 	bl	8001f24 <HAL_FLASH_Lock>
}
 80006f6:	bf00      	nop
 80006f8:	3728      	adds	r7, #40	@ 0x28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000700 <Read_from_Flash>:

// Function to read from Flash memory
// Returns the string stored in the Flash address
char* Read_from_Flash(uint32_t startMemAddress){
 8000700:	b580      	push	{r7, lr}
 8000702:	b092      	sub	sp, #72	@ 0x48
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

	// Pointer to first address in the sector in Flash
	uint8_t* flash_address = (uint8_t*)startMemAddress;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	647b      	str	r3, [r7, #68]	@ 0x44
	// Static array so that it is not destroyed upon return from the function
	// If so it would have been stored on the stack,
	// but now it is stored on BSS segment
	static char pwordInFlash[6];

	int cnt=0;
 800070c:	2300      	movs	r3, #0
 800070e:	643b      	str	r3, [r7, #64]	@ 0x40
	char buffer[50];
	while(1){
		// When we reach ASCII value larger than 57 (9 in decimal)
		// We reach an area in Flash that contains garbage values as nothing
		// was written to it.
		if(*flash_address>57){
 8000710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b39      	cmp	r3, #57	@ 0x39
 8000716:	d827      	bhi.n	8000768 <Read_from_Flash+0x68>
		}


		// Convert from ASCII to decimal
		// Increase the pointer to go to next value in Flash memory
		char c=ASCIItoChar(*(flash_address++));
 8000718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800071a:	1c5a      	adds	r2, r3, #1
 800071c:	647a      	str	r2, [r7, #68]	@ 0x44
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff9b 	bl	800065c <ASCIItoChar>
 8000726:	4603      	mov	r3, r0
 8000728:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		sprintf(buffer,"%c c'est le char!\r\n",c);
 800072c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	4912      	ldr	r1, [pc, #72]	@ (8000780 <Read_from_Flash+0x80>)
 8000736:	4618      	mov	r0, r3
 8000738:	f007 fdf6 	bl	8008328 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), osWaitForever);
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fd6f 	bl	8000224 <strlen>
 8000746:	4603      	mov	r3, r0
 8000748:	b29a      	uxth	r2, r3
 800074a:	f107 010c 	add.w	r1, r7, #12
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
 8000752:	480c      	ldr	r0, [pc, #48]	@ (8000784 <Read_from_Flash+0x84>)
 8000754:	f003 fdd8 	bl	8004308 <HAL_UART_Transmit>
		pwordInFlash[cnt++]=c;
 8000758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800075a:	1c5a      	adds	r2, r3, #1
 800075c:	643a      	str	r2, [r7, #64]	@ 0x40
 800075e:	490a      	ldr	r1, [pc, #40]	@ (8000788 <Read_from_Flash+0x88>)
 8000760:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000764:	54ca      	strb	r2, [r1, r3]
	while(1){
 8000766:	e7d3      	b.n	8000710 <Read_from_Flash+0x10>
			break;
 8000768:	bf00      	nop
	}
	// Null terminated array
	pwordInFlash[cnt]='\0';
 800076a:	4a07      	ldr	r2, [pc, #28]	@ (8000788 <Read_from_Flash+0x88>)
 800076c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800076e:	4413      	add	r3, r2
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]

	return pwordInFlash;
 8000774:	4b04      	ldr	r3, [pc, #16]	@ (8000788 <Read_from_Flash+0x88>)
}
 8000776:	4618      	mov	r0, r3
 8000778:	3748      	adds	r7, #72	@ 0x48
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	08008db8 	.word	0x08008db8
 8000784:	200000e0 	.word	0x200000e0
 8000788:	20000148 	.word	0x20000148

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000790:	f001 fa0c 	bl	8001bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000794:	f000 f876 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000798:	f000 f93a 	bl	8000a10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800079c:	f000 f90e 	bl	80009bc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007a0:	f000 f8de 	bl	8000960 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007a4:	f004 f9b0 	bl	8004b08 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex */
  myMutexHandle = osMutexNew(&myMutex_attributes);
 80007a8:	4820      	ldr	r0, [pc, #128]	@ (800082c <main+0xa0>)
 80007aa:	f004 fa89 	bl	8004cc0 <osMutexNew>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4a1f      	ldr	r2, [pc, #124]	@ (8000830 <main+0xa4>)
 80007b2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (6, sizeof(uint16_t), &myQueue01_attributes);
 80007b4:	4a1f      	ldr	r2, [pc, #124]	@ (8000834 <main+0xa8>)
 80007b6:	2102      	movs	r1, #2
 80007b8:	2006      	movs	r0, #6
 80007ba:	f004 fb8f 	bl	8004edc <osMessageQueueNew>
 80007be:	4603      	mov	r3, r0
 80007c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000838 <main+0xac>)
 80007c2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of UARTIptTask */
  UARTIptTaskHandle = osThreadNew(StartUARTIptTask, NULL, &UARTIptTask_attributes);
 80007c4:	4a1d      	ldr	r2, [pc, #116]	@ (800083c <main+0xb0>)
 80007c6:	2100      	movs	r1, #0
 80007c8:	481d      	ldr	r0, [pc, #116]	@ (8000840 <main+0xb4>)
 80007ca:	f004 f9e7 	bl	8004b9c <osThreadNew>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4a1c      	ldr	r2, [pc, #112]	@ (8000844 <main+0xb8>)
 80007d2:	6013      	str	r3, [r2, #0]

  /* creation of LCDLine2Task */
  LCDLine2TaskHandle = osThreadNew(StartLCDLine2Task, NULL, &LCDLine2Task_attributes);
 80007d4:	4a1c      	ldr	r2, [pc, #112]	@ (8000848 <main+0xbc>)
 80007d6:	2100      	movs	r1, #0
 80007d8:	481c      	ldr	r0, [pc, #112]	@ (800084c <main+0xc0>)
 80007da:	f004 f9df 	bl	8004b9c <osThreadNew>
 80007de:	4603      	mov	r3, r0
 80007e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000850 <main+0xc4>)
 80007e2:	6013      	str	r3, [r2, #0]

  /* creation of Red_LEDTask */
  Red_LEDTaskHandle = osThreadNew(StartRED_LEDTask, NULL, &Red_LEDTask_attributes);
 80007e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000854 <main+0xc8>)
 80007e6:	2100      	movs	r1, #0
 80007e8:	481b      	ldr	r0, [pc, #108]	@ (8000858 <main+0xcc>)
 80007ea:	f004 f9d7 	bl	8004b9c <osThreadNew>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4a1a      	ldr	r2, [pc, #104]	@ (800085c <main+0xd0>)
 80007f2:	6013      	str	r3, [r2, #0]

  /* creation of Green_LEDTask */
  Green_LEDTaskHandle = osThreadNew(StartGreen_LEDTask, NULL, &Green_LEDTask_attributes);
 80007f4:	4a1a      	ldr	r2, [pc, #104]	@ (8000860 <main+0xd4>)
 80007f6:	2100      	movs	r1, #0
 80007f8:	481a      	ldr	r0, [pc, #104]	@ (8000864 <main+0xd8>)
 80007fa:	f004 f9cf 	bl	8004b9c <osThreadNew>
 80007fe:	4603      	mov	r3, r0
 8000800:	4a19      	ldr	r2, [pc, #100]	@ (8000868 <main+0xdc>)
 8000802:	6013      	str	r3, [r2, #0]

  /* creation of LCDLine1Task */
  LCDLine1TaskHandle = osThreadNew(StartLCDLine1Task, NULL, &LCDLine1Task_attributes);
 8000804:	4a19      	ldr	r2, [pc, #100]	@ (800086c <main+0xe0>)
 8000806:	2100      	movs	r1, #0
 8000808:	4819      	ldr	r0, [pc, #100]	@ (8000870 <main+0xe4>)
 800080a:	f004 f9c7 	bl	8004b9c <osThreadNew>
 800080e:	4603      	mov	r3, r0
 8000810:	4a18      	ldr	r2, [pc, #96]	@ (8000874 <main+0xe8>)
 8000812:	6013      	str	r3, [r2, #0]

  /* creation of resetPwordTask */
  resetPwordTaskHandle = osThreadNew(StartResetPwordTask, NULL, &resetPwordTask_attributes);
 8000814:	4a18      	ldr	r2, [pc, #96]	@ (8000878 <main+0xec>)
 8000816:	2100      	movs	r1, #0
 8000818:	4818      	ldr	r0, [pc, #96]	@ (800087c <main+0xf0>)
 800081a:	f004 f9bf 	bl	8004b9c <osThreadNew>
 800081e:	4603      	mov	r3, r0
 8000820:	4a17      	ldr	r2, [pc, #92]	@ (8000880 <main+0xf4>)
 8000822:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000824:	f004 f994 	bl	8004b50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <main+0x9c>
 800082c:	08008f94 	.word	0x08008f94
 8000830:	20000144 	.word	0x20000144
 8000834:	08008f7c 	.word	0x08008f7c
 8000838:	20000140 	.word	0x20000140
 800083c:	08008ea4 	.word	0x08008ea4
 8000840:	08000ea9 	.word	0x08000ea9
 8000844:	20000128 	.word	0x20000128
 8000848:	08008ec8 	.word	0x08008ec8
 800084c:	08000fed 	.word	0x08000fed
 8000850:	2000012c 	.word	0x2000012c
 8000854:	08008eec 	.word	0x08008eec
 8000858:	08001201 	.word	0x08001201
 800085c:	20000130 	.word	0x20000130
 8000860:	08008f10 	.word	0x08008f10
 8000864:	0800124d 	.word	0x0800124d
 8000868:	20000134 	.word	0x20000134
 800086c:	08008f34 	.word	0x08008f34
 8000870:	080012a1 	.word	0x080012a1
 8000874:	20000138 	.word	0x20000138
 8000878:	08008f58 	.word	0x08008f58
 800087c:	08001359 	.word	0x08001359
 8000880:	2000013c 	.word	0x2000013c

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b094      	sub	sp, #80	@ 0x50
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	2234      	movs	r2, #52	@ 0x34
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f007 fd6a 	bl	800836c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000958 <SystemClock_Config+0xd4>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b0:	4a29      	ldr	r2, [pc, #164]	@ (8000958 <SystemClock_Config+0xd4>)
 80008b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b8:	4b27      	ldr	r3, [pc, #156]	@ (8000958 <SystemClock_Config+0xd4>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008c4:	2300      	movs	r3, #0
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	4b24      	ldr	r3, [pc, #144]	@ (800095c <SystemClock_Config+0xd8>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008d0:	4a22      	ldr	r2, [pc, #136]	@ (800095c <SystemClock_Config+0xd8>)
 80008d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	4b20      	ldr	r3, [pc, #128]	@ (800095c <SystemClock_Config+0xd8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e8:	2301      	movs	r3, #1
 80008ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ec:	2310      	movs	r3, #16
 80008ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f0:	2302      	movs	r3, #2
 80008f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f4:	2300      	movs	r3, #0
 80008f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008f8:	2310      	movs	r3, #16
 80008fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008fc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000900:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000902:	2304      	movs	r3, #4
 8000904:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000906:	2302      	movs	r3, #2
 8000908:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800090a:	2302      	movs	r3, #2
 800090c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4618      	mov	r0, r3
 8000914:	f002 ff6e 	bl	80037f4 <HAL_RCC_OscConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800091e:	f000 fd5f 	bl	80013e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000922:	230f      	movs	r3, #15
 8000924:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000926:	2302      	movs	r3, #2
 8000928:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800092e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000932:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000938:	f107 0308 	add.w	r3, r7, #8
 800093c:	2102      	movs	r1, #2
 800093e:	4618      	mov	r0, r3
 8000940:	f002 fbdc 	bl	80030fc <HAL_RCC_ClockConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800094a:	f000 fd49 	bl	80013e0 <Error_Handler>
  }
}
 800094e:	bf00      	nop
 8000950:	3750      	adds	r7, #80	@ 0x50
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40007000 	.word	0x40007000

08000960 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000964:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <MX_I2C1_Init+0x50>)
 8000966:	4a13      	ldr	r2, [pc, #76]	@ (80009b4 <MX_I2C1_Init+0x54>)
 8000968:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800096a:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <MX_I2C1_Init+0x50>)
 800096c:	4a12      	ldr	r2, [pc, #72]	@ (80009b8 <MX_I2C1_Init+0x58>)
 800096e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000970:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <MX_I2C1_Init+0x50>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <MX_I2C1_Init+0x50>)
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800097c:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <MX_I2C1_Init+0x50>)
 800097e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000982:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000984:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <MX_I2C1_Init+0x50>)
 8000986:	2200      	movs	r2, #0
 8000988:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800098a:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <MX_I2C1_Init+0x50>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000990:	4b07      	ldr	r3, [pc, #28]	@ (80009b0 <MX_I2C1_Init+0x50>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <MX_I2C1_Init+0x50>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	@ (80009b0 <MX_I2C1_Init+0x50>)
 800099e:	f001 ff0f 	bl	80027c0 <HAL_I2C_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009a8:	f000 fd1a 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000008c 	.word	0x2000008c
 80009b4:	40005400 	.word	0x40005400
 80009b8:	000186a0 	.word	0x000186a0

080009bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c0:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	@ (8000a0c <MX_USART2_UART_Init+0x50>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009c6:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009f4:	f003 fc38 	bl	8004268 <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009fe:	f000 fcef 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000e0 	.word	0x200000e0
 8000a0c:	40004400 	.word	0x40004400

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	@ 0x28
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b4e      	ldr	r3, [pc, #312]	@ (8000b64 <MX_GPIO_Init+0x154>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a4d      	ldr	r2, [pc, #308]	@ (8000b64 <MX_GPIO_Init+0x154>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b4b      	ldr	r3, [pc, #300]	@ (8000b64 <MX_GPIO_Init+0x154>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b47      	ldr	r3, [pc, #284]	@ (8000b64 <MX_GPIO_Init+0x154>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a46      	ldr	r2, [pc, #280]	@ (8000b64 <MX_GPIO_Init+0x154>)
 8000a4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b44      	ldr	r3, [pc, #272]	@ (8000b64 <MX_GPIO_Init+0x154>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	4b40      	ldr	r3, [pc, #256]	@ (8000b64 <MX_GPIO_Init+0x154>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a3f      	ldr	r2, [pc, #252]	@ (8000b64 <MX_GPIO_Init+0x154>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <MX_GPIO_Init+0x154>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <MX_GPIO_Init+0x154>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <MX_GPIO_Init+0x154>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8a:	4b36      	ldr	r3, [pc, #216]	@ (8000b64 <MX_GPIO_Init+0x154>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_LED_Pin|GREEN_LED_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2131      	movs	r1, #49	@ 0x31
 8000a9a:	4833      	ldr	r0, [pc, #204]	@ (8000b68 <MX_GPIO_Init+0x158>)
 8000a9c:	f001 fe5e 	bl	800275c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C1_OPT_Pin|C2_OPT_Pin|C3_OPT_Pin, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8000aa6:	4831      	ldr	r0, [pc, #196]	@ (8000b6c <MX_GPIO_Init+0x15c>)
 8000aa8:	f001 fe58 	bl	800275c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_PUSH_BTN_Pin */
  GPIO_InitStruct.Pin = BLUE_PUSH_BTN_Pin;
 8000aac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ab2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_PUSH_BTN_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	482b      	ldr	r0, [pc, #172]	@ (8000b70 <MX_GPIO_Init+0x160>)
 8000ac4:	f001 fc9e 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin LD2_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin|LD2_Pin;
 8000ac8:	2331      	movs	r3, #49	@ 0x31
 8000aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	4822      	ldr	r0, [pc, #136]	@ (8000b68 <MX_GPIO_Init+0x158>)
 8000ae0:	f001 fc90 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_OPT_Pin C2_OPT_Pin C3_OPT_Pin */
  GPIO_InitStruct.Pin = C1_OPT_Pin|C2_OPT_Pin|C3_OPT_Pin;
 8000ae4:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	481b      	ldr	r0, [pc, #108]	@ (8000b6c <MX_GPIO_Init+0x15c>)
 8000afe:	f001 fc81 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : R2_IPT_Pin */
  GPIO_InitStruct.Pin = R2_IPT_Pin;
 8000b02:	2380      	movs	r3, #128	@ 0x80
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R2_IPT_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4816      	ldr	r0, [pc, #88]	@ (8000b70 <MX_GPIO_Init+0x160>)
 8000b16:	f001 fc75 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pins : R4_IPT_Pin R3_IPT_Pin */
  GPIO_InitStruct.Pin = R4_IPT_Pin|R3_IPT_Pin;
 8000b1a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	480e      	ldr	r0, [pc, #56]	@ (8000b68 <MX_GPIO_Init+0x158>)
 8000b30:	f001 fc68 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : R1_IPT_Pin */
  GPIO_InitStruct.Pin = R1_IPT_Pin;
 8000b34:	2340      	movs	r3, #64	@ 0x40
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R1_IPT_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	4809      	ldr	r0, [pc, #36]	@ (8000b6c <MX_GPIO_Init+0x15c>)
 8000b48:	f001 fc5c 	bl	8002404 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2105      	movs	r1, #5
 8000b50:	2028      	movs	r0, #40	@ 0x28
 8000b52:	f001 f949 	bl	8001de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b56:	2028      	movs	r0, #40	@ 0x28
 8000b58:	f001 f962 	bl	8001e20 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	@ 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40020800 	.word	0x40020800

08000b74 <keyPressHandler>:
uint8_t pword[6];


// Function that handles keypad presses
// Returns array of keys pressed forming password
char* keyPressHandler(uint32_t ulNotificationValue,int cnt){
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
	//static to preserve  password state across function calls
	static char pword[6];

	if(ulNotificationValue==0xFF || ulNotificationValue==0xFE || ulNotificationValue==0x11){
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2bff      	cmp	r3, #255	@ 0xff
 8000b82:	d005      	beq.n	8000b90 <keyPressHandler+0x1c>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b88:	d002      	beq.n	8000b90 <keyPressHandler+0x1c>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b11      	cmp	r3, #17
 8000b8e:	d106      	bne.n	8000b9e <keyPressHandler+0x2a>
		pword[cnt]='\0';
 8000b90:	4a33      	ldr	r2, [pc, #204]	@ (8000c60 <keyPressHandler+0xec>)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	4413      	add	r3, r2
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
		return pword;
 8000b9a:	4b31      	ldr	r3, [pc, #196]	@ (8000c60 <keyPressHandler+0xec>)
 8000b9c:	e059      	b.n	8000c52 <keyPressHandler+0xde>
	}
	else{
		if(ulNotificationValue==0x00){
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d105      	bne.n	8000bb0 <keyPressHandler+0x3c>
			pword[cnt]='0';
 8000ba4:	4a2e      	ldr	r2, [pc, #184]	@ (8000c60 <keyPressHandler+0xec>)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	4413      	add	r3, r2
 8000baa:	2230      	movs	r2, #48	@ 0x30
 8000bac:	701a      	strb	r2, [r3, #0]
 8000bae:	e04f      	b.n	8000c50 <keyPressHandler+0xdc>
		}
		else if(ulNotificationValue==0x01){
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d105      	bne.n	8000bc2 <keyPressHandler+0x4e>
			pword[cnt]='1';
 8000bb6:	4a2a      	ldr	r2, [pc, #168]	@ (8000c60 <keyPressHandler+0xec>)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	2231      	movs	r2, #49	@ 0x31
 8000bbe:	701a      	strb	r2, [r3, #0]
 8000bc0:	e046      	b.n	8000c50 <keyPressHandler+0xdc>
		}
		else if(ulNotificationValue==0x02){
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d105      	bne.n	8000bd4 <keyPressHandler+0x60>
			pword[cnt]='2';
 8000bc8:	4a25      	ldr	r2, [pc, #148]	@ (8000c60 <keyPressHandler+0xec>)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	4413      	add	r3, r2
 8000bce:	2232      	movs	r2, #50	@ 0x32
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	e03d      	b.n	8000c50 <keyPressHandler+0xdc>
		}
		else if(ulNotificationValue==0x03){
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b03      	cmp	r3, #3
 8000bd8:	d105      	bne.n	8000be6 <keyPressHandler+0x72>
			pword[cnt]='3';
 8000bda:	4a21      	ldr	r2, [pc, #132]	@ (8000c60 <keyPressHandler+0xec>)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	2233      	movs	r2, #51	@ 0x33
 8000be2:	701a      	strb	r2, [r3, #0]
 8000be4:	e034      	b.n	8000c50 <keyPressHandler+0xdc>
		}
		else if(ulNotificationValue==0x04){
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b04      	cmp	r3, #4
 8000bea:	d105      	bne.n	8000bf8 <keyPressHandler+0x84>
			pword[cnt]='4';
 8000bec:	4a1c      	ldr	r2, [pc, #112]	@ (8000c60 <keyPressHandler+0xec>)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	2234      	movs	r2, #52	@ 0x34
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	e02b      	b.n	8000c50 <keyPressHandler+0xdc>
		}
		else if(ulNotificationValue==0x05){
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b05      	cmp	r3, #5
 8000bfc:	d105      	bne.n	8000c0a <keyPressHandler+0x96>
			pword[cnt]='5';
 8000bfe:	4a18      	ldr	r2, [pc, #96]	@ (8000c60 <keyPressHandler+0xec>)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	2235      	movs	r2, #53	@ 0x35
 8000c06:	701a      	strb	r2, [r3, #0]
 8000c08:	e022      	b.n	8000c50 <keyPressHandler+0xdc>
		}
		else if(ulNotificationValue==0x06){
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b06      	cmp	r3, #6
 8000c0e:	d105      	bne.n	8000c1c <keyPressHandler+0xa8>
			pword[cnt]='6';
 8000c10:	4a13      	ldr	r2, [pc, #76]	@ (8000c60 <keyPressHandler+0xec>)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	4413      	add	r3, r2
 8000c16:	2236      	movs	r2, #54	@ 0x36
 8000c18:	701a      	strb	r2, [r3, #0]
 8000c1a:	e019      	b.n	8000c50 <keyPressHandler+0xdc>
		}
		else if(ulNotificationValue==0x07){
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b07      	cmp	r3, #7
 8000c20:	d105      	bne.n	8000c2e <keyPressHandler+0xba>
			pword[cnt]='7';
 8000c22:	4a0f      	ldr	r2, [pc, #60]	@ (8000c60 <keyPressHandler+0xec>)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	2237      	movs	r2, #55	@ 0x37
 8000c2a:	701a      	strb	r2, [r3, #0]
 8000c2c:	e010      	b.n	8000c50 <keyPressHandler+0xdc>
		}
		else if(ulNotificationValue==0x08){
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b08      	cmp	r3, #8
 8000c32:	d105      	bne.n	8000c40 <keyPressHandler+0xcc>
			pword[cnt]='8';
 8000c34:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <keyPressHandler+0xec>)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	4413      	add	r3, r2
 8000c3a:	2238      	movs	r2, #56	@ 0x38
 8000c3c:	701a      	strb	r2, [r3, #0]
 8000c3e:	e007      	b.n	8000c50 <keyPressHandler+0xdc>
		}
		else if(ulNotificationValue==0x09){
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b09      	cmp	r3, #9
 8000c44:	d104      	bne.n	8000c50 <keyPressHandler+0xdc>
			pword[cnt]='9';
 8000c46:	4a06      	ldr	r2, [pc, #24]	@ (8000c60 <keyPressHandler+0xec>)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	2239      	movs	r2, #57	@ 0x39
 8000c4e:	701a      	strb	r2, [r3, #0]
		}
		return pword;
 8000c50:	4b03      	ldr	r3, [pc, #12]	@ (8000c60 <keyPressHandler+0xec>)
	}
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000150 	.word	0x20000150

08000c64 <readKeypadChar>:

// read keypad (EXPLAIN WHY THE WHILE LOOP)@!!!!!!!!!!!!!!!!!!
uint8_t readKeypadChar(){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
	uint8_t val;

	//Infinite loop so that it continuously prompts user to enter
	//value and only breaks when keypad is pressed
	while(1){
		HAL_GPIO_WritePin(C1_OPT_GPIO_Port, C1_OPT_Pin, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c70:	488a      	ldr	r0, [pc, #552]	@ (8000e9c <readKeypadChar+0x238>)
 8000c72:	f001 fd73 	bl	800275c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_OPT_GPIO_Port, C2_OPT_Pin, 1);
 8000c76:	2201      	movs	r2, #1
 8000c78:	2110      	movs	r1, #16
 8000c7a:	4888      	ldr	r0, [pc, #544]	@ (8000e9c <readKeypadChar+0x238>)
 8000c7c:	f001 fd6e 	bl	800275c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C3_OPT_GPIO_Port, C3_OPT_Pin, 1);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2120      	movs	r1, #32
 8000c84:	4885      	ldr	r0, [pc, #532]	@ (8000e9c <readKeypadChar+0x238>)
 8000c86:	f001 fd69 	bl	800275c <HAL_GPIO_WritePin>

		if(!HAL_GPIO_ReadPin(R1_IPT_GPIO_Port, R1_IPT_Pin)){
 8000c8a:	2140      	movs	r1, #64	@ 0x40
 8000c8c:	4883      	ldr	r0, [pc, #524]	@ (8000e9c <readKeypadChar+0x238>)
 8000c8e:	f001 fd4d 	bl	800272c <HAL_GPIO_ReadPin>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d10a      	bne.n	8000cae <readKeypadChar+0x4a>
			while(!HAL_GPIO_ReadPin(R1_IPT_GPIO_Port, R1_IPT_Pin));
 8000c98:	bf00      	nop
 8000c9a:	2140      	movs	r1, #64	@ 0x40
 8000c9c:	487f      	ldr	r0, [pc, #508]	@ (8000e9c <readKeypadChar+0x238>)
 8000c9e:	f001 fd45 	bl	800272c <HAL_GPIO_ReadPin>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0f8      	beq.n	8000c9a <readKeypadChar+0x36>
			val=0x01;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	71fb      	strb	r3, [r7, #7]
			break;
 8000cac:	e0f1      	b.n	8000e92 <readKeypadChar+0x22e>
		}
		else if(!HAL_GPIO_ReadPin(R2_IPT_GPIO_Port, R2_IPT_Pin)){
 8000cae:	2180      	movs	r1, #128	@ 0x80
 8000cb0:	487b      	ldr	r0, [pc, #492]	@ (8000ea0 <readKeypadChar+0x23c>)
 8000cb2:	f001 fd3b 	bl	800272c <HAL_GPIO_ReadPin>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10a      	bne.n	8000cd2 <readKeypadChar+0x6e>
			while(!HAL_GPIO_ReadPin(R2_IPT_GPIO_Port, R2_IPT_Pin));
 8000cbc:	bf00      	nop
 8000cbe:	2180      	movs	r1, #128	@ 0x80
 8000cc0:	4877      	ldr	r0, [pc, #476]	@ (8000ea0 <readKeypadChar+0x23c>)
 8000cc2:	f001 fd33 	bl	800272c <HAL_GPIO_ReadPin>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d0f8      	beq.n	8000cbe <readKeypadChar+0x5a>
			val=0x04;
 8000ccc:	2304      	movs	r3, #4
 8000cce:	71fb      	strb	r3, [r7, #7]
			break;
 8000cd0:	e0df      	b.n	8000e92 <readKeypadChar+0x22e>
		}
		else if(!HAL_GPIO_ReadPin(R3_IPT_GPIO_Port, R3_IPT_Pin)){
 8000cd2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cd6:	4873      	ldr	r0, [pc, #460]	@ (8000ea4 <readKeypadChar+0x240>)
 8000cd8:	f001 fd28 	bl	800272c <HAL_GPIO_ReadPin>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d10b      	bne.n	8000cfa <readKeypadChar+0x96>
			while(!HAL_GPIO_ReadPin(R3_IPT_GPIO_Port, R3_IPT_Pin));
 8000ce2:	bf00      	nop
 8000ce4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ce8:	486e      	ldr	r0, [pc, #440]	@ (8000ea4 <readKeypadChar+0x240>)
 8000cea:	f001 fd1f 	bl	800272c <HAL_GPIO_ReadPin>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d0f7      	beq.n	8000ce4 <readKeypadChar+0x80>
			val=0x07;
 8000cf4:	2307      	movs	r3, #7
 8000cf6:	71fb      	strb	r3, [r7, #7]
			break;
 8000cf8:	e0cb      	b.n	8000e92 <readKeypadChar+0x22e>
		}
		else if(!HAL_GPIO_ReadPin(R4_IPT_GPIO_Port, R4_IPT_Pin)){
 8000cfa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cfe:	4869      	ldr	r0, [pc, #420]	@ (8000ea4 <readKeypadChar+0x240>)
 8000d00:	f001 fd14 	bl	800272c <HAL_GPIO_ReadPin>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d10b      	bne.n	8000d22 <readKeypadChar+0xbe>
			while(!HAL_GPIO_ReadPin(R4_IPT_GPIO_Port, R4_IPT_Pin));
 8000d0a:	bf00      	nop
 8000d0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d10:	4864      	ldr	r0, [pc, #400]	@ (8000ea4 <readKeypadChar+0x240>)
 8000d12:	f001 fd0b 	bl	800272c <HAL_GPIO_ReadPin>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0f7      	beq.n	8000d0c <readKeypadChar+0xa8>
			val=0xFF;
 8000d1c:	23ff      	movs	r3, #255	@ 0xff
 8000d1e:	71fb      	strb	r3, [r7, #7]
			break;
 8000d20:	e0b7      	b.n	8000e92 <readKeypadChar+0x22e>
		}

		HAL_GPIO_WritePin(C1_OPT_GPIO_Port, C1_OPT_Pin, 1);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d28:	485c      	ldr	r0, [pc, #368]	@ (8000e9c <readKeypadChar+0x238>)
 8000d2a:	f001 fd17 	bl	800275c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_OPT_GPIO_Port, C2_OPT_Pin, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2110      	movs	r1, #16
 8000d32:	485a      	ldr	r0, [pc, #360]	@ (8000e9c <readKeypadChar+0x238>)
 8000d34:	f001 fd12 	bl	800275c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C3_OPT_GPIO_Port, C3_OPT_Pin, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2120      	movs	r1, #32
 8000d3c:	4857      	ldr	r0, [pc, #348]	@ (8000e9c <readKeypadChar+0x238>)
 8000d3e:	f001 fd0d 	bl	800275c <HAL_GPIO_WritePin>

		if(!HAL_GPIO_ReadPin(R1_IPT_GPIO_Port, R1_IPT_Pin)){
 8000d42:	2140      	movs	r1, #64	@ 0x40
 8000d44:	4855      	ldr	r0, [pc, #340]	@ (8000e9c <readKeypadChar+0x238>)
 8000d46:	f001 fcf1 	bl	800272c <HAL_GPIO_ReadPin>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d10a      	bne.n	8000d66 <readKeypadChar+0x102>
			while(!HAL_GPIO_ReadPin(R1_IPT_GPIO_Port, R1_IPT_Pin));
 8000d50:	bf00      	nop
 8000d52:	2140      	movs	r1, #64	@ 0x40
 8000d54:	4851      	ldr	r0, [pc, #324]	@ (8000e9c <readKeypadChar+0x238>)
 8000d56:	f001 fce9 	bl	800272c <HAL_GPIO_ReadPin>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d0f8      	beq.n	8000d52 <readKeypadChar+0xee>
			val=0x02;
 8000d60:	2302      	movs	r3, #2
 8000d62:	71fb      	strb	r3, [r7, #7]
			break;
 8000d64:	e095      	b.n	8000e92 <readKeypadChar+0x22e>
		}
		else if(!HAL_GPIO_ReadPin(R2_IPT_GPIO_Port, R2_IPT_Pin)){
 8000d66:	2180      	movs	r1, #128	@ 0x80
 8000d68:	484d      	ldr	r0, [pc, #308]	@ (8000ea0 <readKeypadChar+0x23c>)
 8000d6a:	f001 fcdf 	bl	800272c <HAL_GPIO_ReadPin>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d10a      	bne.n	8000d8a <readKeypadChar+0x126>
			while(!HAL_GPIO_ReadPin(R2_IPT_GPIO_Port, R2_IPT_Pin));
 8000d74:	bf00      	nop
 8000d76:	2180      	movs	r1, #128	@ 0x80
 8000d78:	4849      	ldr	r0, [pc, #292]	@ (8000ea0 <readKeypadChar+0x23c>)
 8000d7a:	f001 fcd7 	bl	800272c <HAL_GPIO_ReadPin>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0f8      	beq.n	8000d76 <readKeypadChar+0x112>
			val=0x05;
 8000d84:	2305      	movs	r3, #5
 8000d86:	71fb      	strb	r3, [r7, #7]
			break;
 8000d88:	e083      	b.n	8000e92 <readKeypadChar+0x22e>
		}
		else if(!HAL_GPIO_ReadPin(R3_IPT_GPIO_Port, R3_IPT_Pin)){
 8000d8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d8e:	4845      	ldr	r0, [pc, #276]	@ (8000ea4 <readKeypadChar+0x240>)
 8000d90:	f001 fccc 	bl	800272c <HAL_GPIO_ReadPin>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10b      	bne.n	8000db2 <readKeypadChar+0x14e>
			while(!HAL_GPIO_ReadPin(R3_IPT_GPIO_Port, R3_IPT_Pin));
 8000d9a:	bf00      	nop
 8000d9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000da0:	4840      	ldr	r0, [pc, #256]	@ (8000ea4 <readKeypadChar+0x240>)
 8000da2:	f001 fcc3 	bl	800272c <HAL_GPIO_ReadPin>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0f7      	beq.n	8000d9c <readKeypadChar+0x138>
			val=0x08;
 8000dac:	2308      	movs	r3, #8
 8000dae:	71fb      	strb	r3, [r7, #7]
			break;
 8000db0:	e06f      	b.n	8000e92 <readKeypadChar+0x22e>
		}
		else if(!HAL_GPIO_ReadPin(R4_IPT_GPIO_Port, R4_IPT_Pin)){
 8000db2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000db6:	483b      	ldr	r0, [pc, #236]	@ (8000ea4 <readKeypadChar+0x240>)
 8000db8:	f001 fcb8 	bl	800272c <HAL_GPIO_ReadPin>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10b      	bne.n	8000dda <readKeypadChar+0x176>
			while(!HAL_GPIO_ReadPin(R4_IPT_GPIO_Port, R4_IPT_Pin));
 8000dc2:	bf00      	nop
 8000dc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dc8:	4836      	ldr	r0, [pc, #216]	@ (8000ea4 <readKeypadChar+0x240>)
 8000dca:	f001 fcaf 	bl	800272c <HAL_GPIO_ReadPin>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d0f7      	beq.n	8000dc4 <readKeypadChar+0x160>
			val=0x00;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	71fb      	strb	r3, [r7, #7]
			break;
 8000dd8:	e05b      	b.n	8000e92 <readKeypadChar+0x22e>
		}

		HAL_GPIO_WritePin(C1_OPT_GPIO_Port, C1_OPT_Pin, 1);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000de0:	482e      	ldr	r0, [pc, #184]	@ (8000e9c <readKeypadChar+0x238>)
 8000de2:	f001 fcbb 	bl	800275c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_OPT_GPIO_Port, C2_OPT_Pin, 1);
 8000de6:	2201      	movs	r2, #1
 8000de8:	2110      	movs	r1, #16
 8000dea:	482c      	ldr	r0, [pc, #176]	@ (8000e9c <readKeypadChar+0x238>)
 8000dec:	f001 fcb6 	bl	800275c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C3_OPT_GPIO_Port, C3_OPT_Pin, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2120      	movs	r1, #32
 8000df4:	4829      	ldr	r0, [pc, #164]	@ (8000e9c <readKeypadChar+0x238>)
 8000df6:	f001 fcb1 	bl	800275c <HAL_GPIO_WritePin>

		if(!HAL_GPIO_ReadPin(R1_IPT_GPIO_Port, R1_IPT_Pin)){
 8000dfa:	2140      	movs	r1, #64	@ 0x40
 8000dfc:	4827      	ldr	r0, [pc, #156]	@ (8000e9c <readKeypadChar+0x238>)
 8000dfe:	f001 fc95 	bl	800272c <HAL_GPIO_ReadPin>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d10a      	bne.n	8000e1e <readKeypadChar+0x1ba>
			while(!HAL_GPIO_ReadPin(R1_IPT_GPIO_Port, R1_IPT_Pin));
 8000e08:	bf00      	nop
 8000e0a:	2140      	movs	r1, #64	@ 0x40
 8000e0c:	4823      	ldr	r0, [pc, #140]	@ (8000e9c <readKeypadChar+0x238>)
 8000e0e:	f001 fc8d 	bl	800272c <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0f8      	beq.n	8000e0a <readKeypadChar+0x1a6>
			val=0x03;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	71fb      	strb	r3, [r7, #7]
			break;
 8000e1c:	e039      	b.n	8000e92 <readKeypadChar+0x22e>
		}
		else if(!HAL_GPIO_ReadPin(R2_IPT_GPIO_Port, R2_IPT_Pin)){
 8000e1e:	2180      	movs	r1, #128	@ 0x80
 8000e20:	481f      	ldr	r0, [pc, #124]	@ (8000ea0 <readKeypadChar+0x23c>)
 8000e22:	f001 fc83 	bl	800272c <HAL_GPIO_ReadPin>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d10a      	bne.n	8000e42 <readKeypadChar+0x1de>
			while(!HAL_GPIO_ReadPin(R2_IPT_GPIO_Port, R2_IPT_Pin));
 8000e2c:	bf00      	nop
 8000e2e:	2180      	movs	r1, #128	@ 0x80
 8000e30:	481b      	ldr	r0, [pc, #108]	@ (8000ea0 <readKeypadChar+0x23c>)
 8000e32:	f001 fc7b 	bl	800272c <HAL_GPIO_ReadPin>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d0f8      	beq.n	8000e2e <readKeypadChar+0x1ca>
			val=0x06;
 8000e3c:	2306      	movs	r3, #6
 8000e3e:	71fb      	strb	r3, [r7, #7]
			break;
 8000e40:	e027      	b.n	8000e92 <readKeypadChar+0x22e>
		}
		else if(!HAL_GPIO_ReadPin(R3_IPT_GPIO_Port, R3_IPT_Pin)){
 8000e42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e46:	4817      	ldr	r0, [pc, #92]	@ (8000ea4 <readKeypadChar+0x240>)
 8000e48:	f001 fc70 	bl	800272c <HAL_GPIO_ReadPin>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10b      	bne.n	8000e6a <readKeypadChar+0x206>
			while(!HAL_GPIO_ReadPin(R3_IPT_GPIO_Port, R3_IPT_Pin));
 8000e52:	bf00      	nop
 8000e54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e58:	4812      	ldr	r0, [pc, #72]	@ (8000ea4 <readKeypadChar+0x240>)
 8000e5a:	f001 fc67 	bl	800272c <HAL_GPIO_ReadPin>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d0f7      	beq.n	8000e54 <readKeypadChar+0x1f0>
			val=0x09;
 8000e64:	2309      	movs	r3, #9
 8000e66:	71fb      	strb	r3, [r7, #7]
			break;
 8000e68:	e013      	b.n	8000e92 <readKeypadChar+0x22e>
		}
		else if(!HAL_GPIO_ReadPin(R4_IPT_GPIO_Port, R4_IPT_Pin)){
 8000e6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e6e:	480d      	ldr	r0, [pc, #52]	@ (8000ea4 <readKeypadChar+0x240>)
 8000e70:	f001 fc5c 	bl	800272c <HAL_GPIO_ReadPin>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f47f aef7 	bne.w	8000c6a <readKeypadChar+0x6>
			while(!HAL_GPIO_ReadPin(R4_IPT_GPIO_Port, R4_IPT_Pin));
 8000e7c:	bf00      	nop
 8000e7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e82:	4808      	ldr	r0, [pc, #32]	@ (8000ea4 <readKeypadChar+0x240>)
 8000e84:	f001 fc52 	bl	800272c <HAL_GPIO_ReadPin>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f7      	beq.n	8000e7e <readKeypadChar+0x21a>
			val=0x11;
 8000e8e:	2311      	movs	r3, #17
 8000e90:	71fb      	strb	r3, [r7, #7]
			break;
		}
	}
	return val;
 8000e92:	79fb      	ldrb	r3, [r7, #7]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40020400 	.word	0x40020400
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <StartUARTIptTask>:
/* USER CODE END Header_StartUARTIptTask */

// CHANGE NAME TO KEYPADIPTTASK
// Task handles user input value and sends them to LCD Line 2 handler task
void StartUARTIptTask(void *argument)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HD44780_Init(2);
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	f000 fc73 	bl	800179c <HD44780_Init>
	HD44780_Clear();
 8000eb6:	f000 fcf5 	bl	80018a4 <HD44780_Clear>
	HD44780_Backlight();
 8000eba:	f000 fd91 	bl	80019e0 <HD44780_Backlight>
//	int cnt=1;


	//System starts in DISARMED mode
	uint8_t val;
	int sendflag=1;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	60fb      	str	r3, [r7, #12]
	xTaskNotify(Green_LEDTaskHandle,DISARMED,eSetValueWithOverwrite);
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <StartUARTIptTask+0x44>)
 8000ec4:	6818      	ldr	r0, [r3, #0]
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	2203      	movs	r2, #3
 8000eca:	2101      	movs	r1, #1
 8000ecc:	f006 f898 	bl	8007000 <xTaskGenericNotify>
/* Infinite loop */
  for(;;)
  {
	  //blocking function until keypad press
	  val=readKeypadChar();
 8000ed0:	f7ff fec8 	bl	8000c64 <readKeypadChar>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	72fb      	strb	r3, [r7, #11]
	  xTaskNotify(LCDLine2TaskHandle,val,eSetValueWithOverwrite);
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <StartUARTIptTask+0x48>)
 8000eda:	6818      	ldr	r0, [r3, #0]
 8000edc:	7af9      	ldrb	r1, [r7, #11]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	f006 f88d 	bl	8007000 <xTaskGenericNotify>
	  val=readKeypadChar();
 8000ee6:	bf00      	nop
 8000ee8:	e7f2      	b.n	8000ed0 <StartUARTIptTask+0x28>
 8000eea:	bf00      	nop
 8000eec:	20000134 	.word	0x20000134
 8000ef0:	2000012c 	.word	0x2000012c

08000ef4 <Write_To_LCD>:
}

/* USER CODE BEGIN Header_StartLCDLine2Task */

// Function writes * symbols on screen every keypad press
void Write_To_LCD(int cnt){
 8000ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ef8:	b085      	sub	sp, #20
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	466b      	mov	r3, sp
 8000f00:	461e      	mov	r6, r3
	//Write respective amount of * characters on screen
	char buffer[cnt];
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	1e4b      	subs	r3, r1, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	460a      	mov	r2, r1
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	4690      	mov	r8, r2
 8000f0e:	4699      	mov	r9, r3
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f24:	460a      	mov	r2, r1
 8000f26:	2300      	movs	r3, #0
 8000f28:	4614      	mov	r4, r2
 8000f2a:	461d      	mov	r5, r3
 8000f2c:	f04f 0200 	mov.w	r2, #0
 8000f30:	f04f 0300 	mov.w	r3, #0
 8000f34:	00eb      	lsls	r3, r5, #3
 8000f36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f3a:	00e2      	lsls	r2, r4, #3
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	3307      	adds	r3, #7
 8000f40:	08db      	lsrs	r3, r3, #3
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	ebad 0d03 	sub.w	sp, sp, r3
 8000f48:	466b      	mov	r3, sp
 8000f4a:	3300      	adds	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
	memset(buffer,'*',cnt);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	461a      	mov	r2, r3
 8000f52:	212a      	movs	r1, #42	@ 0x2a
 8000f54:	68b8      	ldr	r0, [r7, #8]
 8000f56:	f007 fa09 	bl	800836c <memset>
	buffer[cnt]='\0';
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4413      	add	r3, r2
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]

	// use mutex to synchronize use of shared ressource (LCD screen)
	osMutexAcquire(myMutexHandle, osWaitForever);
 8000f64:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <Write_To_LCD+0xa4>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f003 ff2d 	bl	8004dcc <osMutexAcquire>
	HD44780_SetCursor(0,1);
 8000f72:	2101      	movs	r1, #1
 8000f74:	2000      	movs	r0, #0
 8000f76:	f000 fcab 	bl	80018d0 <HD44780_SetCursor>
	HD44780_PrintStr(buffer);
 8000f7a:	68b8      	ldr	r0, [r7, #8]
 8000f7c:	f000 fd1a 	bl	80019b4 <HD44780_PrintStr>
	osMutexRelease(myMutexHandle);
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <Write_To_LCD+0xa4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f003 ff6c 	bl	8004e62 <osMutexRelease>
 8000f8a:	46b5      	mov	sp, r6
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f96:	bf00      	nop
 8000f98:	20000144 	.word	0x20000144

08000f9c <Clear_LCD_Line2Screen>:

// Clear Line 2 of LCD Screen
void Clear_LCD_Line2Screen(){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0

	// use mutex to synchronize use of shared ressource (LCD screen)
	osMutexAcquire(myMutexHandle, osWaitForever);
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <Clear_LCD_Line2Screen+0x48>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f04f 31ff 	mov.w	r1, #4294967295
 8000faa:	4618      	mov	r0, r3
 8000fac:	f003 ff0e 	bl	8004dcc <osMutexAcquire>
	//Erase line 2 of LCD Screen with spaces.
	HD44780_SetCursor(0,1);
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f000 fc8c 	bl	80018d0 <HD44780_SetCursor>
	for(int i=0;i<16;i++){
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	e005      	b.n	8000fca <Clear_LCD_Line2Screen+0x2e>
		HD44780_PrintStr(" ");
 8000fbe:	480a      	ldr	r0, [pc, #40]	@ (8000fe8 <Clear_LCD_Line2Screen+0x4c>)
 8000fc0:	f000 fcf8 	bl	80019b4 <HD44780_PrintStr>
	for(int i=0;i<16;i++){
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	ddf6      	ble.n	8000fbe <Clear_LCD_Line2Screen+0x22>
	}
	osMutexRelease(myMutexHandle);
 8000fd0:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <Clear_LCD_Line2Screen+0x48>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f003 ff44 	bl	8004e62 <osMutexRelease>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000144 	.word	0x20000144
 8000fe8:	08008dcc 	.word	0x08008dcc

08000fec <StartLCDLine2Task>:
*/
/* USER CODE END Header_StartLCDLine2Task */

// Task that handles keys pressed
void StartLCDLine2Task(void *argument)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b096      	sub	sp, #88	@ 0x58
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCDLine2Task */
	uint32_t ulNotificationValue;
	int cnt=0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	657b      	str	r3, [r7, #84]	@ 0x54
	int resetPasswordFlag=1,newPasswordFlag=0;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	653b      	str	r3, [r7, #80]	@ 0x50
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  /* Infinite loop */
  for(;;)
  {
	/* Infinite loop */

	if(xTaskNotifyWait(0, 0xffffffff, &ulNotificationValue, portMAX_DELAY)){
 8001000:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	f04f 31ff 	mov.w	r1, #4294967295
 800100c:	2000      	movs	r0, #0
 800100e:	f005 ff97 	bl	8006f40 <xTaskNotifyWait>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0f3      	beq.n	8001000 <StartLCDLine2Task+0x14>
		//////////////////////////////////////////////
		//UTILISE UNE FONCITON WRITE__TO___LCD(cnt);//
		//////////////////////////////////////////////

		//Copy value of keyPressHandler into pword array
		strcpy(pword,keyPressHandler(ulNotificationValue,cnt));
 8001018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800101a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fda9 	bl	8000b74 <keyPressHandler>
 8001022:	4602      	mov	r2, r0
 8001024:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001028:	4611      	mov	r1, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f007 fa30 	bl	8008490 <strcpy>

		if(ulNotificationValue==NEW_PASSWORD){
 8001030:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001032:	2b11      	cmp	r3, #17
 8001034:	d11c      	bne.n	8001070 <StartLCDLine2Task+0x84>
			cnt=0;
 8001036:	2300      	movs	r3, #0
 8001038:	657b      	str	r3, [r7, #84]	@ 0x54
			Clear_LCD_Line2Screen();
 800103a:	f7ff ffaf 	bl	8000f9c <Clear_LCD_Line2Screen>
			if(resetPasswordFlag){
 800103e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001040:	2b00      	cmp	r3, #0
 8001042:	d009      	beq.n	8001058 <StartLCDLine2Task+0x6c>
				resetPasswordFlag=0;
 8001044:	2300      	movs	r3, #0
 8001046:	653b      	str	r3, [r7, #80]	@ 0x50
				xTaskNotify(resetPwordTaskHandle,OLD_PASSWORD,eSetValueWithOverwrite);
 8001048:	4b65      	ldr	r3, [pc, #404]	@ (80011e0 <StartLCDLine2Task+0x1f4>)
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	2300      	movs	r3, #0
 800104e:	2203      	movs	r2, #3
 8001050:	2110      	movs	r1, #16
 8001052:	f005 ffd5 	bl	8007000 <xTaskGenericNotify>
 8001056:	e7d3      	b.n	8001000 <StartLCDLine2Task+0x14>
			}
			else{
				newPasswordFlag=0;
 8001058:	2300      	movs	r3, #0
 800105a:	64fb      	str	r3, [r7, #76]	@ 0x4c
				resetPasswordFlag=1;
 800105c:	2301      	movs	r3, #1
 800105e:	653b      	str	r3, [r7, #80]	@ 0x50
				xTaskNotify(Green_LEDTaskHandle,DISARMED,eSetValueWithOverwrite);
 8001060:	4b60      	ldr	r3, [pc, #384]	@ (80011e4 <StartLCDLine2Task+0x1f8>)
 8001062:	6818      	ldr	r0, [r3, #0]
 8001064:	2300      	movs	r3, #0
 8001066:	2203      	movs	r2, #3
 8001068:	2101      	movs	r1, #1
 800106a:	f005 ffc9 	bl	8007000 <xTaskGenericNotify>
 800106e:	e7c7      	b.n	8001000 <StartLCDLine2Task+0x14>
			}
		}

		// If exceeded MAX_PASSWORD_LENGTH (6) or user presses enter or EXTI signaling reset
		else if(cnt==(MAX_PASSWORD_LENGTH-1) || ulNotificationValue==0xFF || ulNotificationValue==0xFE){
 8001070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001072:	2b05      	cmp	r3, #5
 8001074:	d006      	beq.n	8001084 <StartLCDLine2Task+0x98>
 8001076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001078:	2bff      	cmp	r3, #255	@ 0xff
 800107a:	d003      	beq.n	8001084 <StartLCDLine2Task+0x98>
 800107c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800107e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001080:	f040 8098 	bne.w	80011b4 <StartLCDLine2Task+0x1c8>
				// User presses enter and/or password length is between 4 and 6
				if((ulNotificationValue==0xFF && cnt>=MIN_PASSWORD_LENGTH) || cnt==(MAX_PASSWORD_LENGTH-1)){
 8001084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001086:	2bff      	cmp	r3, #255	@ 0xff
 8001088:	d102      	bne.n	8001090 <StartLCDLine2Task+0xa4>
 800108a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800108c:	2b03      	cmp	r3, #3
 800108e:	dc02      	bgt.n	8001096 <StartLCDLine2Task+0xaa>
 8001090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001092:	2b05      	cmp	r3, #5
 8001094:	d17b      	bne.n	800118e <StartLCDLine2Task+0x1a2>
					cnt=0;
 8001096:	2300      	movs	r3, #0
 8001098:	657b      	str	r3, [r7, #84]	@ 0x54
					Clear_LCD_Line2Screen();
 800109a:	f7ff ff7f 	bl	8000f9c <Clear_LCD_Line2Screen>

					char buff[50];
					sprintf(buff,"newPasswordFlag= %d et resetPasswordFlag= %d\r\n",newPasswordFlag,resetPasswordFlag);
 800109e:	f107 000c 	add.w	r0, r7, #12
 80010a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80010a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80010a6:	4950      	ldr	r1, [pc, #320]	@ (80011e8 <StartLCDLine2Task+0x1fc>)
 80010a8:	f007 f93e 	bl	8008328 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)buff, strlen(buff), osWaitForever);
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff f8b7 	bl	8000224 <strlen>
 80010b6:	4603      	mov	r3, r0
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	f107 010c 	add.w	r1, r7, #12
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	484a      	ldr	r0, [pc, #296]	@ (80011ec <StartLCDLine2Task+0x200>)
 80010c4:	f003 f920 	bl	8004308 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, (uint8_t*)pword, strlen(pword), osWaitForever);
 80010c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff f8a9 	bl	8000224 <strlen>
 80010d2:	4603      	mov	r3, r0
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	4843      	ldr	r0, [pc, #268]	@ (80011ec <StartLCDLine2Task+0x200>)
 80010e0:	f003 f912 	bl	8004308 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", sizeof("\r\n"), osWaitForever);
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	2203      	movs	r2, #3
 80010ea:	4941      	ldr	r1, [pc, #260]	@ (80011f0 <StartLCDLine2Task+0x204>)
 80010ec:	483f      	ldr	r0, [pc, #252]	@ (80011ec <StartLCDLine2Task+0x200>)
 80010ee:	f003 f90b 	bl	8004308 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, (uint8_t*)"WE ARE CHECKING CORRECTNESS\r\n", sizeof("WE ARE CHECKING CORRECTNESS\r\n"), osWaitForever);
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	221e      	movs	r2, #30
 80010f8:	493e      	ldr	r1, [pc, #248]	@ (80011f4 <StartLCDLine2Task+0x208>)
 80010fa:	483c      	ldr	r0, [pc, #240]	@ (80011ec <StartLCDLine2Task+0x200>)
 80010fc:	f003 f904 	bl	8004308 <HAL_UART_Transmit>

					// After user sets new password, we go back to DISARMED state
					if(newPasswordFlag){
 8001100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001102:	2b00      	cmp	r3, #0
 8001104:	d011      	beq.n	800112a <StartLCDLine2Task+0x13e>
						Write_to_Flash(START_ADDRESS, pword);
 8001106:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800110a:	4619      	mov	r1, r3
 800110c:	483a      	ldr	r0, [pc, #232]	@ (80011f8 <StartLCDLine2Task+0x20c>)
 800110e:	f7ff fab1 	bl	8000674 <Write_to_Flash>
						xTaskNotify(Green_LEDTaskHandle,DISARMED,eSetValueWithOverwrite);
 8001112:	4b34      	ldr	r3, [pc, #208]	@ (80011e4 <StartLCDLine2Task+0x1f8>)
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	2300      	movs	r3, #0
 8001118:	2203      	movs	r2, #3
 800111a:	2101      	movs	r1, #1
 800111c:	f005 ff70 	bl	8007000 <xTaskGenericNotify>
						newPasswordFlag=0;
 8001120:	2300      	movs	r3, #0
 8001122:	64fb      	str	r3, [r7, #76]	@ 0x4c
						resetPasswordFlag=1;
 8001124:	2301      	movs	r3, #1
 8001126:	653b      	str	r3, [r7, #80]	@ 0x50
				if((ulNotificationValue==0xFF && cnt>=MIN_PASSWORD_LENGTH) || cnt==(MAX_PASSWORD_LENGTH-1)){
 8001128:	e042      	b.n	80011b0 <StartLCDLine2Task+0x1c4>
					}
					// If user is setting alarm
					else{
						// If user arms the alarm with the correct password (strcmp verifies correctness)
						if(resetPasswordFlag && !strcmp(pword,Read_from_Flash(START_ADDRESS))){
 800112a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800112c:	2b00      	cmp	r3, #0
 800112e:	d014      	beq.n	800115a <StartLCDLine2Task+0x16e>
 8001130:	4831      	ldr	r0, [pc, #196]	@ (80011f8 <StartLCDLine2Task+0x20c>)
 8001132:	f7ff fae5 	bl	8000700 <Read_from_Flash>
 8001136:	4602      	mov	r2, r0
 8001138:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800113c:	4611      	mov	r1, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f866 	bl	8000210 <strcmp>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d107      	bne.n	800115a <StartLCDLine2Task+0x16e>
							xTaskNotify(Red_LEDTaskHandle,ARMED,eNoAction);
 800114a:	4b2c      	ldr	r3, [pc, #176]	@ (80011fc <StartLCDLine2Task+0x210>)
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	2300      	movs	r3, #0
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	f005 ff54 	bl	8007000 <xTaskGenericNotify>
				if((ulNotificationValue==0xFF && cnt>=MIN_PASSWORD_LENGTH) || cnt==(MAX_PASSWORD_LENGTH-1)){
 8001158:	e02a      	b.n	80011b0 <StartLCDLine2Task+0x1c4>
						}
						// If user wants to change password.
						// Correct system password must be entered (strcmp verifies correctness)
						else if(!resetPasswordFlag && !strcmp(pword,Read_from_Flash(START_ADDRESS))){
 800115a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800115c:	2b00      	cmp	r3, #0
 800115e:	d127      	bne.n	80011b0 <StartLCDLine2Task+0x1c4>
 8001160:	4825      	ldr	r0, [pc, #148]	@ (80011f8 <StartLCDLine2Task+0x20c>)
 8001162:	f7ff facd 	bl	8000700 <Read_from_Flash>
 8001166:	4602      	mov	r2, r0
 8001168:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f84e 	bl	8000210 <strcmp>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d11a      	bne.n	80011b0 <StartLCDLine2Task+0x1c4>
							xTaskNotify(resetPwordTaskHandle,NEW_PASSWORD,eSetValueWithOverwrite);
 800117a:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <StartLCDLine2Task+0x1f4>)
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	2300      	movs	r3, #0
 8001180:	2203      	movs	r2, #3
 8001182:	2111      	movs	r1, #17
 8001184:	f005 ff3c 	bl	8007000 <xTaskGenericNotify>
							newPasswordFlag=1;
 8001188:	2301      	movs	r3, #1
 800118a:	64fb      	str	r3, [r7, #76]	@ 0x4c
				if((ulNotificationValue==0xFF && cnt>=MIN_PASSWORD_LENGTH) || cnt==(MAX_PASSWORD_LENGTH-1)){
 800118c:	e010      	b.n	80011b0 <StartLCDLine2Task+0x1c4>
						}
					}
				}
				// User presses reset. Notified via EXTI:
				else if(ulNotificationValue==0xFE){
 800118e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001190:	2bfe      	cmp	r3, #254	@ 0xfe
 8001192:	d122      	bne.n	80011da <StartLCDLine2Task+0x1ee>
					cnt=0;
 8001194:	2300      	movs	r3, #0
 8001196:	657b      	str	r3, [r7, #84]	@ 0x54
					resetPasswordFlag=1;
 8001198:	2301      	movs	r3, #1
 800119a:	653b      	str	r3, [r7, #80]	@ 0x50
					Clear_LCD_Line2Screen();
 800119c:	f7ff fefe 	bl	8000f9c <Clear_LCD_Line2Screen>
					xTaskNotify(Green_LEDTaskHandle,DISARMED,eSetValueWithOverwrite);
 80011a0:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <StartLCDLine2Task+0x1f8>)
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	2300      	movs	r3, #0
 80011a6:	2203      	movs	r2, #3
 80011a8:	2101      	movs	r1, #1
 80011aa:	f005 ff29 	bl	8007000 <xTaskGenericNotify>
				if((ulNotificationValue==0xFF && cnt>=MIN_PASSWORD_LENGTH) || cnt==(MAX_PASSWORD_LENGTH-1)){
 80011ae:	e014      	b.n	80011da <StartLCDLine2Task+0x1ee>
 80011b0:	bf00      	nop
 80011b2:	e012      	b.n	80011da <StartLCDLine2Task+0x1ee>
				}
			}
			// Generic user input
			else{
				if(resetPasswordFlag){
 80011b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d006      	beq.n	80011c8 <StartLCDLine2Task+0x1dc>
					xTaskNotify(Green_LEDTaskHandle,DISARMED,eSetValueWithOverwrite);
 80011ba:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <StartLCDLine2Task+0x1f8>)
 80011bc:	6818      	ldr	r0, [r3, #0]
 80011be:	2300      	movs	r3, #0
 80011c0:	2203      	movs	r2, #3
 80011c2:	2101      	movs	r1, #1
 80011c4:	f005 ff1c 	bl	8007000 <xTaskGenericNotify>
				}
				Write_To_LCD(cnt+1);
 80011c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011ca:	3301      	adds	r3, #1
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fe91 	bl	8000ef4 <Write_To_LCD>
				cnt++;
 80011d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011d4:	3301      	adds	r3, #1
 80011d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80011d8:	e712      	b.n	8001000 <StartLCDLine2Task+0x14>
				if((ulNotificationValue==0xFF && cnt>=MIN_PASSWORD_LENGTH) || cnt==(MAX_PASSWORD_LENGTH-1)){
 80011da:	bf00      	nop
	if(xTaskNotifyWait(0, 0xffffffff, &ulNotificationValue, portMAX_DELAY)){
 80011dc:	e710      	b.n	8001000 <StartLCDLine2Task+0x14>
 80011de:	bf00      	nop
 80011e0:	2000013c 	.word	0x2000013c
 80011e4:	20000134 	.word	0x20000134
 80011e8:	08008dd0 	.word	0x08008dd0
 80011ec:	200000e0 	.word	0x200000e0
 80011f0:	08008e00 	.word	0x08008e00
 80011f4:	08008e04 	.word	0x08008e04
 80011f8:	08060000 	.word	0x08060000
 80011fc:	20000130 	.word	0x20000130

08001200 <StartRED_LEDTask>:
*/
/* USER CODE END Header_StartRED_LEDTask */

// System in ARMED state
void StartRED_LEDTask(void *argument)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	uint32_t ulNotificationValue;
  /* Infinite loop */
  for(;;)
  {
	  // Clear set bits on exit, and notifies the LCD to arm the system
	  if(xTaskNotifyWait(0, 0xffffffff, &ulNotificationValue, portMAX_DELAY)){
 8001208:	f107 020c 	add.w	r2, r7, #12
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
 8001210:	f04f 31ff 	mov.w	r1, #4294967295
 8001214:	2000      	movs	r0, #0
 8001216:	f005 fe93 	bl	8006f40 <xTaskNotifyWait>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0f3      	beq.n	8001208 <StartRED_LEDTask+0x8>
		  xTaskNotify(LCDLine1TaskHandle,ARMED,eSetValueWithOverwrite);
 8001220:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <StartRED_LEDTask+0x44>)
 8001222:	6818      	ldr	r0, [r3, #0]
 8001224:	2300      	movs	r3, #0
 8001226:	2203      	movs	r2, #3
 8001228:	2100      	movs	r1, #0
 800122a:	f005 fee9 	bl	8007000 <xTaskGenericNotify>
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
 800122e:	2201      	movs	r2, #1
 8001230:	2101      	movs	r1, #1
 8001232:	4805      	ldr	r0, [pc, #20]	@ (8001248 <StartRED_LEDTask+0x48>)
 8001234:	f001 fa92 	bl	800275c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2110      	movs	r1, #16
 800123c:	4802      	ldr	r0, [pc, #8]	@ (8001248 <StartRED_LEDTask+0x48>)
 800123e:	f001 fa8d 	bl	800275c <HAL_GPIO_WritePin>
	  if(xTaskNotifyWait(0, 0xffffffff, &ulNotificationValue, portMAX_DELAY)){
 8001242:	e7e1      	b.n	8001208 <StartRED_LEDTask+0x8>
 8001244:	20000138 	.word	0x20000138
 8001248:	40020000 	.word	0x40020000

0800124c <StartGreen_LEDTask>:
*/
/* USER CODE END Header_StartGreen_LEDTask */

// System in DISARMED state
void StartGreen_LEDTask(void *argument)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	uint32_t ulNotificationValue;
  /* Infinite loop */
  for(;;)
  {
	  // Clear set bits on exit, and notifies the LCD to disarm the system
	  if(xTaskNotifyWait(0, 0xffffffff, &ulNotificationValue, portMAX_DELAY)){
 8001254:	f107 020c 	add.w	r2, r7, #12
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	2000      	movs	r0, #0
 8001262:	f005 fe6d 	bl	8006f40 <xTaskNotifyWait>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f3      	beq.n	8001254 <StartGreen_LEDTask+0x8>
		// If it is a simple disarm, notify the LCD with disarm message,
		// Otherwise simply turn on Green LED
		if(ulNotificationValue==DISARMED){
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d106      	bne.n	8001280 <StartGreen_LEDTask+0x34>
			xTaskNotify(LCDLine1TaskHandle,DISARMED,eSetValueWithOverwrite);
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <StartGreen_LEDTask+0x4c>)
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	2300      	movs	r3, #0
 8001278:	2203      	movs	r2, #3
 800127a:	2101      	movs	r1, #1
 800127c:	f005 fec0 	bl	8007000 <xTaskGenericNotify>
		}
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	2101      	movs	r1, #1
 8001284:	4805      	ldr	r0, [pc, #20]	@ (800129c <StartGreen_LEDTask+0x50>)
 8001286:	f001 fa69 	bl	800275c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
 800128a:	2201      	movs	r2, #1
 800128c:	2110      	movs	r1, #16
 800128e:	4803      	ldr	r0, [pc, #12]	@ (800129c <StartGreen_LEDTask+0x50>)
 8001290:	f001 fa64 	bl	800275c <HAL_GPIO_WritePin>
	  if(xTaskNotifyWait(0, 0xffffffff, &ulNotificationValue, portMAX_DELAY)){
 8001294:	e7de      	b.n	8001254 <StartGreen_LEDTask+0x8>
 8001296:	bf00      	nop
 8001298:	20000138 	.word	0x20000138
 800129c:	40020000 	.word	0x40020000

080012a0 <StartLCDLine1Task>:
*/
/* USER CODE END Header_StartLCDLine1Task */

// DISPLAY system state on LCD line 1
void StartLCDLine1Task(void *argument)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	uint32_t ulNotificationValue;

  /* Infinite loop */
  for(;;)
  {
	  if(xTaskNotifyWait(0, 0xffffffff, &ulNotificationValue, portMAX_DELAY)){
 80012a8:	f107 020c 	add.w	r2, r7, #12
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295
 80012b4:	2000      	movs	r0, #0
 80012b6:	f005 fe43 	bl	8006f40 <xTaskNotifyWait>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f3      	beq.n	80012a8 <StartLCDLine1Task+0x8>

		  // use mutex to synchronize use of shared ressource (LCD screen)
		  osMutexAcquire(myMutexHandle, osWaitForever);
 80012c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001340 <StartLCDLine1Task+0xa0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295
 80012c8:	4618      	mov	r0, r3
 80012ca:	f003 fd7f 	bl	8004dcc <osMutexAcquire>

		  //HD44780_SetCursor(0,0); EN DEHORSSSSSS???????????????????
		  ///////////////////////////////////////////////////////////\

		  //SYSTEM ARMED
		  if(ulNotificationValue==ARMED){
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d107      	bne.n	80012e4 <StartLCDLine1Task+0x44>

			  HD44780_SetCursor(0,0);
 80012d4:	2100      	movs	r1, #0
 80012d6:	2000      	movs	r0, #0
 80012d8:	f000 fafa 	bl	80018d0 <HD44780_SetCursor>
			  HD44780_PrintStr("SYSTEM ARMED   ");
 80012dc:	4819      	ldr	r0, [pc, #100]	@ (8001344 <StartLCDLine1Task+0xa4>)
 80012de:	f000 fb69 	bl	80019b4 <HD44780_PrintStr>
 80012e2:	e027      	b.n	8001334 <StartLCDLine1Task+0x94>
		  }
		  //SYSTEM DISARMED
		  else if(ulNotificationValue==DISARMED){
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d107      	bne.n	80012fa <StartLCDLine1Task+0x5a>

			  HD44780_SetCursor(0,0);
 80012ea:	2100      	movs	r1, #0
 80012ec:	2000      	movs	r0, #0
 80012ee:	f000 faef 	bl	80018d0 <HD44780_SetCursor>
			  HD44780_PrintStr("SYSTEM DISARMED");
 80012f2:	4815      	ldr	r0, [pc, #84]	@ (8001348 <StartLCDLine1Task+0xa8>)
 80012f4:	f000 fb5e 	bl	80019b4 <HD44780_PrintStr>
 80012f8:	e01c      	b.n	8001334 <StartLCDLine1Task+0x94>
		  }
		  //OLD PASSWORD
		  else if(ulNotificationValue==OLD_PASSWORD){
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2b10      	cmp	r3, #16
 80012fe:	d107      	bne.n	8001310 <StartLCDLine1Task+0x70>
			  HD44780_SetCursor(0,0);
 8001300:	2100      	movs	r1, #0
 8001302:	2000      	movs	r0, #0
 8001304:	f000 fae4 	bl	80018d0 <HD44780_SetCursor>
			  HD44780_PrintStr("OLD PASSWORD:    ");
 8001308:	4810      	ldr	r0, [pc, #64]	@ (800134c <StartLCDLine1Task+0xac>)
 800130a:	f000 fb53 	bl	80019b4 <HD44780_PrintStr>
 800130e:	e011      	b.n	8001334 <StartLCDLine1Task+0x94>
		  }
		  //NEW PASSWORD
		  else if(ulNotificationValue==NEW_PASSWORD){
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b11      	cmp	r3, #17
 8001314:	d107      	bne.n	8001326 <StartLCDLine1Task+0x86>
			  HD44780_SetCursor(0,0);
 8001316:	2100      	movs	r1, #0
 8001318:	2000      	movs	r0, #0
 800131a:	f000 fad9 	bl	80018d0 <HD44780_SetCursor>
			  HD44780_PrintStr("NEW PASSWORD:  ");
 800131e:	480c      	ldr	r0, [pc, #48]	@ (8001350 <StartLCDLine1Task+0xb0>)
 8001320:	f000 fb48 	bl	80019b4 <HD44780_PrintStr>
 8001324:	e006      	b.n	8001334 <StartLCDLine1Task+0x94>
		  }
		  else{
			  //CLEAR SCREEN, ERROR...
			  HD44780_SetCursor(0,0);
 8001326:	2100      	movs	r1, #0
 8001328:	2000      	movs	r0, #0
 800132a:	f000 fad1 	bl	80018d0 <HD44780_SetCursor>
			  HD44780_PrintStr("SYSTEM ERROR... ");
 800132e:	4809      	ldr	r0, [pc, #36]	@ (8001354 <StartLCDLine1Task+0xb4>)
 8001330:	f000 fb40 	bl	80019b4 <HD44780_PrintStr>
		  }
		  osMutexRelease(myMutexHandle);
 8001334:	4b02      	ldr	r3, [pc, #8]	@ (8001340 <StartLCDLine1Task+0xa0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f003 fd92 	bl	8004e62 <osMutexRelease>
	  if(xTaskNotifyWait(0, 0xffffffff, &ulNotificationValue, portMAX_DELAY)){
 800133e:	e7b3      	b.n	80012a8 <StartLCDLine1Task+0x8>
 8001340:	20000144 	.word	0x20000144
 8001344:	08008e24 	.word	0x08008e24
 8001348:	08008e34 	.word	0x08008e34
 800134c:	08008e44 	.word	0x08008e44
 8001350:	08008e58 	.word	0x08008e58
 8001354:	08008e68 	.word	0x08008e68

08001358 <StartResetPwordTask>:
*/
/* USER CODE END Header_StartResetPwordTask */

// Reset Password task that handles OLD_PASSWORD or NEW_PASSWORD states
void StartResetPwordTask(void *argument)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResetPwordTask */
	uint32_t ulNotificationValue;
  /* Infinite loop */
  for(;;)
  {
	  if(xTaskNotifyWait(0, 0xffffffff, &ulNotificationValue, portMAX_DELAY)){
 8001360:	f107 020c 	add.w	r2, r7, #12
 8001364:	f04f 33ff 	mov.w	r3, #4294967295
 8001368:	f04f 31ff 	mov.w	r1, #4294967295
 800136c:	2000      	movs	r0, #0
 800136e:	f005 fde7 	bl	8006f40 <xTaskNotifyWait>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f3      	beq.n	8001360 <StartResetPwordTask+0x8>
		// Always notify green LED (with different notification value),
		// as we are in DISARMED state by default
		xTaskNotify(Green_LEDTaskHandle,OLD_PASSWORD,eSetValueWithOverwrite);
 8001378:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <StartResetPwordTask+0x5c>)
 800137a:	6818      	ldr	r0, [r3, #0]
 800137c:	2300      	movs	r3, #0
 800137e:	2203      	movs	r2, #3
 8001380:	2110      	movs	r1, #16
 8001382:	f005 fe3d 	bl	8007000 <xTaskGenericNotify>

		// If Old password is being entered
		if(ulNotificationValue==OLD_PASSWORD){
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2b10      	cmp	r3, #16
 800138a:	d107      	bne.n	800139c <StartResetPwordTask+0x44>
			xTaskNotify(LCDLine1TaskHandle,OLD_PASSWORD,eSetValueWithOverwrite);
 800138c:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <StartResetPwordTask+0x60>)
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	2300      	movs	r3, #0
 8001392:	2203      	movs	r2, #3
 8001394:	2110      	movs	r1, #16
 8001396:	f005 fe33 	bl	8007000 <xTaskGenericNotify>
 800139a:	e7e1      	b.n	8001360 <StartResetPwordTask+0x8>
		}
		// If New password is being entered
		else if(ulNotificationValue==NEW_PASSWORD){
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2b11      	cmp	r3, #17
 80013a0:	d1de      	bne.n	8001360 <StartResetPwordTask+0x8>
			xTaskNotify(LCDLine1TaskHandle,NEW_PASSWORD,eSetValueWithOverwrite);
 80013a2:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <StartResetPwordTask+0x60>)
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	2300      	movs	r3, #0
 80013a8:	2203      	movs	r2, #3
 80013aa:	2111      	movs	r1, #17
 80013ac:	f005 fe28 	bl	8007000 <xTaskGenericNotify>
	  if(xTaskNotifyWait(0, 0xffffffff, &ulNotificationValue, portMAX_DELAY)){
 80013b0:	e7d6      	b.n	8001360 <StartResetPwordTask+0x8>
 80013b2:	bf00      	nop
 80013b4:	20000134 	.word	0x20000134
 80013b8:	20000138 	.word	0x20000138

080013bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a04      	ldr	r2, [pc, #16]	@ (80013dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80013ce:	f000 fc0f 	bl	8001bf0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40001000 	.word	0x40001000

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <Error_Handler+0x8>

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <HAL_MspInit+0x54>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	4a11      	ldr	r2, [pc, #68]	@ (8001440 <HAL_MspInit+0x54>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001400:	6453      	str	r3, [r2, #68]	@ 0x44
 8001402:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <HAL_MspInit+0x54>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <HAL_MspInit+0x54>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	4a0a      	ldr	r2, [pc, #40]	@ (8001440 <HAL_MspInit+0x54>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	@ 0x40
 800141e:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <HAL_MspInit+0x54>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	210f      	movs	r1, #15
 800142e:	f06f 0001 	mvn.w	r0, #1
 8001432:	f000 fcd9 	bl	8001de8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800

08001444 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	@ 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a19      	ldr	r2, [pc, #100]	@ (80014c8 <HAL_I2C_MspInit+0x84>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d12c      	bne.n	80014c0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a17      	ldr	r2, [pc, #92]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001482:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001488:	2312      	movs	r3, #18
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001494:	2304      	movs	r3, #4
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	480c      	ldr	r0, [pc, #48]	@ (80014d0 <HAL_I2C_MspInit+0x8c>)
 80014a0:	f000 ffb0 	bl	8002404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ac:	4a07      	ldr	r2, [pc, #28]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 80014ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b4:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014c0:	bf00      	nop
 80014c2:	3728      	adds	r7, #40	@ 0x28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40005400 	.word	0x40005400
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020400 	.word	0x40020400

080014d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	@ 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a19      	ldr	r2, [pc, #100]	@ (8001558 <HAL_UART_MspInit+0x84>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d12b      	bne.n	800154e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b18      	ldr	r3, [pc, #96]	@ (800155c <HAL_UART_MspInit+0x88>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	4a17      	ldr	r2, [pc, #92]	@ (800155c <HAL_UART_MspInit+0x88>)
 8001500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001504:	6413      	str	r3, [r2, #64]	@ 0x40
 8001506:	4b15      	ldr	r3, [pc, #84]	@ (800155c <HAL_UART_MspInit+0x88>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b11      	ldr	r3, [pc, #68]	@ (800155c <HAL_UART_MspInit+0x88>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a10      	ldr	r2, [pc, #64]	@ (800155c <HAL_UART_MspInit+0x88>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <HAL_UART_MspInit+0x88>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800152e:	230c      	movs	r3, #12
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800153e:	2307      	movs	r3, #7
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	4805      	ldr	r0, [pc, #20]	@ (8001560 <HAL_UART_MspInit+0x8c>)
 800154a:	f000 ff5b 	bl	8002404 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	@ 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40004400 	.word	0x40004400
 800155c:	40023800 	.word	0x40023800
 8001560:	40020000 	.word	0x40020000

08001564 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08e      	sub	sp, #56	@ 0x38
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	4b33      	ldr	r3, [pc, #204]	@ (8001648 <HAL_InitTick+0xe4>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157c:	4a32      	ldr	r2, [pc, #200]	@ (8001648 <HAL_InitTick+0xe4>)
 800157e:	f043 0310 	orr.w	r3, r3, #16
 8001582:	6413      	str	r3, [r2, #64]	@ 0x40
 8001584:	4b30      	ldr	r3, [pc, #192]	@ (8001648 <HAL_InitTick+0xe4>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001588:	f003 0310 	and.w	r3, r3, #16
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001590:	f107 0210 	add.w	r2, r7, #16
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4611      	mov	r1, r2
 800159a:	4618      	mov	r0, r3
 800159c:	f001 fec8 	bl	8003330 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d103      	bne.n	80015b2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015aa:	f001 fe99 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 80015ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80015b0:	e004      	b.n	80015bc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015b2:	f001 fe95 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 80015b6:	4603      	mov	r3, r0
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015be:	4a23      	ldr	r2, [pc, #140]	@ (800164c <HAL_InitTick+0xe8>)
 80015c0:	fba2 2303 	umull	r2, r3, r2, r3
 80015c4:	0c9b      	lsrs	r3, r3, #18
 80015c6:	3b01      	subs	r3, #1
 80015c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015ca:	4b21      	ldr	r3, [pc, #132]	@ (8001650 <HAL_InitTick+0xec>)
 80015cc:	4a21      	ldr	r2, [pc, #132]	@ (8001654 <HAL_InitTick+0xf0>)
 80015ce:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <HAL_InitTick+0xec>)
 80015d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015d6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001650 <HAL_InitTick+0xec>)
 80015da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015dc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015de:	4b1c      	ldr	r3, [pc, #112]	@ (8001650 <HAL_InitTick+0xec>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001650 <HAL_InitTick+0xec>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ea:	4b19      	ldr	r3, [pc, #100]	@ (8001650 <HAL_InitTick+0xec>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80015f0:	4817      	ldr	r0, [pc, #92]	@ (8001650 <HAL_InitTick+0xec>)
 80015f2:	f002 fb9d 	bl	8003d30 <HAL_TIM_Base_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80015fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001600:	2b00      	cmp	r3, #0
 8001602:	d11b      	bne.n	800163c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001604:	4812      	ldr	r0, [pc, #72]	@ (8001650 <HAL_InitTick+0xec>)
 8001606:	f002 fbed 	bl	8003de4 <HAL_TIM_Base_Start_IT>
 800160a:	4603      	mov	r3, r0
 800160c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001610:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001614:	2b00      	cmp	r3, #0
 8001616:	d111      	bne.n	800163c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001618:	2036      	movs	r0, #54	@ 0x36
 800161a:	f000 fc01 	bl	8001e20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b0f      	cmp	r3, #15
 8001622:	d808      	bhi.n	8001636 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001624:	2200      	movs	r2, #0
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	2036      	movs	r0, #54	@ 0x36
 800162a:	f000 fbdd 	bl	8001de8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800162e:	4a0a      	ldr	r2, [pc, #40]	@ (8001658 <HAL_InitTick+0xf4>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	e002      	b.n	800163c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800163c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001640:	4618      	mov	r0, r3
 8001642:	3738      	adds	r7, #56	@ 0x38
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40023800 	.word	0x40023800
 800164c:	431bde83 	.word	0x431bde83
 8001650:	20000158 	.word	0x20000158
 8001654:	40001000 	.word	0x40001000
 8001658:	20000014 	.word	0x20000014

0800165c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <NMI_Handler+0x4>

08001664 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <HardFault_Handler+0x4>

0800166c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <MemManage_Handler+0x4>

08001674 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <BusFault_Handler+0x4>

0800167c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <UsageFault_Handler+0x4>

08001684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_PUSH_BTN_Pin);
 8001696:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800169a:	f001 f879 	bl	8002790 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016a8:	4802      	ldr	r0, [pc, #8]	@ (80016b4 <TIM6_DAC_IRQHandler+0x10>)
 80016aa:	f002 fc0b 	bl	8003ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000158 	.word	0x20000158

080016b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c0:	4a14      	ldr	r2, [pc, #80]	@ (8001714 <_sbrk+0x5c>)
 80016c2:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <_sbrk+0x60>)
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016cc:	4b13      	ldr	r3, [pc, #76]	@ (800171c <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d102      	bne.n	80016da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d4:	4b11      	ldr	r3, [pc, #68]	@ (800171c <_sbrk+0x64>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	@ (8001720 <_sbrk+0x68>)
 80016d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016da:	4b10      	ldr	r3, [pc, #64]	@ (800171c <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d207      	bcs.n	80016f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e8:	f006 fea6 	bl	8008438 <__errno>
 80016ec:	4603      	mov	r3, r0
 80016ee:	220c      	movs	r2, #12
 80016f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	e009      	b.n	800170c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f8:	4b08      	ldr	r3, [pc, #32]	@ (800171c <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fe:	4b07      	ldr	r3, [pc, #28]	@ (800171c <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	4a05      	ldr	r2, [pc, #20]	@ (800171c <_sbrk+0x64>)
 8001708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20020000 	.word	0x20020000
 8001718:	00000400 	.word	0x00000400
 800171c:	200001a0 	.word	0x200001a0
 8001720:	20004d00 	.word	0x20004d00

08001724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001728:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <SystemInit+0x20>)
 800172a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800172e:	4a05      	ldr	r2, [pc, #20]	@ (8001744 <SystemInit+0x20>)
 8001730:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001734:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001748:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001780 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800174c:	f7ff ffea 	bl	8001724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001750:	480c      	ldr	r0, [pc, #48]	@ (8001784 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001752:	490d      	ldr	r1, [pc, #52]	@ (8001788 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001754:	4a0d      	ldr	r2, [pc, #52]	@ (800178c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001766:	4a0a      	ldr	r2, [pc, #40]	@ (8001790 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001768:	4c0a      	ldr	r4, [pc, #40]	@ (8001794 <LoopFillZerobss+0x22>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001776:	f006 fe65 	bl	8008444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177a:	f7ff f807 	bl	800078c <main>
  bx  lr    
 800177e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800178c:	08009000 	.word	0x08009000
  ldr r2, =_sbss
 8001790:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001794:	20004d00 	.word	0x20004d00

08001798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC_IRQHandler>
	...

0800179c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80017a6:	4a38      	ldr	r2, [pc, #224]	@ (8001888 <HD44780_Init+0xec>)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80017ac:	4b37      	ldr	r3, [pc, #220]	@ (800188c <HD44780_Init+0xf0>)
 80017ae:	2208      	movs	r2, #8
 80017b0:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80017b2:	4b37      	ldr	r3, [pc, #220]	@ (8001890 <HD44780_Init+0xf4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80017b8:	4b33      	ldr	r3, [pc, #204]	@ (8001888 <HD44780_Init+0xec>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d907      	bls.n	80017d0 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80017c0:	4b33      	ldr	r3, [pc, #204]	@ (8001890 <HD44780_Init+0xf4>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	f043 0308 	orr.w	r3, r3, #8
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b31      	ldr	r3, [pc, #196]	@ (8001890 <HD44780_Init+0xf4>)
 80017cc:	701a      	strb	r2, [r3, #0]
 80017ce:	e006      	b.n	80017de <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80017d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001890 <HD44780_Init+0xf4>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4b2d      	ldr	r3, [pc, #180]	@ (8001890 <HD44780_Init+0xf4>)
 80017dc:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80017de:	f000 f993 	bl	8001b08 <DelayInit>
  HAL_Delay(50);
 80017e2:	2032      	movs	r0, #50	@ 0x32
 80017e4:	f000 fa24 	bl	8001c30 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80017e8:	4b28      	ldr	r3, [pc, #160]	@ (800188c <HD44780_Init+0xf0>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 f951 	bl	8001a94 <ExpanderWrite>
  HAL_Delay(1000);
 80017f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017f6:	f000 fa1b 	bl	8001c30 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80017fa:	2030      	movs	r0, #48	@ 0x30
 80017fc:	f000 f939 	bl	8001a72 <Write4Bits>
  DelayUS(4500);
 8001800:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001804:	f000 f9aa 	bl	8001b5c <DelayUS>

  Write4Bits(0x03 << 4);
 8001808:	2030      	movs	r0, #48	@ 0x30
 800180a:	f000 f932 	bl	8001a72 <Write4Bits>
  DelayUS(4500);
 800180e:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001812:	f000 f9a3 	bl	8001b5c <DelayUS>

  Write4Bits(0x03 << 4);
 8001816:	2030      	movs	r0, #48	@ 0x30
 8001818:	f000 f92b 	bl	8001a72 <Write4Bits>
  DelayUS(4500);
 800181c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001820:	f000 f99c 	bl	8001b5c <DelayUS>

  Write4Bits(0x02 << 4);
 8001824:	2020      	movs	r0, #32
 8001826:	f000 f924 	bl	8001a72 <Write4Bits>
  DelayUS(100);
 800182a:	2064      	movs	r0, #100	@ 0x64
 800182c:	f000 f996 	bl	8001b5c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001830:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <HD44780_Init+0xf4>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	f043 0320 	orr.w	r3, r3, #32
 8001838:	b2db      	uxtb	r3, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f8dc 	bl	80019f8 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001840:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <HD44780_Init+0xf8>)
 8001842:	2204      	movs	r2, #4
 8001844:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8001846:	f000 f875 	bl	8001934 <HD44780_Display>
  HD44780_Clear();
 800184a:	f000 f82b 	bl	80018a4 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800184e:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <HD44780_Init+0xfc>)
 8001850:	2202      	movs	r2, #2
 8001852:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001854:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <HD44780_Init+0xfc>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	f043 0304 	orr.w	r3, r3, #4
 800185c:	b2db      	uxtb	r3, r3
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f8ca 	bl	80019f8 <SendCommand>
  DelayUS(4500);
 8001864:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001868:	f000 f978 	bl	8001b5c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800186c:	490b      	ldr	r1, [pc, #44]	@ (800189c <HD44780_Init+0x100>)
 800186e:	2000      	movs	r0, #0
 8001870:	f000 f876 	bl	8001960 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001874:	490a      	ldr	r1, [pc, #40]	@ (80018a0 <HD44780_Init+0x104>)
 8001876:	2001      	movs	r0, #1
 8001878:	f000 f872 	bl	8001960 <HD44780_CreateSpecialChar>

  HD44780_Home();
 800187c:	f000 f81d 	bl	80018ba <HD44780_Home>
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200001a7 	.word	0x200001a7
 800188c:	200001a8 	.word	0x200001a8
 8001890:	200001a4 	.word	0x200001a4
 8001894:	200001a5 	.word	0x200001a5
 8001898:	200001a6 	.word	0x200001a6
 800189c:	20000004 	.word	0x20000004
 80018a0:	2000000c 	.word	0x2000000c

080018a4 <HD44780_Clear>:

void HD44780_Clear()
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80018a8:	2001      	movs	r0, #1
 80018aa:	f000 f8a5 	bl	80019f8 <SendCommand>
  DelayUS(2000);
 80018ae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80018b2:	f000 f953 	bl	8001b5c <DelayUS>
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HD44780_Home>:

void HD44780_Home()
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80018be:	2002      	movs	r0, #2
 80018c0:	f000 f89a 	bl	80019f8 <SendCommand>
  DelayUS(2000);
 80018c4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80018c8:	f000 f948 	bl	8001b5c <DelayUS>
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b087      	sub	sp, #28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	460a      	mov	r2, r1
 80018da:	71fb      	strb	r3, [r7, #7]
 80018dc:	4613      	mov	r3, r2
 80018de:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80018e0:	4b12      	ldr	r3, [pc, #72]	@ (800192c <HD44780_SetCursor+0x5c>)
 80018e2:	f107 0408 	add.w	r4, r7, #8
 80018e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80018ec:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <HD44780_SetCursor+0x60>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	79ba      	ldrb	r2, [r7, #6]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d303      	bcc.n	80018fe <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001930 <HD44780_SetCursor+0x60>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80018fe:	79bb      	ldrb	r3, [r7, #6]
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	3318      	adds	r3, #24
 8001904:	443b      	add	r3, r7
 8001906:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	4413      	add	r3, r2
 8001910:	b2db      	uxtb	r3, r3
 8001912:	b25b      	sxtb	r3, r3
 8001914:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001918:	b25b      	sxtb	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	4618      	mov	r0, r3
 800191e:	f000 f86b 	bl	80019f8 <SendCommand>
}
 8001922:	bf00      	nop
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	08008e7c 	.word	0x08008e7c
 8001930:	200001a7 	.word	0x200001a7

08001934 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001938:	4b08      	ldr	r3, [pc, #32]	@ (800195c <HD44780_Display+0x28>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <HD44780_Display+0x28>)
 8001944:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001946:	4b05      	ldr	r3, [pc, #20]	@ (800195c <HD44780_Display+0x28>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	f043 0308 	orr.w	r3, r3, #8
 800194e:	b2db      	uxtb	r3, r3
 8001950:	4618      	mov	r0, r3
 8001952:	f000 f851 	bl	80019f8 <SendCommand>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200001a5 	.word	0x200001a5

08001960 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	b25b      	sxtb	r3, r3
 800197c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001980:	b25b      	sxtb	r3, r3
 8001982:	b2db      	uxtb	r3, r3
 8001984:	4618      	mov	r0, r3
 8001986:	f000 f837 	bl	80019f8 <SendCommand>
  for (int i=0; i<8; i++)
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	e009      	b.n	80019a4 <HD44780_CreateSpecialChar+0x44>
  {
    SendChar(charmap[i]);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	4413      	add	r3, r2
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f000 f83b 	bl	8001a14 <SendChar>
  for (int i=0; i<8; i++)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3301      	adds	r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b07      	cmp	r3, #7
 80019a8:	ddf2      	ble.n	8001990 <HD44780_CreateSpecialChar+0x30>
  }
}
 80019aa:	bf00      	nop
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80019bc:	e006      	b.n	80019cc <HD44780_PrintStr+0x18>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f824 	bl	8001a14 <SendChar>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f4      	bne.n	80019be <HD44780_PrintStr+0xa>
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HD44780_Backlight>:
  dpBacklight=LCD_NOBACKLIGHT;
  ExpanderWrite(0);
}

void HD44780_Backlight(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 80019e4:	4b03      	ldr	r3, [pc, #12]	@ (80019f4 <HD44780_Backlight+0x14>)
 80019e6:	2208      	movs	r2, #8
 80019e8:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 80019ea:	2000      	movs	r0, #0
 80019ec:	f000 f852 	bl	8001a94 <ExpanderWrite>
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200001a8 	.word	0x200001a8

080019f8 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f812 	bl	8001a30 <Send>
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	2101      	movs	r1, #1
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 f804 	bl	8001a30 <Send>
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	460a      	mov	r2, r1
 8001a3a:	71fb      	strb	r3, [r7, #7]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	f023 030f 	bic.w	r3, r3, #15
 8001a46:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001a4e:	7bfa      	ldrb	r2, [r7, #15]
 8001a50:	79bb      	ldrb	r3, [r7, #6]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f80b 	bl	8001a72 <Write4Bits>
  Write4Bits((lownib)|mode);
 8001a5c:	7bba      	ldrb	r2, [r7, #14]
 8001a5e:	79bb      	ldrb	r3, [r7, #6]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 f804 	bl	8001a72 <Write4Bits>
}
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 f808 	bl	8001a94 <ExpanderWrite>
  PulseEnable(value);
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 f820 	bl	8001acc <PulseEnable>
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af02      	add	r7, sp, #8
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001a9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <ExpanderWrite+0x30>)
 8001aa0:	781a      	ldrb	r2, [r3, #0]
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001aaa:	f107 020f 	add.w	r2, r7, #15
 8001aae:	230a      	movs	r3, #10
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	214e      	movs	r1, #78	@ 0x4e
 8001ab6:	4804      	ldr	r0, [pc, #16]	@ (8001ac8 <ExpanderWrite+0x34>)
 8001ab8:	f000 ffc6 	bl	8002a48 <HAL_I2C_Master_Transmit>
}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200001a8 	.word	0x200001a8
 8001ac8:	2000008c 	.word	0x2000008c

08001acc <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff ffd8 	bl	8001a94 <ExpanderWrite>
  DelayUS(20);
 8001ae4:	2014      	movs	r0, #20
 8001ae6:	f000 f839 	bl	8001b5c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	f023 0304 	bic.w	r3, r3, #4
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff ffce 	bl	8001a94 <ExpanderWrite>
  DelayUS(20);
 8001af8:	2014      	movs	r0, #20
 8001afa:	f000 f82f 	bl	8001b5c <DelayUS>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <DelayInit>:

static void DelayInit(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	@ (8001b54 <DelayInit+0x4c>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4a10      	ldr	r2, [pc, #64]	@ (8001b54 <DelayInit+0x4c>)
 8001b12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b16:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001b18:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <DelayInit+0x4c>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b54 <DelayInit+0x4c>)
 8001b1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b22:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001b24:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <DelayInit+0x50>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0b      	ldr	r2, [pc, #44]	@ (8001b58 <DelayInit+0x50>)
 8001b2a:	f023 0301 	bic.w	r3, r3, #1
 8001b2e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001b30:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <DelayInit+0x50>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a08      	ldr	r2, [pc, #32]	@ (8001b58 <DelayInit+0x50>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <DelayInit+0x50>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001b42:	bf00      	nop
  __ASM volatile ("NOP");
 8001b44:	bf00      	nop
  __ASM volatile ("NOP");
 8001b46:	bf00      	nop
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000edf0 	.word	0xe000edf0
 8001b58:	e0001000 	.word	0xe0001000

08001b5c <DelayUS>:

static void DelayUS(uint32_t us) {
 8001b5c:	b480      	push	{r7}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001b64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <DelayUS+0x44>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0e      	ldr	r2, [pc, #56]	@ (8001ba4 <DelayUS+0x48>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0c9a      	lsrs	r2, r3, #18
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001b78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba8 <DelayUS+0x4c>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba8 <DelayUS+0x4c>)
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d8f6      	bhi.n	8001b7e <DelayUS+0x22>
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	371c      	adds	r7, #28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	431bde83 	.word	0x431bde83
 8001ba8:	e0001000 	.word	0xe0001000

08001bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bec <HAL_Init+0x40>)
 8001bb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bec <HAL_Init+0x40>)
 8001bc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc8:	4b08      	ldr	r3, [pc, #32]	@ (8001bec <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a07      	ldr	r2, [pc, #28]	@ (8001bec <HAL_Init+0x40>)
 8001bce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd4:	2003      	movs	r0, #3
 8001bd6:	f000 f8fc 	bl	8001dd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bda:	200f      	movs	r0, #15
 8001bdc:	f7ff fcc2 	bl	8001564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be0:	f7ff fc04 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023c00 	.word	0x40023c00

08001bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <HAL_IncTick+0x20>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <HAL_IncTick+0x24>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	4a04      	ldr	r2, [pc, #16]	@ (8001c14 <HAL_IncTick+0x24>)
 8001c02:	6013      	str	r3, [r2, #0]
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000018 	.word	0x20000018
 8001c14:	200001ac 	.word	0x200001ac

08001c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	@ (8001c2c <HAL_GetTick+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	200001ac 	.word	0x200001ac

08001c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c38:	f7ff ffee 	bl	8001c18 <HAL_GetTick>
 8001c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c48:	d005      	beq.n	8001c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <HAL_Delay+0x44>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4413      	add	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c56:	bf00      	nop
 8001c58:	f7ff ffde 	bl	8001c18 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d8f7      	bhi.n	8001c58 <HAL_Delay+0x28>
  {
  }
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000018 	.word	0x20000018

08001c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c88:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c94:	4013      	ands	r3, r2
 8001c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001caa:	4a04      	ldr	r2, [pc, #16]	@ (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	60d3      	str	r3, [r2, #12]
}
 8001cb0:	bf00      	nop
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc4:	4b04      	ldr	r3, [pc, #16]	@ (8001cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	f003 0307 	and.w	r3, r3, #7
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	db0b      	blt.n	8001d06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	f003 021f 	and.w	r2, r3, #31
 8001cf4:	4907      	ldr	r1, [pc, #28]	@ (8001d14 <__NVIC_EnableIRQ+0x38>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	095b      	lsrs	r3, r3, #5
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000e100 	.word	0xe000e100

08001d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	db0a      	blt.n	8001d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	490c      	ldr	r1, [pc, #48]	@ (8001d64 <__NVIC_SetPriority+0x4c>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	0112      	lsls	r2, r2, #4
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d40:	e00a      	b.n	8001d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4908      	ldr	r1, [pc, #32]	@ (8001d68 <__NVIC_SetPriority+0x50>)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	3b04      	subs	r3, #4
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	440b      	add	r3, r1
 8001d56:	761a      	strb	r2, [r3, #24]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000e100 	.word	0xe000e100
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	@ 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f1c3 0307 	rsb	r3, r3, #7
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	bf28      	it	cs
 8001d8a:	2304      	movcs	r3, #4
 8001d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3304      	adds	r3, #4
 8001d92:	2b06      	cmp	r3, #6
 8001d94:	d902      	bls.n	8001d9c <NVIC_EncodePriority+0x30>
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3b03      	subs	r3, #3
 8001d9a:	e000      	b.n	8001d9e <NVIC_EncodePriority+0x32>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	f04f 32ff 	mov.w	r2, #4294967295
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43da      	mvns	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	401a      	ands	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db4:	f04f 31ff 	mov.w	r1, #4294967295
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	43d9      	mvns	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	4313      	orrs	r3, r2
         );
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3724      	adds	r7, #36	@ 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ff4c 	bl	8001c78 <__NVIC_SetPriorityGrouping>
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfa:	f7ff ff61 	bl	8001cc0 <__NVIC_GetPriorityGrouping>
 8001dfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	6978      	ldr	r0, [r7, #20]
 8001e06:	f7ff ffb1 	bl	8001d6c <NVIC_EncodePriority>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e10:	4611      	mov	r1, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ff80 	bl	8001d18 <__NVIC_SetPriority>
}
 8001e18:	bf00      	nop
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff54 	bl	8001cdc <__NVIC_EnableIRQ>
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001e4a:	4b23      	ldr	r3, [pc, #140]	@ (8001ed8 <HAL_FLASH_Program+0x9c>)
 8001e4c:	7e1b      	ldrb	r3, [r3, #24]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_FLASH_Program+0x1a>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e03b      	b.n	8001ece <HAL_FLASH_Program+0x92>
 8001e56:	4b20      	ldr	r3, [pc, #128]	@ (8001ed8 <HAL_FLASH_Program+0x9c>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e5c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001e60:	f000 f870 	bl	8001f44 <FLASH_WaitForLastOperation>
 8001e64:	4603      	mov	r3, r0
 8001e66:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001e68:	7dfb      	ldrb	r3, [r7, #23]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d12b      	bne.n	8001ec6 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d105      	bne.n	8001e80 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001e74:	783b      	ldrb	r3, [r7, #0]
 8001e76:	4619      	mov	r1, r3
 8001e78:	68b8      	ldr	r0, [r7, #8]
 8001e7a:	f000 f91b 	bl	80020b4 <FLASH_Program_Byte>
 8001e7e:	e016      	b.n	8001eae <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d105      	bne.n	8001e92 <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001e86:	883b      	ldrh	r3, [r7, #0]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	68b8      	ldr	r0, [r7, #8]
 8001e8c:	f000 f8ee 	bl	800206c <FLASH_Program_HalfWord>
 8001e90:	e00d      	b.n	8001eae <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d105      	bne.n	8001ea4 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	68b8      	ldr	r0, [r7, #8]
 8001e9e:	f000 f8c3 	bl	8002028 <FLASH_Program_Word>
 8001ea2:	e004      	b.n	8001eae <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ea8:	68b8      	ldr	r0, [r7, #8]
 8001eaa:	f000 f88b 	bl	8001fc4 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001eae:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001eb2:	f000 f847 	bl	8001f44 <FLASH_WaitForLastOperation>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001eba:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <HAL_FLASH_Program+0xa0>)
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	4a07      	ldr	r2, [pc, #28]	@ (8001edc <HAL_FLASH_Program+0xa0>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001ec6:	4b04      	ldr	r3, [pc, #16]	@ (8001ed8 <HAL_FLASH_Program+0x9c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	761a      	strb	r2, [r3, #24]

  return status;
 8001ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200001b0 	.word	0x200001b0
 8001edc:	40023c00 	.word	0x40023c00

08001ee0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001eea:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <HAL_FLASH_Unlock+0x38>)
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	da0b      	bge.n	8001f0a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <HAL_FLASH_Unlock+0x38>)
 8001ef4:	4a09      	ldr	r2, [pc, #36]	@ (8001f1c <HAL_FLASH_Unlock+0x3c>)
 8001ef6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ef8:	4b07      	ldr	r3, [pc, #28]	@ (8001f18 <HAL_FLASH_Unlock+0x38>)
 8001efa:	4a09      	ldr	r2, [pc, #36]	@ (8001f20 <HAL_FLASH_Unlock+0x40>)
 8001efc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001efe:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <HAL_FLASH_Unlock+0x38>)
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	da01      	bge.n	8001f0a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	40023c00 	.word	0x40023c00
 8001f1c:	45670123 	.word	0x45670123
 8001f20:	cdef89ab 	.word	0xcdef89ab

08001f24 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001f28:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <HAL_FLASH_Lock+0x1c>)
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	4a04      	ldr	r2, [pc, #16]	@ (8001f40 <HAL_FLASH_Lock+0x1c>)
 8001f2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f32:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	40023c00 	.word	0x40023c00

08001f44 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001f50:	4b1a      	ldr	r3, [pc, #104]	@ (8001fbc <FLASH_WaitForLastOperation+0x78>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f56:	f7ff fe5f 	bl	8001c18 <HAL_GetTick>
 8001f5a:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001f5c:	e010      	b.n	8001f80 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d00c      	beq.n	8001f80 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d007      	beq.n	8001f7c <FLASH_WaitForLastOperation+0x38>
 8001f6c:	f7ff fe54 	bl	8001c18 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d201      	bcs.n	8001f80 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e019      	b.n	8001fb4 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001f80:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc0 <FLASH_WaitForLastOperation+0x7c>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1e8      	bne.n	8001f5e <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc0 <FLASH_WaitForLastOperation+0x7c>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d002      	beq.n	8001f9e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001f98:	4b09      	ldr	r3, [pc, #36]	@ (8001fc0 <FLASH_WaitForLastOperation+0x7c>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001f9e:	4b08      	ldr	r3, [pc, #32]	@ (8001fc0 <FLASH_WaitForLastOperation+0x7c>)
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001faa:	f000 f8a5 	bl	80020f8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0

}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	200001b0 	.word	0x200001b0
 8001fc0:	40023c00 	.word	0x40023c00

08001fc4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001fd0:	4b14      	ldr	r3, [pc, #80]	@ (8002024 <FLASH_Program_DoubleWord+0x60>)
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	4a13      	ldr	r2, [pc, #76]	@ (8002024 <FLASH_Program_DoubleWord+0x60>)
 8001fd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001fdc:	4b11      	ldr	r3, [pc, #68]	@ (8002024 <FLASH_Program_DoubleWord+0x60>)
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	4a10      	ldr	r2, [pc, #64]	@ (8002024 <FLASH_Program_DoubleWord+0x60>)
 8001fe2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001fe6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8002024 <FLASH_Program_DoubleWord+0x60>)
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	4a0d      	ldr	r2, [pc, #52]	@ (8002024 <FLASH_Program_DoubleWord+0x60>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001ffa:	f3bf 8f6f 	isb	sy
}
 8001ffe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8002000:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	f04f 0300 	mov.w	r3, #0
 800200c:	000a      	movs	r2, r1
 800200e:	2300      	movs	r3, #0
 8002010:	68f9      	ldr	r1, [r7, #12]
 8002012:	3104      	adds	r1, #4
 8002014:	4613      	mov	r3, r2
 8002016:	600b      	str	r3, [r1, #0]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	40023c00 	.word	0x40023c00

08002028 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002032:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <FLASH_Program_Word+0x40>)
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	4a0c      	ldr	r2, [pc, #48]	@ (8002068 <FLASH_Program_Word+0x40>)
 8002038:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800203c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800203e:	4b0a      	ldr	r3, [pc, #40]	@ (8002068 <FLASH_Program_Word+0x40>)
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	4a09      	ldr	r2, [pc, #36]	@ (8002068 <FLASH_Program_Word+0x40>)
 8002044:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002048:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800204a:	4b07      	ldr	r3, [pc, #28]	@ (8002068 <FLASH_Program_Word+0x40>)
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	4a06      	ldr	r2, [pc, #24]	@ (8002068 <FLASH_Program_Word+0x40>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	601a      	str	r2, [r3, #0]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	40023c00 	.word	0x40023c00

0800206c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002078:	4b0d      	ldr	r3, [pc, #52]	@ (80020b0 <FLASH_Program_HalfWord+0x44>)
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	4a0c      	ldr	r2, [pc, #48]	@ (80020b0 <FLASH_Program_HalfWord+0x44>)
 800207e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002082:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002084:	4b0a      	ldr	r3, [pc, #40]	@ (80020b0 <FLASH_Program_HalfWord+0x44>)
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	4a09      	ldr	r2, [pc, #36]	@ (80020b0 <FLASH_Program_HalfWord+0x44>)
 800208a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800208e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002090:	4b07      	ldr	r3, [pc, #28]	@ (80020b0 <FLASH_Program_HalfWord+0x44>)
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	4a06      	ldr	r2, [pc, #24]	@ (80020b0 <FLASH_Program_HalfWord+0x44>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	887a      	ldrh	r2, [r7, #2]
 80020a0:	801a      	strh	r2, [r3, #0]
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40023c00 	.word	0x40023c00

080020b4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80020c0:	4b0c      	ldr	r3, [pc, #48]	@ (80020f4 <FLASH_Program_Byte+0x40>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	4a0b      	ldr	r2, [pc, #44]	@ (80020f4 <FLASH_Program_Byte+0x40>)
 80020c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80020cc:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <FLASH_Program_Byte+0x40>)
 80020ce:	4a09      	ldr	r2, [pc, #36]	@ (80020f4 <FLASH_Program_Byte+0x40>)
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80020d4:	4b07      	ldr	r3, [pc, #28]	@ (80020f4 <FLASH_Program_Byte+0x40>)
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	4a06      	ldr	r2, [pc, #24]	@ (80020f4 <FLASH_Program_Byte+0x40>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	701a      	strb	r2, [r3, #0]
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40023c00 	.word	0x40023c00

080020f8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80020fc:	4b2f      	ldr	r3, [pc, #188]	@ (80021bc <FLASH_SetErrorCode+0xc4>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002108:	4b2d      	ldr	r3, [pc, #180]	@ (80021c0 <FLASH_SetErrorCode+0xc8>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	f043 0310 	orr.w	r3, r3, #16
 8002110:	4a2b      	ldr	r2, [pc, #172]	@ (80021c0 <FLASH_SetErrorCode+0xc8>)
 8002112:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002114:	4b29      	ldr	r3, [pc, #164]	@ (80021bc <FLASH_SetErrorCode+0xc4>)
 8002116:	2210      	movs	r2, #16
 8002118:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800211a:	4b28      	ldr	r3, [pc, #160]	@ (80021bc <FLASH_SetErrorCode+0xc4>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b00      	cmp	r3, #0
 8002124:	d008      	beq.n	8002138 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002126:	4b26      	ldr	r3, [pc, #152]	@ (80021c0 <FLASH_SetErrorCode+0xc8>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f043 0308 	orr.w	r3, r3, #8
 800212e:	4a24      	ldr	r2, [pc, #144]	@ (80021c0 <FLASH_SetErrorCode+0xc8>)
 8002130:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002132:	4b22      	ldr	r3, [pc, #136]	@ (80021bc <FLASH_SetErrorCode+0xc4>)
 8002134:	2220      	movs	r2, #32
 8002136:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002138:	4b20      	ldr	r3, [pc, #128]	@ (80021bc <FLASH_SetErrorCode+0xc4>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002144:	4b1e      	ldr	r3, [pc, #120]	@ (80021c0 <FLASH_SetErrorCode+0xc8>)
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	4a1c      	ldr	r2, [pc, #112]	@ (80021c0 <FLASH_SetErrorCode+0xc8>)
 800214e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002150:	4b1a      	ldr	r3, [pc, #104]	@ (80021bc <FLASH_SetErrorCode+0xc4>)
 8002152:	2240      	movs	r2, #64	@ 0x40
 8002154:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002156:	4b19      	ldr	r3, [pc, #100]	@ (80021bc <FLASH_SetErrorCode+0xc4>)
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800215e:	2b00      	cmp	r3, #0
 8002160:	d008      	beq.n	8002174 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002162:	4b17      	ldr	r3, [pc, #92]	@ (80021c0 <FLASH_SetErrorCode+0xc8>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f043 0302 	orr.w	r3, r3, #2
 800216a:	4a15      	ldr	r2, [pc, #84]	@ (80021c0 <FLASH_SetErrorCode+0xc8>)
 800216c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800216e:	4b13      	ldr	r3, [pc, #76]	@ (80021bc <FLASH_SetErrorCode+0xc4>)
 8002170:	2280      	movs	r2, #128	@ 0x80
 8002172:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002174:	4b11      	ldr	r3, [pc, #68]	@ (80021bc <FLASH_SetErrorCode+0xc4>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217c:	2b00      	cmp	r3, #0
 800217e:	d009      	beq.n	8002194 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002180:	4b0f      	ldr	r3, [pc, #60]	@ (80021c0 <FLASH_SetErrorCode+0xc8>)
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	4a0d      	ldr	r2, [pc, #52]	@ (80021c0 <FLASH_SetErrorCode+0xc8>)
 800218a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <FLASH_SetErrorCode+0xc4>)
 800218e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002192:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002194:	4b09      	ldr	r3, [pc, #36]	@ (80021bc <FLASH_SetErrorCode+0xc4>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80021a0:	4b07      	ldr	r3, [pc, #28]	@ (80021c0 <FLASH_SetErrorCode+0xc8>)
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	f043 0320 	orr.w	r3, r3, #32
 80021a8:	4a05      	ldr	r2, [pc, #20]	@ (80021c0 <FLASH_SetErrorCode+0xc8>)
 80021aa:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80021ac:	4b03      	ldr	r3, [pc, #12]	@ (80021bc <FLASH_SetErrorCode+0xc4>)
 80021ae:	2202      	movs	r2, #2
 80021b0:	60da      	str	r2, [r3, #12]
  }
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	40023c00 	.word	0x40023c00
 80021c0:	200001b0 	.word	0x200001b0

080021c4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80021d2:	4b31      	ldr	r3, [pc, #196]	@ (8002298 <HAL_FLASHEx_Erase+0xd4>)
 80021d4:	7e1b      	ldrb	r3, [r3, #24]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d101      	bne.n	80021de <HAL_FLASHEx_Erase+0x1a>
 80021da:	2302      	movs	r3, #2
 80021dc:	e058      	b.n	8002290 <HAL_FLASHEx_Erase+0xcc>
 80021de:	4b2e      	ldr	r3, [pc, #184]	@ (8002298 <HAL_FLASHEx_Erase+0xd4>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021e4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80021e8:	f7ff feac 	bl	8001f44 <FLASH_WaitForLastOperation>
 80021ec:	4603      	mov	r3, r0
 80021ee:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d148      	bne.n	8002288 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295
 80021fc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d115      	bne.n	8002232 <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	b2da      	uxtb	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4619      	mov	r1, r3
 8002212:	4610      	mov	r0, r2
 8002214:	f000 f844 	bl	80022a0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002218:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800221c:	f7ff fe92 	bl	8001f44 <FLASH_WaitForLastOperation>
 8002220:	4603      	mov	r3, r0
 8002222:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002224:	4b1d      	ldr	r3, [pc, #116]	@ (800229c <HAL_FLASHEx_Erase+0xd8>)
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	4a1c      	ldr	r2, [pc, #112]	@ (800229c <HAL_FLASHEx_Erase+0xd8>)
 800222a:	f023 0304 	bic.w	r3, r3, #4
 800222e:	6113      	str	r3, [r2, #16]
 8002230:	e028      	b.n	8002284 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	e01c      	b.n	8002274 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	4619      	mov	r1, r3
 8002242:	68b8      	ldr	r0, [r7, #8]
 8002244:	f000 f850 	bl	80022e8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002248:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800224c:	f7ff fe7a 	bl	8001f44 <FLASH_WaitForLastOperation>
 8002250:	4603      	mov	r3, r0
 8002252:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002254:	4b11      	ldr	r3, [pc, #68]	@ (800229c <HAL_FLASHEx_Erase+0xd8>)
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	4a10      	ldr	r2, [pc, #64]	@ (800229c <HAL_FLASHEx_Erase+0xd8>)
 800225a:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800225e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	601a      	str	r2, [r3, #0]
          break;
 800226c:	e00a      	b.n	8002284 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	3301      	adds	r3, #1
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4413      	add	r3, r2
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	429a      	cmp	r2, r3
 8002282:	d3da      	bcc.n	800223a <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002284:	f000 f878 	bl	8002378 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002288:	4b03      	ldr	r3, [pc, #12]	@ (8002298 <HAL_FLASHEx_Erase+0xd4>)
 800228a:	2200      	movs	r2, #0
 800228c:	761a      	strb	r2, [r3, #24]

  return status;
 800228e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	200001b0 	.word	0x200001b0
 800229c:	40023c00 	.word	0x40023c00

080022a0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	6039      	str	r1, [r7, #0]
 80022aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80022ac:	4b0d      	ldr	r3, [pc, #52]	@ (80022e4 <FLASH_MassErase+0x44>)
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	4a0c      	ldr	r2, [pc, #48]	@ (80022e4 <FLASH_MassErase+0x44>)
 80022b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80022b8:	4b0a      	ldr	r3, [pc, #40]	@ (80022e4 <FLASH_MassErase+0x44>)
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	4a09      	ldr	r2, [pc, #36]	@ (80022e4 <FLASH_MassErase+0x44>)
 80022be:	f043 0304 	orr.w	r3, r3, #4
 80022c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80022c4:	4b07      	ldr	r3, [pc, #28]	@ (80022e4 <FLASH_MassErase+0x44>)
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	021b      	lsls	r3, r3, #8
 80022cc:	4313      	orrs	r3, r2
 80022ce:	4a05      	ldr	r2, [pc, #20]	@ (80022e4 <FLASH_MassErase+0x44>)
 80022d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d4:	6113      	str	r3, [r2, #16]
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40023c00 	.word	0x40023c00

080022e8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d102      	bne.n	8002304 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	e010      	b.n	8002326 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d103      	bne.n	8002312 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800230a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	e009      	b.n	8002326 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d103      	bne.n	8002320 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002318:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	e002      	b.n	8002326 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002320:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002324:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002326:	4b13      	ldr	r3, [pc, #76]	@ (8002374 <FLASH_Erase_Sector+0x8c>)
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	4a12      	ldr	r2, [pc, #72]	@ (8002374 <FLASH_Erase_Sector+0x8c>)
 800232c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002330:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002332:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <FLASH_Erase_Sector+0x8c>)
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	490f      	ldr	r1, [pc, #60]	@ (8002374 <FLASH_Erase_Sector+0x8c>)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800233e:	4b0d      	ldr	r3, [pc, #52]	@ (8002374 <FLASH_Erase_Sector+0x8c>)
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	4a0c      	ldr	r2, [pc, #48]	@ (8002374 <FLASH_Erase_Sector+0x8c>)
 8002344:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002348:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800234a:	4b0a      	ldr	r3, [pc, #40]	@ (8002374 <FLASH_Erase_Sector+0x8c>)
 800234c:	691a      	ldr	r2, [r3, #16]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4313      	orrs	r3, r2
 8002354:	4a07      	ldr	r2, [pc, #28]	@ (8002374 <FLASH_Erase_Sector+0x8c>)
 8002356:	f043 0302 	orr.w	r3, r3, #2
 800235a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800235c:	4b05      	ldr	r3, [pc, #20]	@ (8002374 <FLASH_Erase_Sector+0x8c>)
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	4a04      	ldr	r2, [pc, #16]	@ (8002374 <FLASH_Erase_Sector+0x8c>)
 8002362:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002366:	6113      	str	r3, [r2, #16]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	40023c00 	.word	0x40023c00

08002378 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800237c:	4b20      	ldr	r3, [pc, #128]	@ (8002400 <FLASH_FlushCaches+0x88>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002384:	2b00      	cmp	r3, #0
 8002386:	d017      	beq.n	80023b8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002388:	4b1d      	ldr	r3, [pc, #116]	@ (8002400 <FLASH_FlushCaches+0x88>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a1c      	ldr	r2, [pc, #112]	@ (8002400 <FLASH_FlushCaches+0x88>)
 800238e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002392:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002394:	4b1a      	ldr	r3, [pc, #104]	@ (8002400 <FLASH_FlushCaches+0x88>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a19      	ldr	r2, [pc, #100]	@ (8002400 <FLASH_FlushCaches+0x88>)
 800239a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b17      	ldr	r3, [pc, #92]	@ (8002400 <FLASH_FlushCaches+0x88>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a16      	ldr	r2, [pc, #88]	@ (8002400 <FLASH_FlushCaches+0x88>)
 80023a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80023aa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023ac:	4b14      	ldr	r3, [pc, #80]	@ (8002400 <FLASH_FlushCaches+0x88>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a13      	ldr	r2, [pc, #76]	@ (8002400 <FLASH_FlushCaches+0x88>)
 80023b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023b6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80023b8:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <FLASH_FlushCaches+0x88>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d017      	beq.n	80023f4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80023c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002400 <FLASH_FlushCaches+0x88>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002400 <FLASH_FlushCaches+0x88>)
 80023ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80023ce:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80023d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <FLASH_FlushCaches+0x88>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002400 <FLASH_FlushCaches+0x88>)
 80023d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <FLASH_FlushCaches+0x88>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a07      	ldr	r2, [pc, #28]	@ (8002400 <FLASH_FlushCaches+0x88>)
 80023e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80023e6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <FLASH_FlushCaches+0x88>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a04      	ldr	r2, [pc, #16]	@ (8002400 <FLASH_FlushCaches+0x88>)
 80023ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023f2:	6013      	str	r3, [r2, #0]
  }
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40023c00 	.word	0x40023c00

08002404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	@ 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	e165      	b.n	80026ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002420:	2201      	movs	r2, #1
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	429a      	cmp	r2, r3
 800243a:	f040 8154 	bne.w	80026e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d005      	beq.n	8002456 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002452:	2b02      	cmp	r3, #2
 8002454:	d130      	bne.n	80024b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2203      	movs	r2, #3
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800248c:	2201      	movs	r2, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 0201 	and.w	r2, r3, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d017      	beq.n	80024f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	2203      	movs	r2, #3
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d123      	bne.n	8002548 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	08da      	lsrs	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3208      	adds	r2, #8
 8002508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	220f      	movs	r2, #15
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	08da      	lsrs	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3208      	adds	r2, #8
 8002542:	69b9      	ldr	r1, [r7, #24]
 8002544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0203 	and.w	r2, r3, #3
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80ae 	beq.w	80026e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	4b5d      	ldr	r3, [pc, #372]	@ (8002704 <HAL_GPIO_Init+0x300>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	4a5c      	ldr	r2, [pc, #368]	@ (8002704 <HAL_GPIO_Init+0x300>)
 8002594:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002598:	6453      	str	r3, [r2, #68]	@ 0x44
 800259a:	4b5a      	ldr	r3, [pc, #360]	@ (8002704 <HAL_GPIO_Init+0x300>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025a6:	4a58      	ldr	r2, [pc, #352]	@ (8002708 <HAL_GPIO_Init+0x304>)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	089b      	lsrs	r3, r3, #2
 80025ac:	3302      	adds	r3, #2
 80025ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	220f      	movs	r2, #15
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4f      	ldr	r2, [pc, #316]	@ (800270c <HAL_GPIO_Init+0x308>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d025      	beq.n	800261e <HAL_GPIO_Init+0x21a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002710 <HAL_GPIO_Init+0x30c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01f      	beq.n	800261a <HAL_GPIO_Init+0x216>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002714 <HAL_GPIO_Init+0x310>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d019      	beq.n	8002616 <HAL_GPIO_Init+0x212>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4c      	ldr	r2, [pc, #304]	@ (8002718 <HAL_GPIO_Init+0x314>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_GPIO_Init+0x20e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4b      	ldr	r2, [pc, #300]	@ (800271c <HAL_GPIO_Init+0x318>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_GPIO_Init+0x20a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002720 <HAL_GPIO_Init+0x31c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x206>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a49      	ldr	r2, [pc, #292]	@ (8002724 <HAL_GPIO_Init+0x320>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_GPIO_Init+0x202>
 8002602:	2306      	movs	r3, #6
 8002604:	e00c      	b.n	8002620 <HAL_GPIO_Init+0x21c>
 8002606:	2307      	movs	r3, #7
 8002608:	e00a      	b.n	8002620 <HAL_GPIO_Init+0x21c>
 800260a:	2305      	movs	r3, #5
 800260c:	e008      	b.n	8002620 <HAL_GPIO_Init+0x21c>
 800260e:	2304      	movs	r3, #4
 8002610:	e006      	b.n	8002620 <HAL_GPIO_Init+0x21c>
 8002612:	2303      	movs	r3, #3
 8002614:	e004      	b.n	8002620 <HAL_GPIO_Init+0x21c>
 8002616:	2302      	movs	r3, #2
 8002618:	e002      	b.n	8002620 <HAL_GPIO_Init+0x21c>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_GPIO_Init+0x21c>
 800261e:	2300      	movs	r3, #0
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	f002 0203 	and.w	r2, r2, #3
 8002626:	0092      	lsls	r2, r2, #2
 8002628:	4093      	lsls	r3, r2
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002630:	4935      	ldr	r1, [pc, #212]	@ (8002708 <HAL_GPIO_Init+0x304>)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	3302      	adds	r3, #2
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800263e:	4b3a      	ldr	r3, [pc, #232]	@ (8002728 <HAL_GPIO_Init+0x324>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002662:	4a31      	ldr	r2, [pc, #196]	@ (8002728 <HAL_GPIO_Init+0x324>)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002668:	4b2f      	ldr	r3, [pc, #188]	@ (8002728 <HAL_GPIO_Init+0x324>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800268c:	4a26      	ldr	r2, [pc, #152]	@ (8002728 <HAL_GPIO_Init+0x324>)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002692:	4b25      	ldr	r3, [pc, #148]	@ (8002728 <HAL_GPIO_Init+0x324>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002728 <HAL_GPIO_Init+0x324>)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002728 <HAL_GPIO_Init+0x324>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e0:	4a11      	ldr	r2, [pc, #68]	@ (8002728 <HAL_GPIO_Init+0x324>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3301      	adds	r3, #1
 80026ea:	61fb      	str	r3, [r7, #28]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2b0f      	cmp	r3, #15
 80026f0:	f67f ae96 	bls.w	8002420 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	3724      	adds	r7, #36	@ 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800
 8002708:	40013800 	.word	0x40013800
 800270c:	40020000 	.word	0x40020000
 8002710:	40020400 	.word	0x40020400
 8002714:	40020800 	.word	0x40020800
 8002718:	40020c00 	.word	0x40020c00
 800271c:	40021000 	.word	0x40021000
 8002720:	40021400 	.word	0x40021400
 8002724:	40021800 	.word	0x40021800
 8002728:	40013c00 	.word	0x40013c00

0800272c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	887b      	ldrh	r3, [r7, #2]
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002744:	2301      	movs	r3, #1
 8002746:	73fb      	strb	r3, [r7, #15]
 8002748:	e001      	b.n	800274e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800274e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	807b      	strh	r3, [r7, #2]
 8002768:	4613      	mov	r3, r2
 800276a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800276c:	787b      	ldrb	r3, [r7, #1]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002772:	887a      	ldrh	r2, [r7, #2]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002778:	e003      	b.n	8002782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800277a:	887b      	ldrh	r3, [r7, #2]
 800277c:	041a      	lsls	r2, r3, #16
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	619a      	str	r2, [r3, #24]
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
	...

08002790 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800279a:	4b08      	ldr	r3, [pc, #32]	@ (80027bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d006      	beq.n	80027b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027a6:	4a05      	ldr	r2, [pc, #20]	@ (80027bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027a8:	88fb      	ldrh	r3, [r7, #6]
 80027aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027ac:	88fb      	ldrh	r3, [r7, #6]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fd ff2c 	bl	800060c <HAL_GPIO_EXTI_Callback>
  }
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40013c00 	.word	0x40013c00

080027c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e12b      	b.n	8002a2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d106      	bne.n	80027ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7fe fe2c 	bl	8001444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2224      	movs	r2, #36	@ 0x24
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0201 	bic.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002812:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002822:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002824:	f000 fd5c 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 8002828:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4a81      	ldr	r2, [pc, #516]	@ (8002a34 <HAL_I2C_Init+0x274>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d807      	bhi.n	8002844 <HAL_I2C_Init+0x84>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4a80      	ldr	r2, [pc, #512]	@ (8002a38 <HAL_I2C_Init+0x278>)
 8002838:	4293      	cmp	r3, r2
 800283a:	bf94      	ite	ls
 800283c:	2301      	movls	r3, #1
 800283e:	2300      	movhi	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	e006      	b.n	8002852 <HAL_I2C_Init+0x92>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4a7d      	ldr	r2, [pc, #500]	@ (8002a3c <HAL_I2C_Init+0x27c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	bf94      	ite	ls
 800284c:	2301      	movls	r3, #1
 800284e:	2300      	movhi	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e0e7      	b.n	8002a2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4a78      	ldr	r2, [pc, #480]	@ (8002a40 <HAL_I2C_Init+0x280>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	0c9b      	lsrs	r3, r3, #18
 8002864:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	430a      	orrs	r2, r1
 8002878:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a6a      	ldr	r2, [pc, #424]	@ (8002a34 <HAL_I2C_Init+0x274>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d802      	bhi.n	8002894 <HAL_I2C_Init+0xd4>
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	3301      	adds	r3, #1
 8002892:	e009      	b.n	80028a8 <HAL_I2C_Init+0xe8>
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	4a69      	ldr	r2, [pc, #420]	@ (8002a44 <HAL_I2C_Init+0x284>)
 80028a0:	fba2 2303 	umull	r2, r3, r2, r3
 80028a4:	099b      	lsrs	r3, r3, #6
 80028a6:	3301      	adds	r3, #1
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	430b      	orrs	r3, r1
 80028ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	495c      	ldr	r1, [pc, #368]	@ (8002a34 <HAL_I2C_Init+0x274>)
 80028c4:	428b      	cmp	r3, r1
 80028c6:	d819      	bhi.n	80028fc <HAL_I2C_Init+0x13c>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	1e59      	subs	r1, r3, #1
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80028d6:	1c59      	adds	r1, r3, #1
 80028d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028dc:	400b      	ands	r3, r1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <HAL_I2C_Init+0x138>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1e59      	subs	r1, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80028f0:	3301      	adds	r3, #1
 80028f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f6:	e051      	b.n	800299c <HAL_I2C_Init+0x1dc>
 80028f8:	2304      	movs	r3, #4
 80028fa:	e04f      	b.n	800299c <HAL_I2C_Init+0x1dc>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d111      	bne.n	8002928 <HAL_I2C_Init+0x168>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1e58      	subs	r0, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	440b      	add	r3, r1
 8002912:	fbb0 f3f3 	udiv	r3, r0, r3
 8002916:	3301      	adds	r3, #1
 8002918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800291c:	2b00      	cmp	r3, #0
 800291e:	bf0c      	ite	eq
 8002920:	2301      	moveq	r3, #1
 8002922:	2300      	movne	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	e012      	b.n	800294e <HAL_I2C_Init+0x18e>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	1e58      	subs	r0, r3, #1
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6859      	ldr	r1, [r3, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	0099      	lsls	r1, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	fbb0 f3f3 	udiv	r3, r0, r3
 800293e:	3301      	adds	r3, #1
 8002940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf0c      	ite	eq
 8002948:	2301      	moveq	r3, #1
 800294a:	2300      	movne	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_I2C_Init+0x196>
 8002952:	2301      	movs	r3, #1
 8002954:	e022      	b.n	800299c <HAL_I2C_Init+0x1dc>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10e      	bne.n	800297c <HAL_I2C_Init+0x1bc>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1e58      	subs	r0, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6859      	ldr	r1, [r3, #4]
 8002966:	460b      	mov	r3, r1
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	440b      	add	r3, r1
 800296c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002970:	3301      	adds	r3, #1
 8002972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800297a:	e00f      	b.n	800299c <HAL_I2C_Init+0x1dc>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1e58      	subs	r0, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6859      	ldr	r1, [r3, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	0099      	lsls	r1, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002992:	3301      	adds	r3, #1
 8002994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002998:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	6809      	ldr	r1, [r1, #0]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69da      	ldr	r2, [r3, #28]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6911      	ldr	r1, [r2, #16]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68d2      	ldr	r2, [r2, #12]
 80029d6:	4311      	orrs	r1, r2
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	430b      	orrs	r3, r1
 80029de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	000186a0 	.word	0x000186a0
 8002a38:	001e847f 	.word	0x001e847f
 8002a3c:	003d08ff 	.word	0x003d08ff
 8002a40:	431bde83 	.word	0x431bde83
 8002a44:	10624dd3 	.word	0x10624dd3

08002a48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	461a      	mov	r2, r3
 8002a54:	460b      	mov	r3, r1
 8002a56:	817b      	strh	r3, [r7, #10]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a5c:	f7ff f8dc 	bl	8001c18 <HAL_GetTick>
 8002a60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b20      	cmp	r3, #32
 8002a6c:	f040 80e0 	bne.w	8002c30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	2319      	movs	r3, #25
 8002a76:	2201      	movs	r2, #1
 8002a78:	4970      	ldr	r1, [pc, #448]	@ (8002c3c <HAL_I2C_Master_Transmit+0x1f4>)
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f964 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a86:	2302      	movs	r3, #2
 8002a88:	e0d3      	b.n	8002c32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_I2C_Master_Transmit+0x50>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e0cc      	b.n	8002c32 <HAL_I2C_Master_Transmit+0x1ea>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d007      	beq.n	8002abe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0201 	orr.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002acc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2221      	movs	r2, #33	@ 0x21
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2210      	movs	r2, #16
 8002ada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	893a      	ldrh	r2, [r7, #8]
 8002aee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4a50      	ldr	r2, [pc, #320]	@ (8002c40 <HAL_I2C_Master_Transmit+0x1f8>)
 8002afe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b00:	8979      	ldrh	r1, [r7, #10]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	6a3a      	ldr	r2, [r7, #32]
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f89c 	bl	8002c44 <I2C_MasterRequestWrite>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e08d      	b.n	8002c32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b2c:	e066      	b.n	8002bfc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	6a39      	ldr	r1, [r7, #32]
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 fa22 	bl	8002f7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00d      	beq.n	8002b5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d107      	bne.n	8002b56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e06b      	b.n	8002c32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5e:	781a      	ldrb	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d11b      	bne.n	8002bd0 <HAL_I2C_Master_Transmit+0x188>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d017      	beq.n	8002bd0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba4:	781a      	ldrb	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	6a39      	ldr	r1, [r7, #32]
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 fa19 	bl	800300c <I2C_WaitOnBTFFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00d      	beq.n	8002bfc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d107      	bne.n	8002bf8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bf6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e01a      	b.n	8002c32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d194      	bne.n	8002b2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e000      	b.n	8002c32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
  }
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	00100002 	.word	0x00100002
 8002c40:	ffff0000 	.word	0xffff0000

08002c44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	607a      	str	r2, [r7, #4]
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	460b      	mov	r3, r1
 8002c52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d006      	beq.n	8002c6e <I2C_MasterRequestWrite+0x2a>
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d003      	beq.n	8002c6e <I2C_MasterRequestWrite+0x2a>
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c6c:	d108      	bne.n	8002c80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	e00b      	b.n	8002c98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c84:	2b12      	cmp	r3, #18
 8002c86:	d107      	bne.n	8002c98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f84f 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00d      	beq.n	8002ccc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cbe:	d103      	bne.n	8002cc8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e035      	b.n	8002d38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cd4:	d108      	bne.n	8002ce8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cd6:	897b      	ldrh	r3, [r7, #10]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ce4:	611a      	str	r2, [r3, #16]
 8002ce6:	e01b      	b.n	8002d20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ce8:	897b      	ldrh	r3, [r7, #10]
 8002cea:	11db      	asrs	r3, r3, #7
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	f003 0306 	and.w	r3, r3, #6
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	f063 030f 	orn	r3, r3, #15
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	490e      	ldr	r1, [pc, #56]	@ (8002d40 <I2C_MasterRequestWrite+0xfc>)
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f898 	bl	8002e3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e010      	b.n	8002d38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d16:	897b      	ldrh	r3, [r7, #10]
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	4907      	ldr	r1, [pc, #28]	@ (8002d44 <I2C_MasterRequestWrite+0x100>)
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 f888 	bl	8002e3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	00010008 	.word	0x00010008
 8002d44:	00010002 	.word	0x00010002

08002d48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	4613      	mov	r3, r2
 8002d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d58:	e048      	b.n	8002dec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d60:	d044      	beq.n	8002dec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d62:	f7fe ff59 	bl	8001c18 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d302      	bcc.n	8002d78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d139      	bne.n	8002dec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	0c1b      	lsrs	r3, r3, #16
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d10d      	bne.n	8002d9e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	43da      	mvns	r2, r3
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf0c      	ite	eq
 8002d94:	2301      	moveq	r3, #1
 8002d96:	2300      	movne	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	e00c      	b.n	8002db8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	43da      	mvns	r2, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	4013      	ands	r3, r2
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bf0c      	ite	eq
 8002db0:	2301      	moveq	r3, #1
 8002db2:	2300      	movne	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	461a      	mov	r2, r3
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d116      	bne.n	8002dec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd8:	f043 0220 	orr.w	r2, r3, #32
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e023      	b.n	8002e34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	0c1b      	lsrs	r3, r3, #16
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d10d      	bne.n	8002e12 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	43da      	mvns	r2, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	4013      	ands	r3, r2
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	461a      	mov	r2, r3
 8002e10:	e00c      	b.n	8002e2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	43da      	mvns	r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d093      	beq.n	8002d5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e4a:	e071      	b.n	8002f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e5a:	d123      	bne.n	8002ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	f043 0204 	orr.w	r2, r3, #4
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e067      	b.n	8002f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eaa:	d041      	beq.n	8002f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eac:	f7fe feb4 	bl	8001c18 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d302      	bcc.n	8002ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d136      	bne.n	8002f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	0c1b      	lsrs	r3, r3, #16
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d10c      	bne.n	8002ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	43da      	mvns	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	bf14      	ite	ne
 8002ede:	2301      	movne	r3, #1
 8002ee0:	2300      	moveq	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	e00b      	b.n	8002efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	43da      	mvns	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf14      	ite	ne
 8002ef8:	2301      	movne	r3, #1
 8002efa:	2300      	moveq	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d016      	beq.n	8002f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1c:	f043 0220 	orr.w	r2, r3, #32
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e021      	b.n	8002f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	0c1b      	lsrs	r3, r3, #16
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d10c      	bne.n	8002f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	43da      	mvns	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	4013      	ands	r3, r2
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	bf14      	ite	ne
 8002f4c:	2301      	movne	r3, #1
 8002f4e:	2300      	moveq	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	e00b      	b.n	8002f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	43da      	mvns	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	bf14      	ite	ne
 8002f66:	2301      	movne	r3, #1
 8002f68:	2300      	moveq	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f47f af6d 	bne.w	8002e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f88:	e034      	b.n	8002ff4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f886 	bl	800309c <I2C_IsAcknowledgeFailed>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e034      	b.n	8003004 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa0:	d028      	beq.n	8002ff4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa2:	f7fe fe39 	bl	8001c18 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d302      	bcc.n	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d11d      	bne.n	8002ff4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc2:	2b80      	cmp	r3, #128	@ 0x80
 8002fc4:	d016      	beq.n	8002ff4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe0:	f043 0220 	orr.w	r2, r3, #32
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e007      	b.n	8003004 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ffe:	2b80      	cmp	r3, #128	@ 0x80
 8003000:	d1c3      	bne.n	8002f8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003018:	e034      	b.n	8003084 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f83e 	bl	800309c <I2C_IsAcknowledgeFailed>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e034      	b.n	8003094 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003030:	d028      	beq.n	8003084 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003032:	f7fe fdf1 	bl	8001c18 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	429a      	cmp	r2, r3
 8003040:	d302      	bcc.n	8003048 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d11d      	bne.n	8003084 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b04      	cmp	r3, #4
 8003054:	d016      	beq.n	8003084 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003070:	f043 0220 	orr.w	r2, r3, #32
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e007      	b.n	8003094 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b04      	cmp	r3, #4
 8003090:	d1c3      	bne.n	800301a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030b2:	d11b      	bne.n	80030ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d8:	f043 0204 	orr.w	r2, r3, #4
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e000      	b.n	80030ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
	...

080030fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0cc      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003110:	4b68      	ldr	r3, [pc, #416]	@ (80032b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d90c      	bls.n	8003138 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311e:	4b65      	ldr	r3, [pc, #404]	@ (80032b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003126:	4b63      	ldr	r3, [pc, #396]	@ (80032b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d001      	beq.n	8003138 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0b8      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d020      	beq.n	8003186 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003150:	4b59      	ldr	r3, [pc, #356]	@ (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	4a58      	ldr	r2, [pc, #352]	@ (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800315a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003168:	4b53      	ldr	r3, [pc, #332]	@ (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	4a52      	ldr	r2, [pc, #328]	@ (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003172:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003174:	4b50      	ldr	r3, [pc, #320]	@ (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	494d      	ldr	r1, [pc, #308]	@ (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d044      	beq.n	800321c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d107      	bne.n	80031aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319a:	4b47      	ldr	r3, [pc, #284]	@ (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d119      	bne.n	80031da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e07f      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d003      	beq.n	80031ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d107      	bne.n	80031ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ba:	4b3f      	ldr	r3, [pc, #252]	@ (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e06f      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ca:	4b3b      	ldr	r3, [pc, #236]	@ (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e067      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031da:	4b37      	ldr	r3, [pc, #220]	@ (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f023 0203 	bic.w	r2, r3, #3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	4934      	ldr	r1, [pc, #208]	@ (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031ec:	f7fe fd14 	bl	8001c18 <HAL_GetTick>
 80031f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	e00a      	b.n	800320a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f4:	f7fe fd10 	bl	8001c18 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e04f      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320a:	4b2b      	ldr	r3, [pc, #172]	@ (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 020c 	and.w	r2, r3, #12
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	429a      	cmp	r2, r3
 800321a:	d1eb      	bne.n	80031f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800321c:	4b25      	ldr	r3, [pc, #148]	@ (80032b4 <HAL_RCC_ClockConfig+0x1b8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d20c      	bcs.n	8003244 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b22      	ldr	r3, [pc, #136]	@ (80032b4 <HAL_RCC_ClockConfig+0x1b8>)
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003232:	4b20      	ldr	r3, [pc, #128]	@ (80032b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d001      	beq.n	8003244 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e032      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d008      	beq.n	8003262 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003250:	4b19      	ldr	r3, [pc, #100]	@ (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	4916      	ldr	r1, [pc, #88]	@ (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d009      	beq.n	8003282 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800326e:	4b12      	ldr	r3, [pc, #72]	@ (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	490e      	ldr	r1, [pc, #56]	@ (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003282:	f000 f887 	bl	8003394 <HAL_RCC_GetSysClockFreq>
 8003286:	4602      	mov	r2, r0
 8003288:	4b0b      	ldr	r3, [pc, #44]	@ (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	490a      	ldr	r1, [pc, #40]	@ (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 8003294:	5ccb      	ldrb	r3, [r1, r3]
 8003296:	fa22 f303 	lsr.w	r3, r2, r3
 800329a:	4a09      	ldr	r2, [pc, #36]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 800329c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800329e:	4b09      	ldr	r3, [pc, #36]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe f95e 	bl	8001564 <HAL_InitTick>

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40023c00 	.word	0x40023c00
 80032b8:	40023800 	.word	0x40023800
 80032bc:	08008fa4 	.word	0x08008fa4
 80032c0:	20000000 	.word	0x20000000
 80032c4:	20000014 	.word	0x20000014

080032c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032cc:	4b03      	ldr	r3, [pc, #12]	@ (80032dc <HAL_RCC_GetHCLKFreq+0x14>)
 80032ce:	681b      	ldr	r3, [r3, #0]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20000000 	.word	0x20000000

080032e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032e4:	f7ff fff0 	bl	80032c8 <HAL_RCC_GetHCLKFreq>
 80032e8:	4602      	mov	r2, r0
 80032ea:	4b05      	ldr	r3, [pc, #20]	@ (8003300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	0a9b      	lsrs	r3, r3, #10
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	4903      	ldr	r1, [pc, #12]	@ (8003304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032f6:	5ccb      	ldrb	r3, [r1, r3]
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40023800 	.word	0x40023800
 8003304:	08008fb4 	.word	0x08008fb4

08003308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800330c:	f7ff ffdc 	bl	80032c8 <HAL_RCC_GetHCLKFreq>
 8003310:	4602      	mov	r2, r0
 8003312:	4b05      	ldr	r3, [pc, #20]	@ (8003328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	0b5b      	lsrs	r3, r3, #13
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	4903      	ldr	r1, [pc, #12]	@ (800332c <HAL_RCC_GetPCLK2Freq+0x24>)
 800331e:	5ccb      	ldrb	r3, [r1, r3]
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003324:	4618      	mov	r0, r3
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40023800 	.word	0x40023800
 800332c:	08008fb4 	.word	0x08008fb4

08003330 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	220f      	movs	r2, #15
 800333e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003340:	4b12      	ldr	r3, [pc, #72]	@ (800338c <HAL_RCC_GetClockConfig+0x5c>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0203 	and.w	r2, r3, #3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800334c:	4b0f      	ldr	r3, [pc, #60]	@ (800338c <HAL_RCC_GetClockConfig+0x5c>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003358:	4b0c      	ldr	r3, [pc, #48]	@ (800338c <HAL_RCC_GetClockConfig+0x5c>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003364:	4b09      	ldr	r3, [pc, #36]	@ (800338c <HAL_RCC_GetClockConfig+0x5c>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	08db      	lsrs	r3, r3, #3
 800336a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003372:	4b07      	ldr	r3, [pc, #28]	@ (8003390 <HAL_RCC_GetClockConfig+0x60>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 020f 	and.w	r2, r3, #15
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	601a      	str	r2, [r3, #0]
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40023800 	.word	0x40023800
 8003390:	40023c00 	.word	0x40023c00

08003394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003398:	b0ae      	sub	sp, #184	@ 0xb8
 800339a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033ba:	4bcb      	ldr	r3, [pc, #812]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	2b0c      	cmp	r3, #12
 80033c4:	f200 8206 	bhi.w	80037d4 <HAL_RCC_GetSysClockFreq+0x440>
 80033c8:	a201      	add	r2, pc, #4	@ (adr r2, 80033d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80033ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ce:	bf00      	nop
 80033d0:	08003405 	.word	0x08003405
 80033d4:	080037d5 	.word	0x080037d5
 80033d8:	080037d5 	.word	0x080037d5
 80033dc:	080037d5 	.word	0x080037d5
 80033e0:	0800340d 	.word	0x0800340d
 80033e4:	080037d5 	.word	0x080037d5
 80033e8:	080037d5 	.word	0x080037d5
 80033ec:	080037d5 	.word	0x080037d5
 80033f0:	08003415 	.word	0x08003415
 80033f4:	080037d5 	.word	0x080037d5
 80033f8:	080037d5 	.word	0x080037d5
 80033fc:	080037d5 	.word	0x080037d5
 8003400:	08003605 	.word	0x08003605
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003404:	4bb9      	ldr	r3, [pc, #740]	@ (80036ec <HAL_RCC_GetSysClockFreq+0x358>)
 8003406:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800340a:	e1e7      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800340c:	4bb8      	ldr	r3, [pc, #736]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800340e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003412:	e1e3      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003414:	4bb4      	ldr	r3, [pc, #720]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800341c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003420:	4bb1      	ldr	r3, [pc, #708]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d071      	beq.n	8003510 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800342c:	4bae      	ldr	r3, [pc, #696]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	099b      	lsrs	r3, r3, #6
 8003432:	2200      	movs	r2, #0
 8003434:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003438:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800343c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003444:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003448:	2300      	movs	r3, #0
 800344a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800344e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003452:	4622      	mov	r2, r4
 8003454:	462b      	mov	r3, r5
 8003456:	f04f 0000 	mov.w	r0, #0
 800345a:	f04f 0100 	mov.w	r1, #0
 800345e:	0159      	lsls	r1, r3, #5
 8003460:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003464:	0150      	lsls	r0, r2, #5
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4621      	mov	r1, r4
 800346c:	1a51      	subs	r1, r2, r1
 800346e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003470:	4629      	mov	r1, r5
 8003472:	eb63 0301 	sbc.w	r3, r3, r1
 8003476:	647b      	str	r3, [r7, #68]	@ 0x44
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003484:	4649      	mov	r1, r9
 8003486:	018b      	lsls	r3, r1, #6
 8003488:	4641      	mov	r1, r8
 800348a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800348e:	4641      	mov	r1, r8
 8003490:	018a      	lsls	r2, r1, #6
 8003492:	4641      	mov	r1, r8
 8003494:	1a51      	subs	r1, r2, r1
 8003496:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003498:	4649      	mov	r1, r9
 800349a:	eb63 0301 	sbc.w	r3, r3, r1
 800349e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80034ac:	4649      	mov	r1, r9
 80034ae:	00cb      	lsls	r3, r1, #3
 80034b0:	4641      	mov	r1, r8
 80034b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034b6:	4641      	mov	r1, r8
 80034b8:	00ca      	lsls	r2, r1, #3
 80034ba:	4610      	mov	r0, r2
 80034bc:	4619      	mov	r1, r3
 80034be:	4603      	mov	r3, r0
 80034c0:	4622      	mov	r2, r4
 80034c2:	189b      	adds	r3, r3, r2
 80034c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80034c6:	462b      	mov	r3, r5
 80034c8:	460a      	mov	r2, r1
 80034ca:	eb42 0303 	adc.w	r3, r2, r3
 80034ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80034dc:	4629      	mov	r1, r5
 80034de:	024b      	lsls	r3, r1, #9
 80034e0:	4621      	mov	r1, r4
 80034e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034e6:	4621      	mov	r1, r4
 80034e8:	024a      	lsls	r2, r1, #9
 80034ea:	4610      	mov	r0, r2
 80034ec:	4619      	mov	r1, r3
 80034ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034f2:	2200      	movs	r2, #0
 80034f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003500:	f7fc feee 	bl	80002e0 <__aeabi_uldivmod>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4613      	mov	r3, r2
 800350a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800350e:	e067      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003510:	4b75      	ldr	r3, [pc, #468]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	099b      	lsrs	r3, r3, #6
 8003516:	2200      	movs	r2, #0
 8003518:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800351c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003520:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003528:	67bb      	str	r3, [r7, #120]	@ 0x78
 800352a:	2300      	movs	r3, #0
 800352c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800352e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003532:	4622      	mov	r2, r4
 8003534:	462b      	mov	r3, r5
 8003536:	f04f 0000 	mov.w	r0, #0
 800353a:	f04f 0100 	mov.w	r1, #0
 800353e:	0159      	lsls	r1, r3, #5
 8003540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003544:	0150      	lsls	r0, r2, #5
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4621      	mov	r1, r4
 800354c:	1a51      	subs	r1, r2, r1
 800354e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003550:	4629      	mov	r1, r5
 8003552:	eb63 0301 	sbc.w	r3, r3, r1
 8003556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003564:	4649      	mov	r1, r9
 8003566:	018b      	lsls	r3, r1, #6
 8003568:	4641      	mov	r1, r8
 800356a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800356e:	4641      	mov	r1, r8
 8003570:	018a      	lsls	r2, r1, #6
 8003572:	4641      	mov	r1, r8
 8003574:	ebb2 0a01 	subs.w	sl, r2, r1
 8003578:	4649      	mov	r1, r9
 800357a:	eb63 0b01 	sbc.w	fp, r3, r1
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800358a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800358e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003592:	4692      	mov	sl, r2
 8003594:	469b      	mov	fp, r3
 8003596:	4623      	mov	r3, r4
 8003598:	eb1a 0303 	adds.w	r3, sl, r3
 800359c:	623b      	str	r3, [r7, #32]
 800359e:	462b      	mov	r3, r5
 80035a0:	eb4b 0303 	adc.w	r3, fp, r3
 80035a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80035b2:	4629      	mov	r1, r5
 80035b4:	028b      	lsls	r3, r1, #10
 80035b6:	4621      	mov	r1, r4
 80035b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035bc:	4621      	mov	r1, r4
 80035be:	028a      	lsls	r2, r1, #10
 80035c0:	4610      	mov	r0, r2
 80035c2:	4619      	mov	r1, r3
 80035c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035c8:	2200      	movs	r2, #0
 80035ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80035cc:	677a      	str	r2, [r7, #116]	@ 0x74
 80035ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80035d2:	f7fc fe85 	bl	80002e0 <__aeabi_uldivmod>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4613      	mov	r3, r2
 80035dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80035e0:	4b41      	ldr	r3, [pc, #260]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	0c1b      	lsrs	r3, r3, #16
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	3301      	adds	r3, #1
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80035f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003602:	e0eb      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003604:	4b38      	ldr	r3, [pc, #224]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800360c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003610:	4b35      	ldr	r3, [pc, #212]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d06b      	beq.n	80036f4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800361c:	4b32      	ldr	r3, [pc, #200]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	099b      	lsrs	r3, r3, #6
 8003622:	2200      	movs	r2, #0
 8003624:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003626:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003628:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800362a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800362e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003630:	2300      	movs	r3, #0
 8003632:	667b      	str	r3, [r7, #100]	@ 0x64
 8003634:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003638:	4622      	mov	r2, r4
 800363a:	462b      	mov	r3, r5
 800363c:	f04f 0000 	mov.w	r0, #0
 8003640:	f04f 0100 	mov.w	r1, #0
 8003644:	0159      	lsls	r1, r3, #5
 8003646:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800364a:	0150      	lsls	r0, r2, #5
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4621      	mov	r1, r4
 8003652:	1a51      	subs	r1, r2, r1
 8003654:	61b9      	str	r1, [r7, #24]
 8003656:	4629      	mov	r1, r5
 8003658:	eb63 0301 	sbc.w	r3, r3, r1
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800366a:	4659      	mov	r1, fp
 800366c:	018b      	lsls	r3, r1, #6
 800366e:	4651      	mov	r1, sl
 8003670:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003674:	4651      	mov	r1, sl
 8003676:	018a      	lsls	r2, r1, #6
 8003678:	4651      	mov	r1, sl
 800367a:	ebb2 0801 	subs.w	r8, r2, r1
 800367e:	4659      	mov	r1, fp
 8003680:	eb63 0901 	sbc.w	r9, r3, r1
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003690:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003694:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003698:	4690      	mov	r8, r2
 800369a:	4699      	mov	r9, r3
 800369c:	4623      	mov	r3, r4
 800369e:	eb18 0303 	adds.w	r3, r8, r3
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	462b      	mov	r3, r5
 80036a6:	eb49 0303 	adc.w	r3, r9, r3
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80036b8:	4629      	mov	r1, r5
 80036ba:	024b      	lsls	r3, r1, #9
 80036bc:	4621      	mov	r1, r4
 80036be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036c2:	4621      	mov	r1, r4
 80036c4:	024a      	lsls	r2, r1, #9
 80036c6:	4610      	mov	r0, r2
 80036c8:	4619      	mov	r1, r3
 80036ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036ce:	2200      	movs	r2, #0
 80036d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036d2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80036d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80036d8:	f7fc fe02 	bl	80002e0 <__aeabi_uldivmod>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4613      	mov	r3, r2
 80036e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036e6:	e065      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x420>
 80036e8:	40023800 	.word	0x40023800
 80036ec:	00f42400 	.word	0x00f42400
 80036f0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036f4:	4b3d      	ldr	r3, [pc, #244]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x458>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	099b      	lsrs	r3, r3, #6
 80036fa:	2200      	movs	r2, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	4611      	mov	r1, r2
 8003700:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003704:	653b      	str	r3, [r7, #80]	@ 0x50
 8003706:	2300      	movs	r3, #0
 8003708:	657b      	str	r3, [r7, #84]	@ 0x54
 800370a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800370e:	4642      	mov	r2, r8
 8003710:	464b      	mov	r3, r9
 8003712:	f04f 0000 	mov.w	r0, #0
 8003716:	f04f 0100 	mov.w	r1, #0
 800371a:	0159      	lsls	r1, r3, #5
 800371c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003720:	0150      	lsls	r0, r2, #5
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4641      	mov	r1, r8
 8003728:	1a51      	subs	r1, r2, r1
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	4649      	mov	r1, r9
 800372e:	eb63 0301 	sbc.w	r3, r3, r1
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003740:	4659      	mov	r1, fp
 8003742:	018b      	lsls	r3, r1, #6
 8003744:	4651      	mov	r1, sl
 8003746:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800374a:	4651      	mov	r1, sl
 800374c:	018a      	lsls	r2, r1, #6
 800374e:	4651      	mov	r1, sl
 8003750:	1a54      	subs	r4, r2, r1
 8003752:	4659      	mov	r1, fp
 8003754:	eb63 0501 	sbc.w	r5, r3, r1
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	00eb      	lsls	r3, r5, #3
 8003762:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003766:	00e2      	lsls	r2, r4, #3
 8003768:	4614      	mov	r4, r2
 800376a:	461d      	mov	r5, r3
 800376c:	4643      	mov	r3, r8
 800376e:	18e3      	adds	r3, r4, r3
 8003770:	603b      	str	r3, [r7, #0]
 8003772:	464b      	mov	r3, r9
 8003774:	eb45 0303 	adc.w	r3, r5, r3
 8003778:	607b      	str	r3, [r7, #4]
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003786:	4629      	mov	r1, r5
 8003788:	028b      	lsls	r3, r1, #10
 800378a:	4621      	mov	r1, r4
 800378c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003790:	4621      	mov	r1, r4
 8003792:	028a      	lsls	r2, r1, #10
 8003794:	4610      	mov	r0, r2
 8003796:	4619      	mov	r1, r3
 8003798:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800379c:	2200      	movs	r2, #0
 800379e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037a0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80037a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037a6:	f7fc fd9b 	bl	80002e0 <__aeabi_uldivmod>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4613      	mov	r3, r2
 80037b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80037b4:	4b0d      	ldr	r3, [pc, #52]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x458>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	0f1b      	lsrs	r3, r3, #28
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80037c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80037ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037d2:	e003      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037d4:	4b06      	ldr	r3, [pc, #24]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80037d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	37b8      	adds	r7, #184	@ 0xb8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ea:	bf00      	nop
 80037ec:	40023800 	.word	0x40023800
 80037f0:	00f42400 	.word	0x00f42400

080037f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e28d      	b.n	8003d22 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 8083 	beq.w	800391a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003814:	4b94      	ldr	r3, [pc, #592]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 030c 	and.w	r3, r3, #12
 800381c:	2b04      	cmp	r3, #4
 800381e:	d019      	beq.n	8003854 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003820:	4b91      	ldr	r3, [pc, #580]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 030c 	and.w	r3, r3, #12
        || \
 8003828:	2b08      	cmp	r3, #8
 800382a:	d106      	bne.n	800383a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800382c:	4b8e      	ldr	r3, [pc, #568]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003834:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003838:	d00c      	beq.n	8003854 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800383a:	4b8b      	ldr	r3, [pc, #556]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003842:	2b0c      	cmp	r3, #12
 8003844:	d112      	bne.n	800386c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003846:	4b88      	ldr	r3, [pc, #544]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800384e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003852:	d10b      	bne.n	800386c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003854:	4b84      	ldr	r3, [pc, #528]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d05b      	beq.n	8003918 <HAL_RCC_OscConfig+0x124>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d157      	bne.n	8003918 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e25a      	b.n	8003d22 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003874:	d106      	bne.n	8003884 <HAL_RCC_OscConfig+0x90>
 8003876:	4b7c      	ldr	r3, [pc, #496]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a7b      	ldr	r2, [pc, #492]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 800387c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	e01d      	b.n	80038c0 <HAL_RCC_OscConfig+0xcc>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800388c:	d10c      	bne.n	80038a8 <HAL_RCC_OscConfig+0xb4>
 800388e:	4b76      	ldr	r3, [pc, #472]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a75      	ldr	r2, [pc, #468]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 8003894:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	4b73      	ldr	r3, [pc, #460]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a72      	ldr	r2, [pc, #456]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 80038a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	e00b      	b.n	80038c0 <HAL_RCC_OscConfig+0xcc>
 80038a8:	4b6f      	ldr	r3, [pc, #444]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a6e      	ldr	r2, [pc, #440]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 80038ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	4b6c      	ldr	r3, [pc, #432]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a6b      	ldr	r2, [pc, #428]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 80038ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d013      	beq.n	80038f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fe f9a6 	bl	8001c18 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038d0:	f7fe f9a2 	bl	8001c18 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b64      	cmp	r3, #100	@ 0x64
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e21f      	b.n	8003d22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e2:	4b61      	ldr	r3, [pc, #388]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCC_OscConfig+0xdc>
 80038ee:	e014      	b.n	800391a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f0:	f7fe f992 	bl	8001c18 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f8:	f7fe f98e 	bl	8001c18 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b64      	cmp	r3, #100	@ 0x64
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e20b      	b.n	8003d22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390a:	4b57      	ldr	r3, [pc, #348]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0x104>
 8003916:	e000      	b.n	800391a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d06f      	beq.n	8003a06 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003926:	4b50      	ldr	r3, [pc, #320]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b00      	cmp	r3, #0
 8003930:	d017      	beq.n	8003962 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003932:	4b4d      	ldr	r3, [pc, #308]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 030c 	and.w	r3, r3, #12
        || \
 800393a:	2b08      	cmp	r3, #8
 800393c:	d105      	bne.n	800394a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800393e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00b      	beq.n	8003962 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800394a:	4b47      	ldr	r3, [pc, #284]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003952:	2b0c      	cmp	r3, #12
 8003954:	d11c      	bne.n	8003990 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003956:	4b44      	ldr	r3, [pc, #272]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d116      	bne.n	8003990 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003962:	4b41      	ldr	r3, [pc, #260]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_RCC_OscConfig+0x186>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d001      	beq.n	800397a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e1d3      	b.n	8003d22 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4937      	ldr	r1, [pc, #220]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800398e:	e03a      	b.n	8003a06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d020      	beq.n	80039da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003998:	4b34      	ldr	r3, [pc, #208]	@ (8003a6c <HAL_RCC_OscConfig+0x278>)
 800399a:	2201      	movs	r2, #1
 800399c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399e:	f7fe f93b 	bl	8001c18 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a6:	f7fe f937 	bl	8001c18 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e1b4      	b.n	8003d22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f0      	beq.n	80039a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c4:	4b28      	ldr	r3, [pc, #160]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	4925      	ldr	r1, [pc, #148]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	600b      	str	r3, [r1, #0]
 80039d8:	e015      	b.n	8003a06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039da:	4b24      	ldr	r3, [pc, #144]	@ (8003a6c <HAL_RCC_OscConfig+0x278>)
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e0:	f7fe f91a 	bl	8001c18 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e8:	f7fe f916 	bl	8001c18 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e193      	b.n	8003d22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d036      	beq.n	8003a80 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d016      	beq.n	8003a48 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a1a:	4b15      	ldr	r3, [pc, #84]	@ (8003a70 <HAL_RCC_OscConfig+0x27c>)
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a20:	f7fe f8fa 	bl	8001c18 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a28:	f7fe f8f6 	bl	8001c18 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e173      	b.n	8003d22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a68 <HAL_RCC_OscConfig+0x274>)
 8003a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0x234>
 8003a46:	e01b      	b.n	8003a80 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a48:	4b09      	ldr	r3, [pc, #36]	@ (8003a70 <HAL_RCC_OscConfig+0x27c>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4e:	f7fe f8e3 	bl	8001c18 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a54:	e00e      	b.n	8003a74 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a56:	f7fe f8df 	bl	8001c18 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d907      	bls.n	8003a74 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e15c      	b.n	8003d22 <HAL_RCC_OscConfig+0x52e>
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	42470000 	.word	0x42470000
 8003a70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a74:	4b8a      	ldr	r3, [pc, #552]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003a76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1ea      	bne.n	8003a56 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 8097 	beq.w	8003bbc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a92:	4b83      	ldr	r3, [pc, #524]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10f      	bne.n	8003abe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aae:	4b7c      	ldr	r3, [pc, #496]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aba:	2301      	movs	r3, #1
 8003abc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abe:	4b79      	ldr	r3, [pc, #484]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d118      	bne.n	8003afc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aca:	4b76      	ldr	r3, [pc, #472]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a75      	ldr	r2, [pc, #468]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b0>)
 8003ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ad6:	f7fe f89f 	bl	8001c18 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ade:	f7fe f89b 	bl	8001c18 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e118      	b.n	8003d22 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af0:	4b6c      	ldr	r3, [pc, #432]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d106      	bne.n	8003b12 <HAL_RCC_OscConfig+0x31e>
 8003b04:	4b66      	ldr	r3, [pc, #408]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b08:	4a65      	ldr	r2, [pc, #404]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b10:	e01c      	b.n	8003b4c <HAL_RCC_OscConfig+0x358>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b05      	cmp	r3, #5
 8003b18:	d10c      	bne.n	8003b34 <HAL_RCC_OscConfig+0x340>
 8003b1a:	4b61      	ldr	r3, [pc, #388]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1e:	4a60      	ldr	r2, [pc, #384]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003b20:	f043 0304 	orr.w	r3, r3, #4
 8003b24:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b26:	4b5e      	ldr	r3, [pc, #376]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	4a5d      	ldr	r2, [pc, #372]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b32:	e00b      	b.n	8003b4c <HAL_RCC_OscConfig+0x358>
 8003b34:	4b5a      	ldr	r3, [pc, #360]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b38:	4a59      	ldr	r2, [pc, #356]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003b3a:	f023 0301 	bic.w	r3, r3, #1
 8003b3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b40:	4b57      	ldr	r3, [pc, #348]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b44:	4a56      	ldr	r2, [pc, #344]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003b46:	f023 0304 	bic.w	r3, r3, #4
 8003b4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d015      	beq.n	8003b80 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b54:	f7fe f860 	bl	8001c18 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5c:	f7fe f85c 	bl	8001c18 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e0d7      	b.n	8003d22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b72:	4b4b      	ldr	r3, [pc, #300]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0ee      	beq.n	8003b5c <HAL_RCC_OscConfig+0x368>
 8003b7e:	e014      	b.n	8003baa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b80:	f7fe f84a 	bl	8001c18 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b86:	e00a      	b.n	8003b9e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b88:	f7fe f846 	bl	8001c18 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e0c1      	b.n	8003d22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b9e:	4b40      	ldr	r3, [pc, #256]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1ee      	bne.n	8003b88 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d105      	bne.n	8003bbc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb4:	4a3a      	ldr	r2, [pc, #232]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003bb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 80ad 	beq.w	8003d20 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bc6:	4b36      	ldr	r3, [pc, #216]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d060      	beq.n	8003c94 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d145      	bne.n	8003c66 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bda:	4b33      	ldr	r3, [pc, #204]	@ (8003ca8 <HAL_RCC_OscConfig+0x4b4>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fe f81a 	bl	8001c18 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be8:	f7fe f816 	bl	8001c18 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e093      	b.n	8003d22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfa:	4b29      	ldr	r3, [pc, #164]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69da      	ldr	r2, [r3, #28]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c14:	019b      	lsls	r3, r3, #6
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1c:	085b      	lsrs	r3, r3, #1
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	041b      	lsls	r3, r3, #16
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c28:	061b      	lsls	r3, r3, #24
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c30:	071b      	lsls	r3, r3, #28
 8003c32:	491b      	ldr	r1, [pc, #108]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c38:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca8 <HAL_RCC_OscConfig+0x4b4>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3e:	f7fd ffeb 	bl	8001c18 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c46:	f7fd ffe7 	bl	8001c18 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e064      	b.n	8003d22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c58:	4b11      	ldr	r3, [pc, #68]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0f0      	beq.n	8003c46 <HAL_RCC_OscConfig+0x452>
 8003c64:	e05c      	b.n	8003d20 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c66:	4b10      	ldr	r3, [pc, #64]	@ (8003ca8 <HAL_RCC_OscConfig+0x4b4>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fd ffd4 	bl	8001c18 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c74:	f7fd ffd0 	bl	8001c18 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e04d      	b.n	8003d22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	4b06      	ldr	r3, [pc, #24]	@ (8003ca0 <HAL_RCC_OscConfig+0x4ac>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x480>
 8003c92:	e045      	b.n	8003d20 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d107      	bne.n	8003cac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e040      	b.n	8003d22 <HAL_RCC_OscConfig+0x52e>
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40007000 	.word	0x40007000
 8003ca8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cac:	4b1f      	ldr	r3, [pc, #124]	@ (8003d2c <HAL_RCC_OscConfig+0x538>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d030      	beq.n	8003d1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d129      	bne.n	8003d1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d122      	bne.n	8003d1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cdc:	4013      	ands	r3, r2
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ce2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d119      	bne.n	8003d1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d10f      	bne.n	8003d1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d107      	bne.n	8003d1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d16:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40023800 	.word	0x40023800

08003d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e041      	b.n	8003dc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f839 	bl	8003dce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4610      	mov	r0, r2
 8003d70:	f000 f9c0 	bl	80040f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
	...

08003de4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d001      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e04e      	b.n	8003e9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a23      	ldr	r2, [pc, #140]	@ (8003ea8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d022      	beq.n	8003e64 <HAL_TIM_Base_Start_IT+0x80>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e26:	d01d      	beq.n	8003e64 <HAL_TIM_Base_Start_IT+0x80>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8003eac <HAL_TIM_Base_Start_IT+0xc8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d018      	beq.n	8003e64 <HAL_TIM_Base_Start_IT+0x80>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a1e      	ldr	r2, [pc, #120]	@ (8003eb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d013      	beq.n	8003e64 <HAL_TIM_Base_Start_IT+0x80>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a1c      	ldr	r2, [pc, #112]	@ (8003eb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00e      	beq.n	8003e64 <HAL_TIM_Base_Start_IT+0x80>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8003eb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d009      	beq.n	8003e64 <HAL_TIM_Base_Start_IT+0x80>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a19      	ldr	r2, [pc, #100]	@ (8003ebc <HAL_TIM_Base_Start_IT+0xd8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d004      	beq.n	8003e64 <HAL_TIM_Base_Start_IT+0x80>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a18      	ldr	r2, [pc, #96]	@ (8003ec0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d111      	bne.n	8003e88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b06      	cmp	r3, #6
 8003e74:	d010      	beq.n	8003e98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f042 0201 	orr.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e86:	e007      	b.n	8003e98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40010000 	.word	0x40010000
 8003eac:	40000400 	.word	0x40000400
 8003eb0:	40000800 	.word	0x40000800
 8003eb4:	40000c00 	.word	0x40000c00
 8003eb8:	40010400 	.word	0x40010400
 8003ebc:	40014000 	.word	0x40014000
 8003ec0:	40001800 	.word	0x40001800

08003ec4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d020      	beq.n	8003f28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d01b      	beq.n	8003f28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0202 	mvn.w	r2, #2
 8003ef8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f8d2 	bl	80040b8 <HAL_TIM_IC_CaptureCallback>
 8003f14:	e005      	b.n	8003f22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f8c4 	bl	80040a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f8d5 	bl	80040cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f003 0304 	and.w	r3, r3, #4
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d020      	beq.n	8003f74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01b      	beq.n	8003f74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0204 	mvn.w	r2, #4
 8003f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f8ac 	bl	80040b8 <HAL_TIM_IC_CaptureCallback>
 8003f60:	e005      	b.n	8003f6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f89e 	bl	80040a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f8af 	bl	80040cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d020      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01b      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f06f 0208 	mvn.w	r2, #8
 8003f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2204      	movs	r2, #4
 8003f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f886 	bl	80040b8 <HAL_TIM_IC_CaptureCallback>
 8003fac:	e005      	b.n	8003fba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f878 	bl	80040a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f889 	bl	80040cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d020      	beq.n	800400c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d01b      	beq.n	800400c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0210 	mvn.w	r2, #16
 8003fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f860 	bl	80040b8 <HAL_TIM_IC_CaptureCallback>
 8003ff8:	e005      	b.n	8004006 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f852 	bl	80040a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f863 	bl	80040cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00c      	beq.n	8004030 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d007      	beq.n	8004030 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0201 	mvn.w	r2, #1
 8004028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fd f9c6 	bl	80013bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00c      	beq.n	8004054 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004040:	2b00      	cmp	r3, #0
 8004042:	d007      	beq.n	8004054 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800404c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f900 	bl	8004254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00c      	beq.n	8004078 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004064:	2b00      	cmp	r3, #0
 8004066:	d007      	beq.n	8004078 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f834 	bl	80040e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f003 0320 	and.w	r3, r3, #32
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00c      	beq.n	800409c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b00      	cmp	r3, #0
 800408a:	d007      	beq.n	800409c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0220 	mvn.w	r2, #32
 8004094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f8d2 	bl	8004240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800409c:	bf00      	nop
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a43      	ldr	r2, [pc, #268]	@ (8004214 <TIM_Base_SetConfig+0x120>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d013      	beq.n	8004134 <TIM_Base_SetConfig+0x40>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004112:	d00f      	beq.n	8004134 <TIM_Base_SetConfig+0x40>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a40      	ldr	r2, [pc, #256]	@ (8004218 <TIM_Base_SetConfig+0x124>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d00b      	beq.n	8004134 <TIM_Base_SetConfig+0x40>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a3f      	ldr	r2, [pc, #252]	@ (800421c <TIM_Base_SetConfig+0x128>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d007      	beq.n	8004134 <TIM_Base_SetConfig+0x40>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a3e      	ldr	r2, [pc, #248]	@ (8004220 <TIM_Base_SetConfig+0x12c>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d003      	beq.n	8004134 <TIM_Base_SetConfig+0x40>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a3d      	ldr	r2, [pc, #244]	@ (8004224 <TIM_Base_SetConfig+0x130>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d108      	bne.n	8004146 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800413a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a32      	ldr	r2, [pc, #200]	@ (8004214 <TIM_Base_SetConfig+0x120>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d02b      	beq.n	80041a6 <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004154:	d027      	beq.n	80041a6 <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2f      	ldr	r2, [pc, #188]	@ (8004218 <TIM_Base_SetConfig+0x124>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d023      	beq.n	80041a6 <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a2e      	ldr	r2, [pc, #184]	@ (800421c <TIM_Base_SetConfig+0x128>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d01f      	beq.n	80041a6 <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a2d      	ldr	r2, [pc, #180]	@ (8004220 <TIM_Base_SetConfig+0x12c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d01b      	beq.n	80041a6 <TIM_Base_SetConfig+0xb2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a2c      	ldr	r2, [pc, #176]	@ (8004224 <TIM_Base_SetConfig+0x130>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d017      	beq.n	80041a6 <TIM_Base_SetConfig+0xb2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a2b      	ldr	r2, [pc, #172]	@ (8004228 <TIM_Base_SetConfig+0x134>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d013      	beq.n	80041a6 <TIM_Base_SetConfig+0xb2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a2a      	ldr	r2, [pc, #168]	@ (800422c <TIM_Base_SetConfig+0x138>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00f      	beq.n	80041a6 <TIM_Base_SetConfig+0xb2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a29      	ldr	r2, [pc, #164]	@ (8004230 <TIM_Base_SetConfig+0x13c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00b      	beq.n	80041a6 <TIM_Base_SetConfig+0xb2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a28      	ldr	r2, [pc, #160]	@ (8004234 <TIM_Base_SetConfig+0x140>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d007      	beq.n	80041a6 <TIM_Base_SetConfig+0xb2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a27      	ldr	r2, [pc, #156]	@ (8004238 <TIM_Base_SetConfig+0x144>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d003      	beq.n	80041a6 <TIM_Base_SetConfig+0xb2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a26      	ldr	r2, [pc, #152]	@ (800423c <TIM_Base_SetConfig+0x148>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d108      	bne.n	80041b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004214 <TIM_Base_SetConfig+0x120>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <TIM_Base_SetConfig+0xf2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a10      	ldr	r2, [pc, #64]	@ (8004224 <TIM_Base_SetConfig+0x130>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d103      	bne.n	80041ee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f043 0204 	orr.w	r2, r3, #4
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	601a      	str	r2, [r3, #0]
}
 8004206:	bf00      	nop
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	40010000 	.word	0x40010000
 8004218:	40000400 	.word	0x40000400
 800421c:	40000800 	.word	0x40000800
 8004220:	40000c00 	.word	0x40000c00
 8004224:	40010400 	.word	0x40010400
 8004228:	40014000 	.word	0x40014000
 800422c:	40014400 	.word	0x40014400
 8004230:	40014800 	.word	0x40014800
 8004234:	40001800 	.word	0x40001800
 8004238:	40001c00 	.word	0x40001c00
 800423c:	40002000 	.word	0x40002000

08004240 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e042      	b.n	8004300 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fd f920 	bl	80014d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2224      	movs	r2, #36	@ 0x24
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f973 	bl	8004598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695a      	ldr	r2, [r3, #20]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08a      	sub	sp, #40	@ 0x28
 800430c:	af02      	add	r7, sp, #8
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b20      	cmp	r3, #32
 8004326:	d175      	bne.n	8004414 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <HAL_UART_Transmit+0x2c>
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e06e      	b.n	8004416 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2221      	movs	r2, #33	@ 0x21
 8004342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004346:	f7fd fc67 	bl	8001c18 <HAL_GetTick>
 800434a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	88fa      	ldrh	r2, [r7, #6]
 8004350:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	88fa      	ldrh	r2, [r7, #6]
 8004356:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004360:	d108      	bne.n	8004374 <HAL_UART_Transmit+0x6c>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d104      	bne.n	8004374 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800436a:	2300      	movs	r3, #0
 800436c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	e003      	b.n	800437c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004378:	2300      	movs	r3, #0
 800437a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800437c:	e02e      	b.n	80043dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2200      	movs	r2, #0
 8004386:	2180      	movs	r1, #128	@ 0x80
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 f848 	bl	800441e <UART_WaitOnFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e03a      	b.n	8004416 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10b      	bne.n	80043be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	461a      	mov	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	3302      	adds	r3, #2
 80043ba:	61bb      	str	r3, [r7, #24]
 80043bc:	e007      	b.n	80043ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	781a      	ldrb	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	3301      	adds	r3, #1
 80043cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1cb      	bne.n	800437e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2200      	movs	r2, #0
 80043ee:	2140      	movs	r1, #64	@ 0x40
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 f814 	bl	800441e <UART_WaitOnFlagUntilTimeout>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e006      	b.n	8004416 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004410:	2300      	movs	r3, #0
 8004412:	e000      	b.n	8004416 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004414:	2302      	movs	r3, #2
  }
}
 8004416:	4618      	mov	r0, r3
 8004418:	3720      	adds	r7, #32
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b086      	sub	sp, #24
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	603b      	str	r3, [r7, #0]
 800442a:	4613      	mov	r3, r2
 800442c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800442e:	e03b      	b.n	80044a8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004436:	d037      	beq.n	80044a8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004438:	f7fd fbee 	bl	8001c18 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	6a3a      	ldr	r2, [r7, #32]
 8004444:	429a      	cmp	r2, r3
 8004446:	d302      	bcc.n	800444e <UART_WaitOnFlagUntilTimeout+0x30>
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e03a      	b.n	80044c8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b00      	cmp	r3, #0
 800445e:	d023      	beq.n	80044a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b80      	cmp	r3, #128	@ 0x80
 8004464:	d020      	beq.n	80044a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b40      	cmp	r3, #64	@ 0x40
 800446a:	d01d      	beq.n	80044a8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b08      	cmp	r3, #8
 8004478:	d116      	bne.n	80044a8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800447a:	2300      	movs	r3, #0
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f81d 	bl	80044d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2208      	movs	r2, #8
 800449a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e00f      	b.n	80044c8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	4013      	ands	r3, r2
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	bf0c      	ite	eq
 80044b8:	2301      	moveq	r3, #1
 80044ba:	2300      	movne	r3, #0
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	461a      	mov	r2, r3
 80044c0:	79fb      	ldrb	r3, [r7, #7]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d0b4      	beq.n	8004430 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b095      	sub	sp, #84	@ 0x54
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	330c      	adds	r3, #12
 80044de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	330c      	adds	r3, #12
 80044f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80044fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e5      	bne.n	80044d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3314      	adds	r3, #20
 8004512:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	61fb      	str	r3, [r7, #28]
   return(result);
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f023 0301 	bic.w	r3, r3, #1
 8004522:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3314      	adds	r3, #20
 800452a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800452c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800452e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004530:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004532:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004534:	e841 2300 	strex	r3, r2, [r1]
 8004538:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e5      	bne.n	800450c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004544:	2b01      	cmp	r3, #1
 8004546:	d119      	bne.n	800457c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	330c      	adds	r3, #12
 800454e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	60bb      	str	r3, [r7, #8]
   return(result);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f023 0310 	bic.w	r3, r3, #16
 800455e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	330c      	adds	r3, #12
 8004566:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004568:	61ba      	str	r2, [r7, #24]
 800456a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	6979      	ldr	r1, [r7, #20]
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	613b      	str	r3, [r7, #16]
   return(result);
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e5      	bne.n	8004548 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800458a:	bf00      	nop
 800458c:	3754      	adds	r7, #84	@ 0x54
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
	...

08004598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800459c:	b0c0      	sub	sp, #256	@ 0x100
 800459e:	af00      	add	r7, sp, #0
 80045a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b4:	68d9      	ldr	r1, [r3, #12]
 80045b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	ea40 0301 	orr.w	r3, r0, r1
 80045c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045f0:	f021 010c 	bic.w	r1, r1, #12
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045fe:	430b      	orrs	r3, r1
 8004600:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800460e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004612:	6999      	ldr	r1, [r3, #24]
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	ea40 0301 	orr.w	r3, r0, r1
 800461e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	4b8f      	ldr	r3, [pc, #572]	@ (8004864 <UART_SetConfig+0x2cc>)
 8004628:	429a      	cmp	r2, r3
 800462a:	d005      	beq.n	8004638 <UART_SetConfig+0xa0>
 800462c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	4b8d      	ldr	r3, [pc, #564]	@ (8004868 <UART_SetConfig+0x2d0>)
 8004634:	429a      	cmp	r2, r3
 8004636:	d104      	bne.n	8004642 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004638:	f7fe fe66 	bl	8003308 <HAL_RCC_GetPCLK2Freq>
 800463c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004640:	e003      	b.n	800464a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004642:	f7fe fe4d 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 8004646:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800464a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004654:	f040 810c 	bne.w	8004870 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800465c:	2200      	movs	r2, #0
 800465e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004662:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004666:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800466a:	4622      	mov	r2, r4
 800466c:	462b      	mov	r3, r5
 800466e:	1891      	adds	r1, r2, r2
 8004670:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004672:	415b      	adcs	r3, r3
 8004674:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004676:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800467a:	4621      	mov	r1, r4
 800467c:	eb12 0801 	adds.w	r8, r2, r1
 8004680:	4629      	mov	r1, r5
 8004682:	eb43 0901 	adc.w	r9, r3, r1
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004692:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004696:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800469a:	4690      	mov	r8, r2
 800469c:	4699      	mov	r9, r3
 800469e:	4623      	mov	r3, r4
 80046a0:	eb18 0303 	adds.w	r3, r8, r3
 80046a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046a8:	462b      	mov	r3, r5
 80046aa:	eb49 0303 	adc.w	r3, r9, r3
 80046ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80046c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046c6:	460b      	mov	r3, r1
 80046c8:	18db      	adds	r3, r3, r3
 80046ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80046cc:	4613      	mov	r3, r2
 80046ce:	eb42 0303 	adc.w	r3, r2, r3
 80046d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80046d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046dc:	f7fb fe00 	bl	80002e0 <__aeabi_uldivmod>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4b61      	ldr	r3, [pc, #388]	@ (800486c <UART_SetConfig+0x2d4>)
 80046e6:	fba3 2302 	umull	r2, r3, r3, r2
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	011c      	lsls	r4, r3, #4
 80046ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046f2:	2200      	movs	r2, #0
 80046f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80046fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004700:	4642      	mov	r2, r8
 8004702:	464b      	mov	r3, r9
 8004704:	1891      	adds	r1, r2, r2
 8004706:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004708:	415b      	adcs	r3, r3
 800470a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800470c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004710:	4641      	mov	r1, r8
 8004712:	eb12 0a01 	adds.w	sl, r2, r1
 8004716:	4649      	mov	r1, r9
 8004718:	eb43 0b01 	adc.w	fp, r3, r1
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004728:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800472c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004730:	4692      	mov	sl, r2
 8004732:	469b      	mov	fp, r3
 8004734:	4643      	mov	r3, r8
 8004736:	eb1a 0303 	adds.w	r3, sl, r3
 800473a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800473e:	464b      	mov	r3, r9
 8004740:	eb4b 0303 	adc.w	r3, fp, r3
 8004744:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004754:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004758:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800475c:	460b      	mov	r3, r1
 800475e:	18db      	adds	r3, r3, r3
 8004760:	643b      	str	r3, [r7, #64]	@ 0x40
 8004762:	4613      	mov	r3, r2
 8004764:	eb42 0303 	adc.w	r3, r2, r3
 8004768:	647b      	str	r3, [r7, #68]	@ 0x44
 800476a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800476e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004772:	f7fb fdb5 	bl	80002e0 <__aeabi_uldivmod>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4611      	mov	r1, r2
 800477c:	4b3b      	ldr	r3, [pc, #236]	@ (800486c <UART_SetConfig+0x2d4>)
 800477e:	fba3 2301 	umull	r2, r3, r3, r1
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	2264      	movs	r2, #100	@ 0x64
 8004786:	fb02 f303 	mul.w	r3, r2, r3
 800478a:	1acb      	subs	r3, r1, r3
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004792:	4b36      	ldr	r3, [pc, #216]	@ (800486c <UART_SetConfig+0x2d4>)
 8004794:	fba3 2302 	umull	r2, r3, r3, r2
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80047a0:	441c      	add	r4, r3
 80047a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80047b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80047b4:	4642      	mov	r2, r8
 80047b6:	464b      	mov	r3, r9
 80047b8:	1891      	adds	r1, r2, r2
 80047ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047bc:	415b      	adcs	r3, r3
 80047be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047c4:	4641      	mov	r1, r8
 80047c6:	1851      	adds	r1, r2, r1
 80047c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80047ca:	4649      	mov	r1, r9
 80047cc:	414b      	adcs	r3, r1
 80047ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047dc:	4659      	mov	r1, fp
 80047de:	00cb      	lsls	r3, r1, #3
 80047e0:	4651      	mov	r1, sl
 80047e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047e6:	4651      	mov	r1, sl
 80047e8:	00ca      	lsls	r2, r1, #3
 80047ea:	4610      	mov	r0, r2
 80047ec:	4619      	mov	r1, r3
 80047ee:	4603      	mov	r3, r0
 80047f0:	4642      	mov	r2, r8
 80047f2:	189b      	adds	r3, r3, r2
 80047f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047f8:	464b      	mov	r3, r9
 80047fa:	460a      	mov	r2, r1
 80047fc:	eb42 0303 	adc.w	r3, r2, r3
 8004800:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004810:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004814:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004818:	460b      	mov	r3, r1
 800481a:	18db      	adds	r3, r3, r3
 800481c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800481e:	4613      	mov	r3, r2
 8004820:	eb42 0303 	adc.w	r3, r2, r3
 8004824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004826:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800482a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800482e:	f7fb fd57 	bl	80002e0 <__aeabi_uldivmod>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4b0d      	ldr	r3, [pc, #52]	@ (800486c <UART_SetConfig+0x2d4>)
 8004838:	fba3 1302 	umull	r1, r3, r3, r2
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	2164      	movs	r1, #100	@ 0x64
 8004840:	fb01 f303 	mul.w	r3, r1, r3
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	3332      	adds	r3, #50	@ 0x32
 800484a:	4a08      	ldr	r2, [pc, #32]	@ (800486c <UART_SetConfig+0x2d4>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	f003 0207 	and.w	r2, r3, #7
 8004856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4422      	add	r2, r4
 800485e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004860:	e106      	b.n	8004a70 <UART_SetConfig+0x4d8>
 8004862:	bf00      	nop
 8004864:	40011000 	.word	0x40011000
 8004868:	40011400 	.word	0x40011400
 800486c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004874:	2200      	movs	r2, #0
 8004876:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800487a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800487e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004882:	4642      	mov	r2, r8
 8004884:	464b      	mov	r3, r9
 8004886:	1891      	adds	r1, r2, r2
 8004888:	6239      	str	r1, [r7, #32]
 800488a:	415b      	adcs	r3, r3
 800488c:	627b      	str	r3, [r7, #36]	@ 0x24
 800488e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004892:	4641      	mov	r1, r8
 8004894:	1854      	adds	r4, r2, r1
 8004896:	4649      	mov	r1, r9
 8004898:	eb43 0501 	adc.w	r5, r3, r1
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	00eb      	lsls	r3, r5, #3
 80048a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048aa:	00e2      	lsls	r2, r4, #3
 80048ac:	4614      	mov	r4, r2
 80048ae:	461d      	mov	r5, r3
 80048b0:	4643      	mov	r3, r8
 80048b2:	18e3      	adds	r3, r4, r3
 80048b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048b8:	464b      	mov	r3, r9
 80048ba:	eb45 0303 	adc.w	r3, r5, r3
 80048be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048de:	4629      	mov	r1, r5
 80048e0:	008b      	lsls	r3, r1, #2
 80048e2:	4621      	mov	r1, r4
 80048e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048e8:	4621      	mov	r1, r4
 80048ea:	008a      	lsls	r2, r1, #2
 80048ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048f0:	f7fb fcf6 	bl	80002e0 <__aeabi_uldivmod>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4b60      	ldr	r3, [pc, #384]	@ (8004a7c <UART_SetConfig+0x4e4>)
 80048fa:	fba3 2302 	umull	r2, r3, r3, r2
 80048fe:	095b      	lsrs	r3, r3, #5
 8004900:	011c      	lsls	r4, r3, #4
 8004902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004906:	2200      	movs	r2, #0
 8004908:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800490c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004910:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004914:	4642      	mov	r2, r8
 8004916:	464b      	mov	r3, r9
 8004918:	1891      	adds	r1, r2, r2
 800491a:	61b9      	str	r1, [r7, #24]
 800491c:	415b      	adcs	r3, r3
 800491e:	61fb      	str	r3, [r7, #28]
 8004920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004924:	4641      	mov	r1, r8
 8004926:	1851      	adds	r1, r2, r1
 8004928:	6139      	str	r1, [r7, #16]
 800492a:	4649      	mov	r1, r9
 800492c:	414b      	adcs	r3, r1
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800493c:	4659      	mov	r1, fp
 800493e:	00cb      	lsls	r3, r1, #3
 8004940:	4651      	mov	r1, sl
 8004942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004946:	4651      	mov	r1, sl
 8004948:	00ca      	lsls	r2, r1, #3
 800494a:	4610      	mov	r0, r2
 800494c:	4619      	mov	r1, r3
 800494e:	4603      	mov	r3, r0
 8004950:	4642      	mov	r2, r8
 8004952:	189b      	adds	r3, r3, r2
 8004954:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004958:	464b      	mov	r3, r9
 800495a:	460a      	mov	r2, r1
 800495c:	eb42 0303 	adc.w	r3, r2, r3
 8004960:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800496e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004970:	f04f 0200 	mov.w	r2, #0
 8004974:	f04f 0300 	mov.w	r3, #0
 8004978:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800497c:	4649      	mov	r1, r9
 800497e:	008b      	lsls	r3, r1, #2
 8004980:	4641      	mov	r1, r8
 8004982:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004986:	4641      	mov	r1, r8
 8004988:	008a      	lsls	r2, r1, #2
 800498a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800498e:	f7fb fca7 	bl	80002e0 <__aeabi_uldivmod>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4611      	mov	r1, r2
 8004998:	4b38      	ldr	r3, [pc, #224]	@ (8004a7c <UART_SetConfig+0x4e4>)
 800499a:	fba3 2301 	umull	r2, r3, r3, r1
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	2264      	movs	r2, #100	@ 0x64
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	1acb      	subs	r3, r1, r3
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	3332      	adds	r3, #50	@ 0x32
 80049ac:	4a33      	ldr	r2, [pc, #204]	@ (8004a7c <UART_SetConfig+0x4e4>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049b8:	441c      	add	r4, r3
 80049ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049be:	2200      	movs	r2, #0
 80049c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80049c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80049c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80049c8:	4642      	mov	r2, r8
 80049ca:	464b      	mov	r3, r9
 80049cc:	1891      	adds	r1, r2, r2
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	415b      	adcs	r3, r3
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049d8:	4641      	mov	r1, r8
 80049da:	1851      	adds	r1, r2, r1
 80049dc:	6039      	str	r1, [r7, #0]
 80049de:	4649      	mov	r1, r9
 80049e0:	414b      	adcs	r3, r1
 80049e2:	607b      	str	r3, [r7, #4]
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049f0:	4659      	mov	r1, fp
 80049f2:	00cb      	lsls	r3, r1, #3
 80049f4:	4651      	mov	r1, sl
 80049f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049fa:	4651      	mov	r1, sl
 80049fc:	00ca      	lsls	r2, r1, #3
 80049fe:	4610      	mov	r0, r2
 8004a00:	4619      	mov	r1, r3
 8004a02:	4603      	mov	r3, r0
 8004a04:	4642      	mov	r2, r8
 8004a06:	189b      	adds	r3, r3, r2
 8004a08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a0a:	464b      	mov	r3, r9
 8004a0c:	460a      	mov	r2, r1
 8004a0e:	eb42 0303 	adc.w	r3, r2, r3
 8004a12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a2c:	4649      	mov	r1, r9
 8004a2e:	008b      	lsls	r3, r1, #2
 8004a30:	4641      	mov	r1, r8
 8004a32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a36:	4641      	mov	r1, r8
 8004a38:	008a      	lsls	r2, r1, #2
 8004a3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a3e:	f7fb fc4f 	bl	80002e0 <__aeabi_uldivmod>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4b0d      	ldr	r3, [pc, #52]	@ (8004a7c <UART_SetConfig+0x4e4>)
 8004a48:	fba3 1302 	umull	r1, r3, r3, r2
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	2164      	movs	r1, #100	@ 0x64
 8004a50:	fb01 f303 	mul.w	r3, r1, r3
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	3332      	adds	r3, #50	@ 0x32
 8004a5a:	4a08      	ldr	r2, [pc, #32]	@ (8004a7c <UART_SetConfig+0x4e4>)
 8004a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a60:	095b      	lsrs	r3, r3, #5
 8004a62:	f003 020f 	and.w	r2, r3, #15
 8004a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4422      	add	r2, r4
 8004a6e:	609a      	str	r2, [r3, #8]
}
 8004a70:	bf00      	nop
 8004a72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a76:	46bd      	mov	sp, r7
 8004a78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a7c:	51eb851f 	.word	0x51eb851f

08004a80 <__NVIC_SetPriority>:
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	6039      	str	r1, [r7, #0]
 8004a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	db0a      	blt.n	8004aaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	490c      	ldr	r1, [pc, #48]	@ (8004acc <__NVIC_SetPriority+0x4c>)
 8004a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a9e:	0112      	lsls	r2, r2, #4
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004aa8:	e00a      	b.n	8004ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	4908      	ldr	r1, [pc, #32]	@ (8004ad0 <__NVIC_SetPriority+0x50>)
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	3b04      	subs	r3, #4
 8004ab8:	0112      	lsls	r2, r2, #4
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	440b      	add	r3, r1
 8004abe:	761a      	strb	r2, [r3, #24]
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	e000e100 	.word	0xe000e100
 8004ad0:	e000ed00 	.word	0xe000ed00

08004ad4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004ad8:	4b05      	ldr	r3, [pc, #20]	@ (8004af0 <SysTick_Handler+0x1c>)
 8004ada:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004adc:	f002 f8a2 	bl	8006c24 <xTaskGetSchedulerState>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d001      	beq.n	8004aea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004ae6:	f003 f99f 	bl	8007e28 <xPortSysTickHandler>
  }
}
 8004aea:	bf00      	nop
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	e000e010 	.word	0xe000e010

08004af4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004af8:	2100      	movs	r1, #0
 8004afa:	f06f 0004 	mvn.w	r0, #4
 8004afe:	f7ff ffbf 	bl	8004a80 <__NVIC_SetPriority>
#endif
}
 8004b02:	bf00      	nop
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b0e:	f3ef 8305 	mrs	r3, IPSR
 8004b12:	603b      	str	r3, [r7, #0]
  return(result);
 8004b14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004b1a:	f06f 0305 	mvn.w	r3, #5
 8004b1e:	607b      	str	r3, [r7, #4]
 8004b20:	e00c      	b.n	8004b3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004b22:	4b0a      	ldr	r3, [pc, #40]	@ (8004b4c <osKernelInitialize+0x44>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d105      	bne.n	8004b36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004b2a:	4b08      	ldr	r3, [pc, #32]	@ (8004b4c <osKernelInitialize+0x44>)
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	607b      	str	r3, [r7, #4]
 8004b34:	e002      	b.n	8004b3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004b36:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b3c:	687b      	ldr	r3, [r7, #4]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	200001d0 	.word	0x200001d0

08004b50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b56:	f3ef 8305 	mrs	r3, IPSR
 8004b5a:	603b      	str	r3, [r7, #0]
  return(result);
 8004b5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004b62:	f06f 0305 	mvn.w	r3, #5
 8004b66:	607b      	str	r3, [r7, #4]
 8004b68:	e010      	b.n	8004b8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b98 <osKernelStart+0x48>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d109      	bne.n	8004b86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b72:	f7ff ffbf 	bl	8004af4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b76:	4b08      	ldr	r3, [pc, #32]	@ (8004b98 <osKernelStart+0x48>)
 8004b78:	2202      	movs	r2, #2
 8004b7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004b7c:	f001 fbde 	bl	800633c <vTaskStartScheduler>
      stat = osOK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	607b      	str	r3, [r7, #4]
 8004b84:	e002      	b.n	8004b8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004b86:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b8c:	687b      	ldr	r3, [r7, #4]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	200001d0 	.word	0x200001d0

08004b9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08e      	sub	sp, #56	@ 0x38
 8004ba0:	af04      	add	r7, sp, #16
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bac:	f3ef 8305 	mrs	r3, IPSR
 8004bb0:	617b      	str	r3, [r7, #20]
  return(result);
 8004bb2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d17e      	bne.n	8004cb6 <osThreadNew+0x11a>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d07b      	beq.n	8004cb6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004bbe:	2380      	movs	r3, #128	@ 0x80
 8004bc0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004bc2:	2318      	movs	r3, #24
 8004bc4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004bca:	f04f 33ff 	mov.w	r3, #4294967295
 8004bce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d045      	beq.n	8004c62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <osThreadNew+0x48>
        name = attr->name;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <osThreadNew+0x6e>
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	2b38      	cmp	r3, #56	@ 0x38
 8004bfc:	d805      	bhi.n	8004c0a <osThreadNew+0x6e>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <osThreadNew+0x72>
        return (NULL);
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e054      	b.n	8004cb8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	089b      	lsrs	r3, r3, #2
 8004c1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00e      	beq.n	8004c44 <osThreadNew+0xa8>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	2ba7      	cmp	r3, #167	@ 0xa7
 8004c2c:	d90a      	bls.n	8004c44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d006      	beq.n	8004c44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <osThreadNew+0xa8>
        mem = 1;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	e010      	b.n	8004c66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10c      	bne.n	8004c66 <osThreadNew+0xca>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d108      	bne.n	8004c66 <osThreadNew+0xca>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d104      	bne.n	8004c66 <osThreadNew+0xca>
          mem = 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	61bb      	str	r3, [r7, #24]
 8004c60:	e001      	b.n	8004c66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d110      	bne.n	8004c8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c74:	9202      	str	r2, [sp, #8]
 8004c76:	9301      	str	r3, [sp, #4]
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	6a3a      	ldr	r2, [r7, #32]
 8004c80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f001 f99c 	bl	8005fc0 <xTaskCreateStatic>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	613b      	str	r3, [r7, #16]
 8004c8c:	e013      	b.n	8004cb6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d110      	bne.n	8004cb6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	f107 0310 	add.w	r3, r7, #16
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f001 f9ea 	bl	8006080 <xTaskCreate>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d001      	beq.n	8004cb6 <osThreadNew+0x11a>
            hTask = NULL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004cb6:	693b      	ldr	r3, [r7, #16]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3728      	adds	r7, #40	@ 0x28
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ccc:	f3ef 8305 	mrs	r3, IPSR
 8004cd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cd2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d174      	bne.n	8004dc2 <osMutexNew+0x102>
    if (attr != NULL) {
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	61bb      	str	r3, [r7, #24]
 8004ce4:	e001      	b.n	8004cea <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <osMutexNew+0x3a>
      rmtx = 1U;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	e001      	b.n	8004cfe <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d15c      	bne.n	8004dc2 <osMutexNew+0x102>
      mem = -1;
 8004d08:	f04f 33ff 	mov.w	r3, #4294967295
 8004d0c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d015      	beq.n	8004d40 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d006      	beq.n	8004d2a <osMutexNew+0x6a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	2b4f      	cmp	r3, #79	@ 0x4f
 8004d22:	d902      	bls.n	8004d2a <osMutexNew+0x6a>
          mem = 1;
 8004d24:	2301      	movs	r3, #1
 8004d26:	613b      	str	r3, [r7, #16]
 8004d28:	e00c      	b.n	8004d44 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d108      	bne.n	8004d44 <osMutexNew+0x84>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d104      	bne.n	8004d44 <osMutexNew+0x84>
            mem = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	613b      	str	r3, [r7, #16]
 8004d3e:	e001      	b.n	8004d44 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004d40:	2300      	movs	r3, #0
 8004d42:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d112      	bne.n	8004d70 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d007      	beq.n	8004d60 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	4619      	mov	r1, r3
 8004d56:	2004      	movs	r0, #4
 8004d58:	f000 fb93 	bl	8005482 <xQueueCreateMutexStatic>
 8004d5c:	61f8      	str	r0, [r7, #28]
 8004d5e:	e016      	b.n	8004d8e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	4619      	mov	r1, r3
 8004d66:	2001      	movs	r0, #1
 8004d68:	f000 fb8b 	bl	8005482 <xQueueCreateMutexStatic>
 8004d6c:	61f8      	str	r0, [r7, #28]
 8004d6e:	e00e      	b.n	8004d8e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10b      	bne.n	8004d8e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d004      	beq.n	8004d86 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004d7c:	2004      	movs	r0, #4
 8004d7e:	f000 fb68 	bl	8005452 <xQueueCreateMutex>
 8004d82:	61f8      	str	r0, [r7, #28]
 8004d84:	e003      	b.n	8004d8e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004d86:	2001      	movs	r0, #1
 8004d88:	f000 fb63 	bl	8005452 <xQueueCreateMutex>
 8004d8c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00c      	beq.n	8004dae <osMutexNew+0xee>
        if (attr != NULL) {
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <osMutexNew+0xe2>
          name = attr->name;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	e001      	b.n	8004da6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004da6:	68f9      	ldr	r1, [r7, #12]
 8004da8:	69f8      	ldr	r0, [r7, #28]
 8004daa:	f001 f8ab 	bl	8005f04 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d006      	beq.n	8004dc2 <osMutexNew+0x102>
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	f043 0301 	orr.w	r3, r3, #1
 8004dc0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004dc2:	69fb      	ldr	r3, [r7, #28]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3720      	adds	r7, #32
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f023 0301 	bic.w	r3, r3, #1
 8004ddc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dea:	f3ef 8305 	mrs	r3, IPSR
 8004dee:	60bb      	str	r3, [r7, #8]
  return(result);
 8004df0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004df6:	f06f 0305 	mvn.w	r3, #5
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	e02c      	b.n	8004e58 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d103      	bne.n	8004e0c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004e04:	f06f 0303 	mvn.w	r3, #3
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	e025      	b.n	8004e58 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d011      	beq.n	8004e36 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004e12:	6839      	ldr	r1, [r7, #0]
 8004e14:	6938      	ldr	r0, [r7, #16]
 8004e16:	f000 fb84 	bl	8005522 <xQueueTakeMutexRecursive>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d01b      	beq.n	8004e58 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004e26:	f06f 0301 	mvn.w	r3, #1
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	e014      	b.n	8004e58 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004e2e:	f06f 0302 	mvn.w	r3, #2
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	e010      	b.n	8004e58 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004e36:	6839      	ldr	r1, [r7, #0]
 8004e38:	6938      	ldr	r0, [r7, #16]
 8004e3a:	f000 fe2b 	bl	8005a94 <xQueueSemaphoreTake>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d009      	beq.n	8004e58 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004e4a:	f06f 0301 	mvn.w	r3, #1
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	e002      	b.n	8004e58 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004e52:	f06f 0302 	mvn.w	r3, #2
 8004e56:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004e58:	697b      	ldr	r3, [r7, #20]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b086      	sub	sp, #24
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f023 0301 	bic.w	r3, r3, #1
 8004e70:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e7e:	f3ef 8305 	mrs	r3, IPSR
 8004e82:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e84:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <osMutexRelease+0x30>
    stat = osErrorISR;
 8004e8a:	f06f 0305 	mvn.w	r3, #5
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	e01f      	b.n	8004ed2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d103      	bne.n	8004ea0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004e98:	f06f 0303 	mvn.w	r3, #3
 8004e9c:	617b      	str	r3, [r7, #20]
 8004e9e:	e018      	b.n	8004ed2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d009      	beq.n	8004eba <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004ea6:	6938      	ldr	r0, [r7, #16]
 8004ea8:	f000 fb06 	bl	80054b8 <xQueueGiveMutexRecursive>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d00f      	beq.n	8004ed2 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004eb2:	f06f 0302 	mvn.w	r3, #2
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	e00b      	b.n	8004ed2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004eba:	2300      	movs	r3, #0
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	6938      	ldr	r0, [r7, #16]
 8004ec2:	f000 fb65 	bl	8005590 <xQueueGenericSend>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d002      	beq.n	8004ed2 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004ecc:	f06f 0302 	mvn.w	r3, #2
 8004ed0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004ed2:	697b      	ldr	r3, [r7, #20]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08a      	sub	sp, #40	@ 0x28
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eec:	f3ef 8305 	mrs	r3, IPSR
 8004ef0:	613b      	str	r3, [r7, #16]
  return(result);
 8004ef2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d15f      	bne.n	8004fb8 <osMessageQueueNew+0xdc>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d05c      	beq.n	8004fb8 <osMessageQueueNew+0xdc>
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d059      	beq.n	8004fb8 <osMessageQueueNew+0xdc>
    mem = -1;
 8004f04:	f04f 33ff 	mov.w	r3, #4294967295
 8004f08:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d029      	beq.n	8004f64 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d012      	beq.n	8004f3e <osMessageQueueNew+0x62>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	2b4f      	cmp	r3, #79	@ 0x4f
 8004f1e:	d90e      	bls.n	8004f3e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	695a      	ldr	r2, [r3, #20]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	68b9      	ldr	r1, [r7, #8]
 8004f30:	fb01 f303 	mul.w	r3, r1, r3
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d302      	bcc.n	8004f3e <osMessageQueueNew+0x62>
        mem = 1;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	61bb      	str	r3, [r7, #24]
 8004f3c:	e014      	b.n	8004f68 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d110      	bne.n	8004f68 <osMessageQueueNew+0x8c>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10c      	bne.n	8004f68 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d108      	bne.n	8004f68 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d104      	bne.n	8004f68 <osMessageQueueNew+0x8c>
          mem = 0;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61bb      	str	r3, [r7, #24]
 8004f62:	e001      	b.n	8004f68 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d10b      	bne.n	8004f86 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691a      	ldr	r2, [r3, #16]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	2100      	movs	r1, #0
 8004f78:	9100      	str	r1, [sp, #0]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f973 	bl	8005268 <xQueueGenericCreateStatic>
 8004f82:	61f8      	str	r0, [r7, #28]
 8004f84:	e008      	b.n	8004f98 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d105      	bne.n	8004f98 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	68b9      	ldr	r1, [r7, #8]
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 f9e6 	bl	8005362 <xQueueGenericCreate>
 8004f96:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00c      	beq.n	8004fb8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <osMessageQueueNew+0xd0>
        name = attr->name;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	e001      	b.n	8004fb0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004fac:	2300      	movs	r3, #0
 8004fae:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004fb0:	6979      	ldr	r1, [r7, #20]
 8004fb2:	69f8      	ldr	r0, [r7, #28]
 8004fb4:	f000 ffa6 	bl	8005f04 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004fb8:	69fb      	ldr	r3, [r7, #28]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3720      	adds	r7, #32
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4a07      	ldr	r2, [pc, #28]	@ (8004ff0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004fd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	4a06      	ldr	r2, [pc, #24]	@ (8004ff4 <vApplicationGetIdleTaskMemory+0x30>)
 8004fda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2280      	movs	r2, #128	@ 0x80
 8004fe0:	601a      	str	r2, [r3, #0]
}
 8004fe2:	bf00      	nop
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	200001d4 	.word	0x200001d4
 8004ff4:	2000027c 	.word	0x2000027c

08004ff8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4a07      	ldr	r2, [pc, #28]	@ (8005024 <vApplicationGetTimerTaskMemory+0x2c>)
 8005008:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	4a06      	ldr	r2, [pc, #24]	@ (8005028 <vApplicationGetTimerTaskMemory+0x30>)
 800500e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005016:	601a      	str	r2, [r3, #0]
}
 8005018:	bf00      	nop
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	2000047c 	.word	0x2000047c
 8005028:	20000524 	.word	0x20000524

0800502c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f103 0208 	add.w	r2, r3, #8
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f04f 32ff 	mov.w	r2, #4294967295
 8005044:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f103 0208 	add.w	r2, r3, #8
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f103 0208 	add.w	r2, r3, #8
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005086:	b480      	push	{r7}
 8005088:	b085      	sub	sp, #20
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	601a      	str	r2, [r3, #0]
}
 80050c2:	bf00      	nop
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050ce:	b480      	push	{r7}
 80050d0:	b085      	sub	sp, #20
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e4:	d103      	bne.n	80050ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	e00c      	b.n	8005108 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3308      	adds	r3, #8
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	e002      	b.n	80050fc <vListInsert+0x2e>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	429a      	cmp	r2, r3
 8005106:	d2f6      	bcs.n	80050f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	601a      	str	r2, [r3, #0]
}
 8005134:	bf00      	nop
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6892      	ldr	r2, [r2, #8]
 8005156:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6852      	ldr	r2, [r2, #4]
 8005160:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	429a      	cmp	r2, r3
 800516a:	d103      	bne.n	8005174 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	1e5a      	subs	r2, r3, #1
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10b      	bne.n	80051c0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051ba:	bf00      	nop
 80051bc:	bf00      	nop
 80051be:	e7fd      	b.n	80051bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80051c0:	f002 fda2 	bl	8007d08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051cc:	68f9      	ldr	r1, [r7, #12]
 80051ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80051d0:	fb01 f303 	mul.w	r3, r1, r3
 80051d4:	441a      	add	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f0:	3b01      	subs	r3, #1
 80051f2:	68f9      	ldr	r1, [r7, #12]
 80051f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80051f6:	fb01 f303 	mul.w	r3, r1, r3
 80051fa:	441a      	add	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	22ff      	movs	r2, #255	@ 0xff
 8005204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	22ff      	movs	r2, #255	@ 0xff
 800520c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d114      	bne.n	8005240 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d01a      	beq.n	8005254 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	3310      	adds	r3, #16
 8005222:	4618      	mov	r0, r3
 8005224:	f001 fb28 	bl	8006878 <xTaskRemoveFromEventList>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d012      	beq.n	8005254 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800522e:	4b0d      	ldr	r3, [pc, #52]	@ (8005264 <xQueueGenericReset+0xd0>)
 8005230:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	e009      	b.n	8005254 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3310      	adds	r3, #16
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff fef1 	bl	800502c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	3324      	adds	r3, #36	@ 0x24
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff feec 	bl	800502c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005254:	f002 fd8a 	bl	8007d6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005258:	2301      	movs	r3, #1
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	e000ed04 	.word	0xe000ed04

08005268 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08e      	sub	sp, #56	@ 0x38
 800526c:	af02      	add	r7, sp, #8
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
 8005274:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10b      	bne.n	8005294 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800528e:	bf00      	nop
 8005290:	bf00      	nop
 8005292:	e7fd      	b.n	8005290 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10b      	bne.n	80052b2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800529a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052ac:	bf00      	nop
 80052ae:	bf00      	nop
 80052b0:	e7fd      	b.n	80052ae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <xQueueGenericCreateStatic+0x56>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <xQueueGenericCreateStatic+0x5a>
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <xQueueGenericCreateStatic+0x5c>
 80052c2:	2300      	movs	r3, #0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10b      	bne.n	80052e0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	623b      	str	r3, [r7, #32]
}
 80052da:	bf00      	nop
 80052dc:	bf00      	nop
 80052de:	e7fd      	b.n	80052dc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d102      	bne.n	80052ec <xQueueGenericCreateStatic+0x84>
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <xQueueGenericCreateStatic+0x88>
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <xQueueGenericCreateStatic+0x8a>
 80052f0:	2300      	movs	r3, #0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10b      	bne.n	800530e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	61fb      	str	r3, [r7, #28]
}
 8005308:	bf00      	nop
 800530a:	bf00      	nop
 800530c:	e7fd      	b.n	800530a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800530e:	2350      	movs	r3, #80	@ 0x50
 8005310:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2b50      	cmp	r3, #80	@ 0x50
 8005316:	d00b      	beq.n	8005330 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	61bb      	str	r3, [r7, #24]
}
 800532a:	bf00      	nop
 800532c:	bf00      	nop
 800532e:	e7fd      	b.n	800532c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005330:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00d      	beq.n	8005358 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800533c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005344:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	4613      	mov	r3, r2
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	68b9      	ldr	r1, [r7, #8]
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 f840 	bl	80053d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800535a:	4618      	mov	r0, r3
 800535c:	3730      	adds	r7, #48	@ 0x30
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005362:	b580      	push	{r7, lr}
 8005364:	b08a      	sub	sp, #40	@ 0x28
 8005366:	af02      	add	r7, sp, #8
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	4613      	mov	r3, r2
 800536e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10b      	bne.n	800538e <xQueueGenericCreate+0x2c>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	613b      	str	r3, [r7, #16]
}
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	e7fd      	b.n	800538a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	fb02 f303 	mul.w	r3, r2, r3
 8005396:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	3350      	adds	r3, #80	@ 0x50
 800539c:	4618      	mov	r0, r3
 800539e:	f002 fdd5 	bl	8007f4c <pvPortMalloc>
 80053a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d011      	beq.n	80053ce <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	3350      	adds	r3, #80	@ 0x50
 80053b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053bc:	79fa      	ldrb	r2, [r7, #7]
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	4613      	mov	r3, r2
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	68b9      	ldr	r1, [r7, #8]
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 f805 	bl	80053d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80053ce:	69bb      	ldr	r3, [r7, #24]
	}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3720      	adds	r7, #32
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d103      	bne.n	80053f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	e002      	b.n	80053fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005406:	2101      	movs	r1, #1
 8005408:	69b8      	ldr	r0, [r7, #24]
 800540a:	f7ff fec3 	bl	8005194 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	78fa      	ldrb	r2, [r7, #3]
 8005412:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005416:	bf00      	nop
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800541e:	b580      	push	{r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00e      	beq.n	800544a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800543e:	2300      	movs	r3, #0
 8005440:	2200      	movs	r2, #0
 8005442:	2100      	movs	r1, #0
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f8a3 	bl	8005590 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800544a:	bf00      	nop
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005452:	b580      	push	{r7, lr}
 8005454:	b086      	sub	sp, #24
 8005456:	af00      	add	r7, sp, #0
 8005458:	4603      	mov	r3, r0
 800545a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800545c:	2301      	movs	r3, #1
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	2300      	movs	r3, #0
 8005462:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005464:	79fb      	ldrb	r3, [r7, #7]
 8005466:	461a      	mov	r2, r3
 8005468:	6939      	ldr	r1, [r7, #16]
 800546a:	6978      	ldr	r0, [r7, #20]
 800546c:	f7ff ff79 	bl	8005362 <xQueueGenericCreate>
 8005470:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f7ff ffd3 	bl	800541e <prvInitialiseMutex>

		return xNewQueue;
 8005478:	68fb      	ldr	r3, [r7, #12]
	}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005482:	b580      	push	{r7, lr}
 8005484:	b088      	sub	sp, #32
 8005486:	af02      	add	r7, sp, #8
 8005488:	4603      	mov	r3, r0
 800548a:	6039      	str	r1, [r7, #0]
 800548c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800548e:	2301      	movs	r3, #1
 8005490:	617b      	str	r3, [r7, #20]
 8005492:	2300      	movs	r3, #0
 8005494:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005496:	79fb      	ldrb	r3, [r7, #7]
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2200      	movs	r2, #0
 800549e:	6939      	ldr	r1, [r7, #16]
 80054a0:	6978      	ldr	r0, [r7, #20]
 80054a2:	f7ff fee1 	bl	8005268 <xQueueGenericCreateStatic>
 80054a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f7ff ffb8 	bl	800541e <prvInitialiseMutex>

		return xNewQueue;
 80054ae:	68fb      	ldr	r3, [r7, #12]
	}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3718      	adds	r7, #24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80054b8:	b590      	push	{r4, r7, lr}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10b      	bne.n	80054e2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	60fb      	str	r3, [r7, #12]
}
 80054dc:	bf00      	nop
 80054de:	bf00      	nop
 80054e0:	e7fd      	b.n	80054de <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	689c      	ldr	r4, [r3, #8]
 80054e6:	f001 fb8d 	bl	8006c04 <xTaskGetCurrentTaskHandle>
 80054ea:	4603      	mov	r3, r0
 80054ec:	429c      	cmp	r4, r3
 80054ee:	d111      	bne.n	8005514 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	1e5a      	subs	r2, r3, #1
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d105      	bne.n	800550e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005502:	2300      	movs	r3, #0
 8005504:	2200      	movs	r2, #0
 8005506:	2100      	movs	r1, #0
 8005508:	6938      	ldr	r0, [r7, #16]
 800550a:	f000 f841 	bl	8005590 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800550e:	2301      	movs	r3, #1
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	e001      	b.n	8005518 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005518:	697b      	ldr	r3, [r7, #20]
	}
 800551a:	4618      	mov	r0, r3
 800551c:	371c      	adds	r7, #28
 800551e:	46bd      	mov	sp, r7
 8005520:	bd90      	pop	{r4, r7, pc}

08005522 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005522:	b590      	push	{r4, r7, lr}
 8005524:	b087      	sub	sp, #28
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
 800552a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10b      	bne.n	800554e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	60fb      	str	r3, [r7, #12]
}
 8005548:	bf00      	nop
 800554a:	bf00      	nop
 800554c:	e7fd      	b.n	800554a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	689c      	ldr	r4, [r3, #8]
 8005552:	f001 fb57 	bl	8006c04 <xTaskGetCurrentTaskHandle>
 8005556:	4603      	mov	r3, r0
 8005558:	429c      	cmp	r4, r3
 800555a:	d107      	bne.n	800556c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005566:	2301      	movs	r3, #1
 8005568:	617b      	str	r3, [r7, #20]
 800556a:	e00c      	b.n	8005586 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800556c:	6839      	ldr	r1, [r7, #0]
 800556e:	6938      	ldr	r0, [r7, #16]
 8005570:	f000 fa90 	bl	8005a94 <xQueueSemaphoreTake>
 8005574:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d004      	beq.n	8005586 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005586:	697b      	ldr	r3, [r7, #20]
	}
 8005588:	4618      	mov	r0, r3
 800558a:	371c      	adds	r7, #28
 800558c:	46bd      	mov	sp, r7
 800558e:	bd90      	pop	{r4, r7, pc}

08005590 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b08e      	sub	sp, #56	@ 0x38
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800559e:	2300      	movs	r3, #0
 80055a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80055a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10b      	bne.n	80055c4 <xQueueGenericSend+0x34>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80055be:	bf00      	nop
 80055c0:	bf00      	nop
 80055c2:	e7fd      	b.n	80055c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d103      	bne.n	80055d2 <xQueueGenericSend+0x42>
 80055ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <xQueueGenericSend+0x46>
 80055d2:	2301      	movs	r3, #1
 80055d4:	e000      	b.n	80055d8 <xQueueGenericSend+0x48>
 80055d6:	2300      	movs	r3, #0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10b      	bne.n	80055f4 <xQueueGenericSend+0x64>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80055ee:	bf00      	nop
 80055f0:	bf00      	nop
 80055f2:	e7fd      	b.n	80055f0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d103      	bne.n	8005602 <xQueueGenericSend+0x72>
 80055fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <xQueueGenericSend+0x76>
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <xQueueGenericSend+0x78>
 8005606:	2300      	movs	r3, #0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10b      	bne.n	8005624 <xQueueGenericSend+0x94>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	623b      	str	r3, [r7, #32]
}
 800561e:	bf00      	nop
 8005620:	bf00      	nop
 8005622:	e7fd      	b.n	8005620 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005624:	f001 fafe 	bl	8006c24 <xTaskGetSchedulerState>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d102      	bne.n	8005634 <xQueueGenericSend+0xa4>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <xQueueGenericSend+0xa8>
 8005634:	2301      	movs	r3, #1
 8005636:	e000      	b.n	800563a <xQueueGenericSend+0xaa>
 8005638:	2300      	movs	r3, #0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10b      	bne.n	8005656 <xQueueGenericSend+0xc6>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	61fb      	str	r3, [r7, #28]
}
 8005650:	bf00      	nop
 8005652:	bf00      	nop
 8005654:	e7fd      	b.n	8005652 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005656:	f002 fb57 	bl	8007d08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800565a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800565e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005662:	429a      	cmp	r2, r3
 8005664:	d302      	bcc.n	800566c <xQueueGenericSend+0xdc>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b02      	cmp	r3, #2
 800566a:	d129      	bne.n	80056c0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005672:	f000 fb37 	bl	8005ce4 <prvCopyDataToQueue>
 8005676:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567c:	2b00      	cmp	r3, #0
 800567e:	d010      	beq.n	80056a2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005682:	3324      	adds	r3, #36	@ 0x24
 8005684:	4618      	mov	r0, r3
 8005686:	f001 f8f7 	bl	8006878 <xTaskRemoveFromEventList>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d013      	beq.n	80056b8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005690:	4b3f      	ldr	r3, [pc, #252]	@ (8005790 <xQueueGenericSend+0x200>)
 8005692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	e00a      	b.n	80056b8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80056a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d007      	beq.n	80056b8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80056a8:	4b39      	ldr	r3, [pc, #228]	@ (8005790 <xQueueGenericSend+0x200>)
 80056aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80056b8:	f002 fb58 	bl	8007d6c <vPortExitCritical>
				return pdPASS;
 80056bc:	2301      	movs	r3, #1
 80056be:	e063      	b.n	8005788 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d103      	bne.n	80056ce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056c6:	f002 fb51 	bl	8007d6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80056ca:	2300      	movs	r3, #0
 80056cc:	e05c      	b.n	8005788 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d106      	bne.n	80056e2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056d4:	f107 0314 	add.w	r3, r7, #20
 80056d8:	4618      	mov	r0, r3
 80056da:	f001 f931 	bl	8006940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056de:	2301      	movs	r3, #1
 80056e0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056e2:	f002 fb43 	bl	8007d6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056e6:	f000 fe99 	bl	800641c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056ea:	f002 fb0d 	bl	8007d08 <vPortEnterCritical>
 80056ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056f4:	b25b      	sxtb	r3, r3
 80056f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fa:	d103      	bne.n	8005704 <xQueueGenericSend+0x174>
 80056fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005706:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800570a:	b25b      	sxtb	r3, r3
 800570c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005710:	d103      	bne.n	800571a <xQueueGenericSend+0x18a>
 8005712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800571a:	f002 fb27 	bl	8007d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800571e:	1d3a      	adds	r2, r7, #4
 8005720:	f107 0314 	add.w	r3, r7, #20
 8005724:	4611      	mov	r1, r2
 8005726:	4618      	mov	r0, r3
 8005728:	f001 f920 	bl	800696c <xTaskCheckForTimeOut>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d124      	bne.n	800577c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005732:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005734:	f000 fbce 	bl	8005ed4 <prvIsQueueFull>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d018      	beq.n	8005770 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800573e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005740:	3310      	adds	r3, #16
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	4611      	mov	r1, r2
 8005746:	4618      	mov	r0, r3
 8005748:	f001 f844 	bl	80067d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800574c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800574e:	f000 fb59 	bl	8005e04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005752:	f000 fe71 	bl	8006438 <xTaskResumeAll>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	f47f af7c 	bne.w	8005656 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800575e:	4b0c      	ldr	r3, [pc, #48]	@ (8005790 <xQueueGenericSend+0x200>)
 8005760:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	e772      	b.n	8005656 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005770:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005772:	f000 fb47 	bl	8005e04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005776:	f000 fe5f 	bl	8006438 <xTaskResumeAll>
 800577a:	e76c      	b.n	8005656 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800577c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800577e:	f000 fb41 	bl	8005e04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005782:	f000 fe59 	bl	8006438 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005786:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005788:	4618      	mov	r0, r3
 800578a:	3738      	adds	r7, #56	@ 0x38
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	e000ed04 	.word	0xe000ed04

08005794 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b090      	sub	sp, #64	@ 0x40
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80057a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10b      	bne.n	80057c4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80057be:	bf00      	nop
 80057c0:	bf00      	nop
 80057c2:	e7fd      	b.n	80057c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d103      	bne.n	80057d2 <xQueueGenericSendFromISR+0x3e>
 80057ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <xQueueGenericSendFromISR+0x42>
 80057d2:	2301      	movs	r3, #1
 80057d4:	e000      	b.n	80057d8 <xQueueGenericSendFromISR+0x44>
 80057d6:	2300      	movs	r3, #0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10b      	bne.n	80057f4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80057dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80057ee:	bf00      	nop
 80057f0:	bf00      	nop
 80057f2:	e7fd      	b.n	80057f0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d103      	bne.n	8005802 <xQueueGenericSendFromISR+0x6e>
 80057fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d101      	bne.n	8005806 <xQueueGenericSendFromISR+0x72>
 8005802:	2301      	movs	r3, #1
 8005804:	e000      	b.n	8005808 <xQueueGenericSendFromISR+0x74>
 8005806:	2300      	movs	r3, #0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10b      	bne.n	8005824 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800580c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	623b      	str	r3, [r7, #32]
}
 800581e:	bf00      	nop
 8005820:	bf00      	nop
 8005822:	e7fd      	b.n	8005820 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005824:	f002 fb50 	bl	8007ec8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005828:	f3ef 8211 	mrs	r2, BASEPRI
 800582c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	61fa      	str	r2, [r7, #28]
 800583e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005840:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005842:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005846:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584c:	429a      	cmp	r2, r3
 800584e:	d302      	bcc.n	8005856 <xQueueGenericSendFromISR+0xc2>
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2b02      	cmp	r3, #2
 8005854:	d12f      	bne.n	80058b6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005858:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800585c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005864:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	68b9      	ldr	r1, [r7, #8]
 800586a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800586c:	f000 fa3a 	bl	8005ce4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005870:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005878:	d112      	bne.n	80058a0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800587a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587e:	2b00      	cmp	r3, #0
 8005880:	d016      	beq.n	80058b0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005884:	3324      	adds	r3, #36	@ 0x24
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fff6 	bl	8006878 <xTaskRemoveFromEventList>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00e      	beq.n	80058b0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00b      	beq.n	80058b0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	e007      	b.n	80058b0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80058a4:	3301      	adds	r3, #1
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	b25a      	sxtb	r2, r3
 80058aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80058b0:	2301      	movs	r3, #1
 80058b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80058b4:	e001      	b.n	80058ba <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058b6:	2300      	movs	r3, #0
 80058b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058bc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80058c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3740      	adds	r7, #64	@ 0x40
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08c      	sub	sp, #48	@ 0x30
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80058dc:	2300      	movs	r3, #0
 80058de:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80058e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10b      	bne.n	8005902 <xQueueReceive+0x32>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	623b      	str	r3, [r7, #32]
}
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	e7fd      	b.n	80058fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d103      	bne.n	8005910 <xQueueReceive+0x40>
 8005908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <xQueueReceive+0x44>
 8005910:	2301      	movs	r3, #1
 8005912:	e000      	b.n	8005916 <xQueueReceive+0x46>
 8005914:	2300      	movs	r3, #0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10b      	bne.n	8005932 <xQueueReceive+0x62>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	61fb      	str	r3, [r7, #28]
}
 800592c:	bf00      	nop
 800592e:	bf00      	nop
 8005930:	e7fd      	b.n	800592e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005932:	f001 f977 	bl	8006c24 <xTaskGetSchedulerState>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <xQueueReceive+0x72>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <xQueueReceive+0x76>
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <xQueueReceive+0x78>
 8005946:	2300      	movs	r3, #0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10b      	bne.n	8005964 <xQueueReceive+0x94>
	__asm volatile
 800594c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005950:	f383 8811 	msr	BASEPRI, r3
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	61bb      	str	r3, [r7, #24]
}
 800595e:	bf00      	nop
 8005960:	bf00      	nop
 8005962:	e7fd      	b.n	8005960 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005964:	f002 f9d0 	bl	8007d08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01f      	beq.n	80059b4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005974:	68b9      	ldr	r1, [r7, #8]
 8005976:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005978:	f000 fa1e 	bl	8005db8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597e:	1e5a      	subs	r2, r3, #1
 8005980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005982:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00f      	beq.n	80059ac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800598c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598e:	3310      	adds	r3, #16
 8005990:	4618      	mov	r0, r3
 8005992:	f000 ff71 	bl	8006878 <xTaskRemoveFromEventList>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d007      	beq.n	80059ac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800599c:	4b3c      	ldr	r3, [pc, #240]	@ (8005a90 <xQueueReceive+0x1c0>)
 800599e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059ac:	f002 f9de 	bl	8007d6c <vPortExitCritical>
				return pdPASS;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e069      	b.n	8005a88 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d103      	bne.n	80059c2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059ba:	f002 f9d7 	bl	8007d6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059be:	2300      	movs	r3, #0
 80059c0:	e062      	b.n	8005a88 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d106      	bne.n	80059d6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059c8:	f107 0310 	add.w	r3, r7, #16
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 ffb7 	bl	8006940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059d2:	2301      	movs	r3, #1
 80059d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059d6:	f002 f9c9 	bl	8007d6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059da:	f000 fd1f 	bl	800641c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059de:	f002 f993 	bl	8007d08 <vPortEnterCritical>
 80059e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059e8:	b25b      	sxtb	r3, r3
 80059ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ee:	d103      	bne.n	80059f8 <xQueueReceive+0x128>
 80059f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059fe:	b25b      	sxtb	r3, r3
 8005a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a04:	d103      	bne.n	8005a0e <xQueueReceive+0x13e>
 8005a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a0e:	f002 f9ad 	bl	8007d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a12:	1d3a      	adds	r2, r7, #4
 8005a14:	f107 0310 	add.w	r3, r7, #16
 8005a18:	4611      	mov	r1, r2
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 ffa6 	bl	800696c <xTaskCheckForTimeOut>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d123      	bne.n	8005a6e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a28:	f000 fa3e 	bl	8005ea8 <prvIsQueueEmpty>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d017      	beq.n	8005a62 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a34:	3324      	adds	r3, #36	@ 0x24
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	4611      	mov	r1, r2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 feca 	bl	80067d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a42:	f000 f9df 	bl	8005e04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a46:	f000 fcf7 	bl	8006438 <xTaskResumeAll>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d189      	bne.n	8005964 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005a50:	4b0f      	ldr	r3, [pc, #60]	@ (8005a90 <xQueueReceive+0x1c0>)
 8005a52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	e780      	b.n	8005964 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a64:	f000 f9ce 	bl	8005e04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a68:	f000 fce6 	bl	8006438 <xTaskResumeAll>
 8005a6c:	e77a      	b.n	8005964 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a70:	f000 f9c8 	bl	8005e04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a74:	f000 fce0 	bl	8006438 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a7a:	f000 fa15 	bl	8005ea8 <prvIsQueueEmpty>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f43f af6f 	beq.w	8005964 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a86:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3730      	adds	r7, #48	@ 0x30
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	e000ed04 	.word	0xe000ed04

08005a94 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08e      	sub	sp, #56	@ 0x38
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10b      	bne.n	8005ac8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	623b      	str	r3, [r7, #32]
}
 8005ac2:	bf00      	nop
 8005ac4:	bf00      	nop
 8005ac6:	e7fd      	b.n	8005ac4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00b      	beq.n	8005ae8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	61fb      	str	r3, [r7, #28]
}
 8005ae2:	bf00      	nop
 8005ae4:	bf00      	nop
 8005ae6:	e7fd      	b.n	8005ae4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ae8:	f001 f89c 	bl	8006c24 <xTaskGetSchedulerState>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d102      	bne.n	8005af8 <xQueueSemaphoreTake+0x64>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <xQueueSemaphoreTake+0x68>
 8005af8:	2301      	movs	r3, #1
 8005afa:	e000      	b.n	8005afe <xQueueSemaphoreTake+0x6a>
 8005afc:	2300      	movs	r3, #0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10b      	bne.n	8005b1a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	61bb      	str	r3, [r7, #24]
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop
 8005b18:	e7fd      	b.n	8005b16 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b1a:	f002 f8f5 	bl	8007d08 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b22:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d024      	beq.n	8005b74 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2c:	1e5a      	subs	r2, r3, #1
 8005b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b30:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d104      	bne.n	8005b44 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005b3a:	f001 f9ed 	bl	8006f18 <pvTaskIncrementMutexHeldCount>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b42:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00f      	beq.n	8005b6c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b4e:	3310      	adds	r3, #16
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 fe91 	bl	8006878 <xTaskRemoveFromEventList>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d007      	beq.n	8005b6c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b5c:	4b54      	ldr	r3, [pc, #336]	@ (8005cb0 <xQueueSemaphoreTake+0x21c>)
 8005b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b6c:	f002 f8fe 	bl	8007d6c <vPortExitCritical>
				return pdPASS;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e098      	b.n	8005ca6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d112      	bne.n	8005ba0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00b      	beq.n	8005b98 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	617b      	str	r3, [r7, #20]
}
 8005b92:	bf00      	nop
 8005b94:	bf00      	nop
 8005b96:	e7fd      	b.n	8005b94 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b98:	f002 f8e8 	bl	8007d6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	e082      	b.n	8005ca6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d106      	bne.n	8005bb4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ba6:	f107 030c 	add.w	r3, r7, #12
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fec8 	bl	8006940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bb4:	f002 f8da 	bl	8007d6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bb8:	f000 fc30 	bl	800641c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bbc:	f002 f8a4 	bl	8007d08 <vPortEnterCritical>
 8005bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005bc6:	b25b      	sxtb	r3, r3
 8005bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bcc:	d103      	bne.n	8005bd6 <xQueueSemaphoreTake+0x142>
 8005bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bdc:	b25b      	sxtb	r3, r3
 8005bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be2:	d103      	bne.n	8005bec <xQueueSemaphoreTake+0x158>
 8005be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bec:	f002 f8be 	bl	8007d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bf0:	463a      	mov	r2, r7
 8005bf2:	f107 030c 	add.w	r3, r7, #12
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 feb7 	bl	800696c <xTaskCheckForTimeOut>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d132      	bne.n	8005c6a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c06:	f000 f94f 	bl	8005ea8 <prvIsQueueEmpty>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d026      	beq.n	8005c5e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d109      	bne.n	8005c2c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005c18:	f002 f876 	bl	8007d08 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f001 f81d 	bl	8006c60 <xTaskPriorityInherit>
 8005c26:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005c28:	f002 f8a0 	bl	8007d6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2e:	3324      	adds	r3, #36	@ 0x24
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	4611      	mov	r1, r2
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 fdcd 	bl	80067d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c3c:	f000 f8e2 	bl	8005e04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c40:	f000 fbfa 	bl	8006438 <xTaskResumeAll>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f47f af67 	bne.w	8005b1a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005c4c:	4b18      	ldr	r3, [pc, #96]	@ (8005cb0 <xQueueSemaphoreTake+0x21c>)
 8005c4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	e75d      	b.n	8005b1a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005c5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c60:	f000 f8d0 	bl	8005e04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c64:	f000 fbe8 	bl	8006438 <xTaskResumeAll>
 8005c68:	e757      	b.n	8005b1a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005c6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c6c:	f000 f8ca 	bl	8005e04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c70:	f000 fbe2 	bl	8006438 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c76:	f000 f917 	bl	8005ea8 <prvIsQueueEmpty>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f43f af4c 	beq.w	8005b1a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00d      	beq.n	8005ca4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005c88:	f002 f83e 	bl	8007d08 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c8e:	f000 f811 	bl	8005cb4 <prvGetDisinheritPriorityAfterTimeout>
 8005c92:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f001 f8b8 	bl	8006e10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005ca0:	f002 f864 	bl	8007d6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ca4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3738      	adds	r7, #56	@ 0x38
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	e000ed04 	.word	0xe000ed04

08005cb4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d006      	beq.n	8005cd2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	e001      	b.n	8005cd6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
	}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10d      	bne.n	8005d1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d14d      	bne.n	8005da6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f001 f80e 	bl	8006d30 <xTaskPriorityDisinherit>
 8005d14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	609a      	str	r2, [r3, #8]
 8005d1c:	e043      	b.n	8005da6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d119      	bne.n	8005d58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6858      	ldr	r0, [r3, #4]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	68b9      	ldr	r1, [r7, #8]
 8005d30:	f002 fbb6 	bl	80084a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3c:	441a      	add	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d32b      	bcc.n	8005da6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	605a      	str	r2, [r3, #4]
 8005d56:	e026      	b.n	8005da6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	68d8      	ldr	r0, [r3, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d60:	461a      	mov	r2, r3
 8005d62:	68b9      	ldr	r1, [r7, #8]
 8005d64:	f002 fb9c 	bl	80084a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d70:	425b      	negs	r3, r3
 8005d72:	441a      	add	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	68da      	ldr	r2, [r3, #12]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d207      	bcs.n	8005d94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8c:	425b      	negs	r3, r3
 8005d8e:	441a      	add	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d105      	bne.n	8005da6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	3b01      	subs	r3, #1
 8005da4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005dae:	697b      	ldr	r3, [r7, #20]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d018      	beq.n	8005dfc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd2:	441a      	add	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68da      	ldr	r2, [r3, #12]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d303      	bcc.n	8005dec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68d9      	ldr	r1, [r3, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df4:	461a      	mov	r2, r3
 8005df6:	6838      	ldr	r0, [r7, #0]
 8005df8:	f002 fb52 	bl	80084a0 <memcpy>
	}
}
 8005dfc:	bf00      	nop
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e0c:	f001 ff7c 	bl	8007d08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e18:	e011      	b.n	8005e3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d012      	beq.n	8005e48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	3324      	adds	r3, #36	@ 0x24
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 fd26 	bl	8006878 <xTaskRemoveFromEventList>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e32:	f000 fdff 	bl	8006a34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	dce9      	bgt.n	8005e1a <prvUnlockQueue+0x16>
 8005e46:	e000      	b.n	8005e4a <prvUnlockQueue+0x46>
					break;
 8005e48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	22ff      	movs	r2, #255	@ 0xff
 8005e4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005e52:	f001 ff8b 	bl	8007d6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e56:	f001 ff57 	bl	8007d08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e62:	e011      	b.n	8005e88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d012      	beq.n	8005e92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3310      	adds	r3, #16
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 fd01 	bl	8006878 <xTaskRemoveFromEventList>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005e7c:	f000 fdda 	bl	8006a34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e80:	7bbb      	ldrb	r3, [r7, #14]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	dce9      	bgt.n	8005e64 <prvUnlockQueue+0x60>
 8005e90:	e000      	b.n	8005e94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	22ff      	movs	r2, #255	@ 0xff
 8005e98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005e9c:	f001 ff66 	bl	8007d6c <vPortExitCritical>
}
 8005ea0:	bf00      	nop
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005eb0:	f001 ff2a 	bl	8007d08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d102      	bne.n	8005ec2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	e001      	b.n	8005ec6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ec6:	f001 ff51 	bl	8007d6c <vPortExitCritical>

	return xReturn;
 8005eca:	68fb      	ldr	r3, [r7, #12]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005edc:	f001 ff14 	bl	8007d08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d102      	bne.n	8005ef2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005eec:	2301      	movs	r3, #1
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	e001      	b.n	8005ef6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ef6:	f001 ff39 	bl	8007d6c <vPortExitCritical>

	return xReturn;
 8005efa:	68fb      	ldr	r3, [r7, #12]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60fb      	str	r3, [r7, #12]
 8005f12:	e014      	b.n	8005f3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005f14:	4a0f      	ldr	r2, [pc, #60]	@ (8005f54 <vQueueAddToRegistry+0x50>)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10b      	bne.n	8005f38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005f20:	490c      	ldr	r1, [pc, #48]	@ (8005f54 <vQueueAddToRegistry+0x50>)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8005f54 <vQueueAddToRegistry+0x50>)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	4413      	add	r3, r2
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005f36:	e006      	b.n	8005f46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	60fb      	str	r3, [r7, #12]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2b07      	cmp	r3, #7
 8005f42:	d9e7      	bls.n	8005f14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	20000924 	.word	0x20000924

08005f58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f68:	f001 fece 	bl	8007d08 <vPortEnterCritical>
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f72:	b25b      	sxtb	r3, r3
 8005f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f78:	d103      	bne.n	8005f82 <vQueueWaitForMessageRestricted+0x2a>
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f88:	b25b      	sxtb	r3, r3
 8005f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8e:	d103      	bne.n	8005f98 <vQueueWaitForMessageRestricted+0x40>
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f98:	f001 fee8 	bl	8007d6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d106      	bne.n	8005fb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	3324      	adds	r3, #36	@ 0x24
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	68b9      	ldr	r1, [r7, #8]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 fc37 	bl	8006820 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005fb2:	6978      	ldr	r0, [r7, #20]
 8005fb4:	f7ff ff26 	bl	8005e04 <prvUnlockQueue>
	}
 8005fb8:	bf00      	nop
 8005fba:	3718      	adds	r7, #24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08e      	sub	sp, #56	@ 0x38
 8005fc4:	af04      	add	r7, sp, #16
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10b      	bne.n	8005fec <xTaskCreateStatic+0x2c>
	__asm volatile
 8005fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	623b      	str	r3, [r7, #32]
}
 8005fe6:	bf00      	nop
 8005fe8:	bf00      	nop
 8005fea:	e7fd      	b.n	8005fe8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10b      	bne.n	800600a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	61fb      	str	r3, [r7, #28]
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop
 8006008:	e7fd      	b.n	8006006 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800600a:	23a8      	movs	r3, #168	@ 0xa8
 800600c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	2ba8      	cmp	r3, #168	@ 0xa8
 8006012:	d00b      	beq.n	800602c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	61bb      	str	r3, [r7, #24]
}
 8006026:	bf00      	nop
 8006028:	bf00      	nop
 800602a:	e7fd      	b.n	8006028 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800602c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800602e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006030:	2b00      	cmp	r3, #0
 8006032:	d01e      	beq.n	8006072 <xTaskCreateStatic+0xb2>
 8006034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006036:	2b00      	cmp	r3, #0
 8006038:	d01b      	beq.n	8006072 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800603a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006040:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006042:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006046:	2202      	movs	r2, #2
 8006048:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800604c:	2300      	movs	r3, #0
 800604e:	9303      	str	r3, [sp, #12]
 8006050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006052:	9302      	str	r3, [sp, #8]
 8006054:	f107 0314 	add.w	r3, r7, #20
 8006058:	9301      	str	r3, [sp, #4]
 800605a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f851 	bl	800610c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800606a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800606c:	f000 f8f6 	bl	800625c <prvAddNewTaskToReadyList>
 8006070:	e001      	b.n	8006076 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006072:	2300      	movs	r3, #0
 8006074:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006076:	697b      	ldr	r3, [r7, #20]
	}
 8006078:	4618      	mov	r0, r3
 800607a:	3728      	adds	r7, #40	@ 0x28
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08c      	sub	sp, #48	@ 0x30
 8006084:	af04      	add	r7, sp, #16
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	603b      	str	r3, [r7, #0]
 800608c:	4613      	mov	r3, r2
 800608e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006090:	88fb      	ldrh	r3, [r7, #6]
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4618      	mov	r0, r3
 8006096:	f001 ff59 	bl	8007f4c <pvPortMalloc>
 800609a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00e      	beq.n	80060c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80060a2:	20a8      	movs	r0, #168	@ 0xa8
 80060a4:	f001 ff52 	bl	8007f4c <pvPortMalloc>
 80060a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80060b6:	e005      	b.n	80060c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80060b8:	6978      	ldr	r0, [r7, #20]
 80060ba:	f002 f815 	bl	80080e8 <vPortFree>
 80060be:	e001      	b.n	80060c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80060c0:	2300      	movs	r3, #0
 80060c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d017      	beq.n	80060fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060d2:	88fa      	ldrh	r2, [r7, #6]
 80060d4:	2300      	movs	r3, #0
 80060d6:	9303      	str	r3, [sp, #12]
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	9302      	str	r3, [sp, #8]
 80060dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	68b9      	ldr	r1, [r7, #8]
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f000 f80f 	bl	800610c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060ee:	69f8      	ldr	r0, [r7, #28]
 80060f0:	f000 f8b4 	bl	800625c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060f4:	2301      	movs	r3, #1
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	e002      	b.n	8006100 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060fa:	f04f 33ff 	mov.w	r3, #4294967295
 80060fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006100:	69bb      	ldr	r3, [r7, #24]
	}
 8006102:	4618      	mov	r0, r3
 8006104:	3720      	adds	r7, #32
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b088      	sub	sp, #32
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800611a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	461a      	mov	r2, r3
 8006124:	21a5      	movs	r1, #165	@ 0xa5
 8006126:	f002 f921 	bl	800836c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800612a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006134:	3b01      	subs	r3, #1
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	f023 0307 	bic.w	r3, r3, #7
 8006142:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	f003 0307 	and.w	r3, r3, #7
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00b      	beq.n	8006166 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	617b      	str	r3, [r7, #20]
}
 8006160:	bf00      	nop
 8006162:	bf00      	nop
 8006164:	e7fd      	b.n	8006162 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d01f      	beq.n	80061ac <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800616c:	2300      	movs	r3, #0
 800616e:	61fb      	str	r3, [r7, #28]
 8006170:	e012      	b.n	8006198 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	4413      	add	r3, r2
 8006178:	7819      	ldrb	r1, [r3, #0]
 800617a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	4413      	add	r3, r2
 8006180:	3334      	adds	r3, #52	@ 0x34
 8006182:	460a      	mov	r2, r1
 8006184:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	4413      	add	r3, r2
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d006      	beq.n	80061a0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	3301      	adds	r3, #1
 8006196:	61fb      	str	r3, [r7, #28]
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	2b0f      	cmp	r3, #15
 800619c:	d9e9      	bls.n	8006172 <prvInitialiseNewTask+0x66>
 800619e:	e000      	b.n	80061a2 <prvInitialiseNewTask+0x96>
			{
				break;
 80061a0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061aa:	e003      	b.n	80061b4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80061ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b6:	2b37      	cmp	r3, #55	@ 0x37
 80061b8:	d901      	bls.n	80061be <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061ba:	2337      	movs	r3, #55	@ 0x37
 80061bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80061be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061c8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80061ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061cc:	2200      	movs	r2, #0
 80061ce:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d2:	3304      	adds	r3, #4
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fe ff49 	bl	800506c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061dc:	3318      	adds	r3, #24
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fe ff44 	bl	800506c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80061f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061f8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fc:	2200      	movs	r2, #0
 80061fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006204:	2200      	movs	r2, #0
 8006206:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800620a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620c:	3354      	adds	r3, #84	@ 0x54
 800620e:	224c      	movs	r2, #76	@ 0x4c
 8006210:	2100      	movs	r1, #0
 8006212:	4618      	mov	r0, r3
 8006214:	f002 f8aa 	bl	800836c <memset>
 8006218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621a:	4a0d      	ldr	r2, [pc, #52]	@ (8006250 <prvInitialiseNewTask+0x144>)
 800621c:	659a      	str	r2, [r3, #88]	@ 0x58
 800621e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006220:	4a0c      	ldr	r2, [pc, #48]	@ (8006254 <prvInitialiseNewTask+0x148>)
 8006222:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006226:	4a0c      	ldr	r2, [pc, #48]	@ (8006258 <prvInitialiseNewTask+0x14c>)
 8006228:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	68f9      	ldr	r1, [r7, #12]
 800622e:	69b8      	ldr	r0, [r7, #24]
 8006230:	f001 fc3c 	bl	8007aac <pxPortInitialiseStack>
 8006234:	4602      	mov	r2, r0
 8006236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006238:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800623a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006246:	bf00      	nop
 8006248:	3720      	adds	r7, #32
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20004bb8 	.word	0x20004bb8
 8006254:	20004c20 	.word	0x20004c20
 8006258:	20004c88 	.word	0x20004c88

0800625c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006264:	f001 fd50 	bl	8007d08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006268:	4b2d      	ldr	r3, [pc, #180]	@ (8006320 <prvAddNewTaskToReadyList+0xc4>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3301      	adds	r3, #1
 800626e:	4a2c      	ldr	r2, [pc, #176]	@ (8006320 <prvAddNewTaskToReadyList+0xc4>)
 8006270:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006272:	4b2c      	ldr	r3, [pc, #176]	@ (8006324 <prvAddNewTaskToReadyList+0xc8>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d109      	bne.n	800628e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800627a:	4a2a      	ldr	r2, [pc, #168]	@ (8006324 <prvAddNewTaskToReadyList+0xc8>)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006280:	4b27      	ldr	r3, [pc, #156]	@ (8006320 <prvAddNewTaskToReadyList+0xc4>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d110      	bne.n	80062aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006288:	f000 fbf8 	bl	8006a7c <prvInitialiseTaskLists>
 800628c:	e00d      	b.n	80062aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800628e:	4b26      	ldr	r3, [pc, #152]	@ (8006328 <prvAddNewTaskToReadyList+0xcc>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d109      	bne.n	80062aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006296:	4b23      	ldr	r3, [pc, #140]	@ (8006324 <prvAddNewTaskToReadyList+0xc8>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d802      	bhi.n	80062aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80062a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006324 <prvAddNewTaskToReadyList+0xc8>)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80062aa:	4b20      	ldr	r3, [pc, #128]	@ (800632c <prvAddNewTaskToReadyList+0xd0>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3301      	adds	r3, #1
 80062b0:	4a1e      	ldr	r2, [pc, #120]	@ (800632c <prvAddNewTaskToReadyList+0xd0>)
 80062b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80062b4:	4b1d      	ldr	r3, [pc, #116]	@ (800632c <prvAddNewTaskToReadyList+0xd0>)
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006330 <prvAddNewTaskToReadyList+0xd4>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d903      	bls.n	80062d0 <prvAddNewTaskToReadyList+0x74>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062cc:	4a18      	ldr	r2, [pc, #96]	@ (8006330 <prvAddNewTaskToReadyList+0xd4>)
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d4:	4613      	mov	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4a15      	ldr	r2, [pc, #84]	@ (8006334 <prvAddNewTaskToReadyList+0xd8>)
 80062de:	441a      	add	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3304      	adds	r3, #4
 80062e4:	4619      	mov	r1, r3
 80062e6:	4610      	mov	r0, r2
 80062e8:	f7fe fecd 	bl	8005086 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062ec:	f001 fd3e 	bl	8007d6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006328 <prvAddNewTaskToReadyList+0xcc>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00e      	beq.n	8006316 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006324 <prvAddNewTaskToReadyList+0xc8>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006302:	429a      	cmp	r2, r3
 8006304:	d207      	bcs.n	8006316 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006306:	4b0c      	ldr	r3, [pc, #48]	@ (8006338 <prvAddNewTaskToReadyList+0xdc>)
 8006308:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006316:	bf00      	nop
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000e38 	.word	0x20000e38
 8006324:	20000964 	.word	0x20000964
 8006328:	20000e44 	.word	0x20000e44
 800632c:	20000e54 	.word	0x20000e54
 8006330:	20000e40 	.word	0x20000e40
 8006334:	20000968 	.word	0x20000968
 8006338:	e000ed04 	.word	0xe000ed04

0800633c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08a      	sub	sp, #40	@ 0x28
 8006340:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006342:	2300      	movs	r3, #0
 8006344:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006346:	2300      	movs	r3, #0
 8006348:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800634a:	463a      	mov	r2, r7
 800634c:	1d39      	adds	r1, r7, #4
 800634e:	f107 0308 	add.w	r3, r7, #8
 8006352:	4618      	mov	r0, r3
 8006354:	f7fe fe36 	bl	8004fc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	9202      	str	r2, [sp, #8]
 8006360:	9301      	str	r3, [sp, #4]
 8006362:	2300      	movs	r3, #0
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	2300      	movs	r3, #0
 8006368:	460a      	mov	r2, r1
 800636a:	4924      	ldr	r1, [pc, #144]	@ (80063fc <vTaskStartScheduler+0xc0>)
 800636c:	4824      	ldr	r0, [pc, #144]	@ (8006400 <vTaskStartScheduler+0xc4>)
 800636e:	f7ff fe27 	bl	8005fc0 <xTaskCreateStatic>
 8006372:	4603      	mov	r3, r0
 8006374:	4a23      	ldr	r2, [pc, #140]	@ (8006404 <vTaskStartScheduler+0xc8>)
 8006376:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006378:	4b22      	ldr	r3, [pc, #136]	@ (8006404 <vTaskStartScheduler+0xc8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006380:	2301      	movs	r3, #1
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	e001      	b.n	800638a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006386:	2300      	movs	r3, #0
 8006388:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d102      	bne.n	8006396 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006390:	f001 f832 	bl	80073f8 <xTimerCreateTimerTask>
 8006394:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d11b      	bne.n	80063d4 <vTaskStartScheduler+0x98>
	__asm volatile
 800639c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	613b      	str	r3, [r7, #16]
}
 80063ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063b0:	4b15      	ldr	r3, [pc, #84]	@ (8006408 <vTaskStartScheduler+0xcc>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3354      	adds	r3, #84	@ 0x54
 80063b6:	4a15      	ldr	r2, [pc, #84]	@ (800640c <vTaskStartScheduler+0xd0>)
 80063b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063ba:	4b15      	ldr	r3, [pc, #84]	@ (8006410 <vTaskStartScheduler+0xd4>)
 80063bc:	f04f 32ff 	mov.w	r2, #4294967295
 80063c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063c2:	4b14      	ldr	r3, [pc, #80]	@ (8006414 <vTaskStartScheduler+0xd8>)
 80063c4:	2201      	movs	r2, #1
 80063c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063c8:	4b13      	ldr	r3, [pc, #76]	@ (8006418 <vTaskStartScheduler+0xdc>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063ce:	f001 fbf7 	bl	8007bc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063d2:	e00f      	b.n	80063f4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063da:	d10b      	bne.n	80063f4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	60fb      	str	r3, [r7, #12]
}
 80063ee:	bf00      	nop
 80063f0:	bf00      	nop
 80063f2:	e7fd      	b.n	80063f0 <vTaskStartScheduler+0xb4>
}
 80063f4:	bf00      	nop
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	08008e8c 	.word	0x08008e8c
 8006400:	08006a4d 	.word	0x08006a4d
 8006404:	20000e5c 	.word	0x20000e5c
 8006408:	20000964 	.word	0x20000964
 800640c:	20000020 	.word	0x20000020
 8006410:	20000e58 	.word	0x20000e58
 8006414:	20000e44 	.word	0x20000e44
 8006418:	20000e3c 	.word	0x20000e3c

0800641c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006420:	4b04      	ldr	r3, [pc, #16]	@ (8006434 <vTaskSuspendAll+0x18>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3301      	adds	r3, #1
 8006426:	4a03      	ldr	r2, [pc, #12]	@ (8006434 <vTaskSuspendAll+0x18>)
 8006428:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800642a:	bf00      	nop
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	20000e60 	.word	0x20000e60

08006438 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800643e:	2300      	movs	r3, #0
 8006440:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006442:	2300      	movs	r3, #0
 8006444:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006446:	4b42      	ldr	r3, [pc, #264]	@ (8006550 <xTaskResumeAll+0x118>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10b      	bne.n	8006466 <xTaskResumeAll+0x2e>
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	603b      	str	r3, [r7, #0]
}
 8006460:	bf00      	nop
 8006462:	bf00      	nop
 8006464:	e7fd      	b.n	8006462 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006466:	f001 fc4f 	bl	8007d08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800646a:	4b39      	ldr	r3, [pc, #228]	@ (8006550 <xTaskResumeAll+0x118>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3b01      	subs	r3, #1
 8006470:	4a37      	ldr	r2, [pc, #220]	@ (8006550 <xTaskResumeAll+0x118>)
 8006472:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006474:	4b36      	ldr	r3, [pc, #216]	@ (8006550 <xTaskResumeAll+0x118>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d162      	bne.n	8006542 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800647c:	4b35      	ldr	r3, [pc, #212]	@ (8006554 <xTaskResumeAll+0x11c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d05e      	beq.n	8006542 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006484:	e02f      	b.n	80064e6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006486:	4b34      	ldr	r3, [pc, #208]	@ (8006558 <xTaskResumeAll+0x120>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	3318      	adds	r3, #24
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe fe54 	bl	8005140 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3304      	adds	r3, #4
 800649c:	4618      	mov	r0, r3
 800649e:	f7fe fe4f 	bl	8005140 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064a6:	4b2d      	ldr	r3, [pc, #180]	@ (800655c <xTaskResumeAll+0x124>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d903      	bls.n	80064b6 <xTaskResumeAll+0x7e>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b2:	4a2a      	ldr	r2, [pc, #168]	@ (800655c <xTaskResumeAll+0x124>)
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ba:	4613      	mov	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4a27      	ldr	r2, [pc, #156]	@ (8006560 <xTaskResumeAll+0x128>)
 80064c4:	441a      	add	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	3304      	adds	r3, #4
 80064ca:	4619      	mov	r1, r3
 80064cc:	4610      	mov	r0, r2
 80064ce:	f7fe fdda 	bl	8005086 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064d6:	4b23      	ldr	r3, [pc, #140]	@ (8006564 <xTaskResumeAll+0x12c>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064dc:	429a      	cmp	r2, r3
 80064de:	d302      	bcc.n	80064e6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80064e0:	4b21      	ldr	r3, [pc, #132]	@ (8006568 <xTaskResumeAll+0x130>)
 80064e2:	2201      	movs	r2, #1
 80064e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064e6:	4b1c      	ldr	r3, [pc, #112]	@ (8006558 <xTaskResumeAll+0x120>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1cb      	bne.n	8006486 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064f4:	f000 fb66 	bl	8006bc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80064f8:	4b1c      	ldr	r3, [pc, #112]	@ (800656c <xTaskResumeAll+0x134>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d010      	beq.n	8006526 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006504:	f000 f846 	bl	8006594 <xTaskIncrementTick>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800650e:	4b16      	ldr	r3, [pc, #88]	@ (8006568 <xTaskResumeAll+0x130>)
 8006510:	2201      	movs	r2, #1
 8006512:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3b01      	subs	r3, #1
 8006518:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1f1      	bne.n	8006504 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006520:	4b12      	ldr	r3, [pc, #72]	@ (800656c <xTaskResumeAll+0x134>)
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006526:	4b10      	ldr	r3, [pc, #64]	@ (8006568 <xTaskResumeAll+0x130>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d009      	beq.n	8006542 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800652e:	2301      	movs	r3, #1
 8006530:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006532:	4b0f      	ldr	r3, [pc, #60]	@ (8006570 <xTaskResumeAll+0x138>)
 8006534:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006542:	f001 fc13 	bl	8007d6c <vPortExitCritical>

	return xAlreadyYielded;
 8006546:	68bb      	ldr	r3, [r7, #8]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	20000e60 	.word	0x20000e60
 8006554:	20000e38 	.word	0x20000e38
 8006558:	20000df8 	.word	0x20000df8
 800655c:	20000e40 	.word	0x20000e40
 8006560:	20000968 	.word	0x20000968
 8006564:	20000964 	.word	0x20000964
 8006568:	20000e4c 	.word	0x20000e4c
 800656c:	20000e48 	.word	0x20000e48
 8006570:	e000ed04 	.word	0xe000ed04

08006574 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800657a:	4b05      	ldr	r3, [pc, #20]	@ (8006590 <xTaskGetTickCount+0x1c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006580:	687b      	ldr	r3, [r7, #4]
}
 8006582:	4618      	mov	r0, r3
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	20000e3c 	.word	0x20000e3c

08006594 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800659a:	2300      	movs	r3, #0
 800659c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800659e:	4b4f      	ldr	r3, [pc, #316]	@ (80066dc <xTaskIncrementTick+0x148>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f040 8090 	bne.w	80066c8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065a8:	4b4d      	ldr	r3, [pc, #308]	@ (80066e0 <xTaskIncrementTick+0x14c>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3301      	adds	r3, #1
 80065ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065b0:	4a4b      	ldr	r2, [pc, #300]	@ (80066e0 <xTaskIncrementTick+0x14c>)
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d121      	bne.n	8006600 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80065bc:	4b49      	ldr	r3, [pc, #292]	@ (80066e4 <xTaskIncrementTick+0x150>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00b      	beq.n	80065de <xTaskIncrementTick+0x4a>
	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	603b      	str	r3, [r7, #0]
}
 80065d8:	bf00      	nop
 80065da:	bf00      	nop
 80065dc:	e7fd      	b.n	80065da <xTaskIncrementTick+0x46>
 80065de:	4b41      	ldr	r3, [pc, #260]	@ (80066e4 <xTaskIncrementTick+0x150>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	60fb      	str	r3, [r7, #12]
 80065e4:	4b40      	ldr	r3, [pc, #256]	@ (80066e8 <xTaskIncrementTick+0x154>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a3e      	ldr	r2, [pc, #248]	@ (80066e4 <xTaskIncrementTick+0x150>)
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	4a3e      	ldr	r2, [pc, #248]	@ (80066e8 <xTaskIncrementTick+0x154>)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6013      	str	r3, [r2, #0]
 80065f2:	4b3e      	ldr	r3, [pc, #248]	@ (80066ec <xTaskIncrementTick+0x158>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3301      	adds	r3, #1
 80065f8:	4a3c      	ldr	r2, [pc, #240]	@ (80066ec <xTaskIncrementTick+0x158>)
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	f000 fae2 	bl	8006bc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006600:	4b3b      	ldr	r3, [pc, #236]	@ (80066f0 <xTaskIncrementTick+0x15c>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	429a      	cmp	r2, r3
 8006608:	d349      	bcc.n	800669e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800660a:	4b36      	ldr	r3, [pc, #216]	@ (80066e4 <xTaskIncrementTick+0x150>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d104      	bne.n	800661e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006614:	4b36      	ldr	r3, [pc, #216]	@ (80066f0 <xTaskIncrementTick+0x15c>)
 8006616:	f04f 32ff 	mov.w	r2, #4294967295
 800661a:	601a      	str	r2, [r3, #0]
					break;
 800661c:	e03f      	b.n	800669e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800661e:	4b31      	ldr	r3, [pc, #196]	@ (80066e4 <xTaskIncrementTick+0x150>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	429a      	cmp	r2, r3
 8006634:	d203      	bcs.n	800663e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006636:	4a2e      	ldr	r2, [pc, #184]	@ (80066f0 <xTaskIncrementTick+0x15c>)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800663c:	e02f      	b.n	800669e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	3304      	adds	r3, #4
 8006642:	4618      	mov	r0, r3
 8006644:	f7fe fd7c 	bl	8005140 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664c:	2b00      	cmp	r3, #0
 800664e:	d004      	beq.n	800665a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	3318      	adds	r3, #24
 8006654:	4618      	mov	r0, r3
 8006656:	f7fe fd73 	bl	8005140 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800665e:	4b25      	ldr	r3, [pc, #148]	@ (80066f4 <xTaskIncrementTick+0x160>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	429a      	cmp	r2, r3
 8006664:	d903      	bls.n	800666e <xTaskIncrementTick+0xda>
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800666a:	4a22      	ldr	r2, [pc, #136]	@ (80066f4 <xTaskIncrementTick+0x160>)
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006672:	4613      	mov	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4a1f      	ldr	r2, [pc, #124]	@ (80066f8 <xTaskIncrementTick+0x164>)
 800667c:	441a      	add	r2, r3
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	3304      	adds	r3, #4
 8006682:	4619      	mov	r1, r3
 8006684:	4610      	mov	r0, r2
 8006686:	f7fe fcfe 	bl	8005086 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800668e:	4b1b      	ldr	r3, [pc, #108]	@ (80066fc <xTaskIncrementTick+0x168>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006694:	429a      	cmp	r2, r3
 8006696:	d3b8      	bcc.n	800660a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006698:	2301      	movs	r3, #1
 800669a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800669c:	e7b5      	b.n	800660a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800669e:	4b17      	ldr	r3, [pc, #92]	@ (80066fc <xTaskIncrementTick+0x168>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066a4:	4914      	ldr	r1, [pc, #80]	@ (80066f8 <xTaskIncrementTick+0x164>)
 80066a6:	4613      	mov	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	440b      	add	r3, r1
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d901      	bls.n	80066ba <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80066b6:	2301      	movs	r3, #1
 80066b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80066ba:	4b11      	ldr	r3, [pc, #68]	@ (8006700 <xTaskIncrementTick+0x16c>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d007      	beq.n	80066d2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80066c2:	2301      	movs	r3, #1
 80066c4:	617b      	str	r3, [r7, #20]
 80066c6:	e004      	b.n	80066d2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80066c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006704 <xTaskIncrementTick+0x170>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	3301      	adds	r3, #1
 80066ce:	4a0d      	ldr	r2, [pc, #52]	@ (8006704 <xTaskIncrementTick+0x170>)
 80066d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80066d2:	697b      	ldr	r3, [r7, #20]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3718      	adds	r7, #24
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	20000e60 	.word	0x20000e60
 80066e0:	20000e3c 	.word	0x20000e3c
 80066e4:	20000df0 	.word	0x20000df0
 80066e8:	20000df4 	.word	0x20000df4
 80066ec:	20000e50 	.word	0x20000e50
 80066f0:	20000e58 	.word	0x20000e58
 80066f4:	20000e40 	.word	0x20000e40
 80066f8:	20000968 	.word	0x20000968
 80066fc:	20000964 	.word	0x20000964
 8006700:	20000e4c 	.word	0x20000e4c
 8006704:	20000e48 	.word	0x20000e48

08006708 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800670e:	4b2b      	ldr	r3, [pc, #172]	@ (80067bc <vTaskSwitchContext+0xb4>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006716:	4b2a      	ldr	r3, [pc, #168]	@ (80067c0 <vTaskSwitchContext+0xb8>)
 8006718:	2201      	movs	r2, #1
 800671a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800671c:	e047      	b.n	80067ae <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800671e:	4b28      	ldr	r3, [pc, #160]	@ (80067c0 <vTaskSwitchContext+0xb8>)
 8006720:	2200      	movs	r2, #0
 8006722:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006724:	4b27      	ldr	r3, [pc, #156]	@ (80067c4 <vTaskSwitchContext+0xbc>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	60fb      	str	r3, [r7, #12]
 800672a:	e011      	b.n	8006750 <vTaskSwitchContext+0x48>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10b      	bne.n	800674a <vTaskSwitchContext+0x42>
	__asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	607b      	str	r3, [r7, #4]
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop
 8006748:	e7fd      	b.n	8006746 <vTaskSwitchContext+0x3e>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	3b01      	subs	r3, #1
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	491d      	ldr	r1, [pc, #116]	@ (80067c8 <vTaskSwitchContext+0xc0>)
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4613      	mov	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	440b      	add	r3, r1
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d0e3      	beq.n	800672c <vTaskSwitchContext+0x24>
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	4613      	mov	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4a16      	ldr	r2, [pc, #88]	@ (80067c8 <vTaskSwitchContext+0xc0>)
 8006770:	4413      	add	r3, r2
 8006772:	60bb      	str	r3, [r7, #8]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	605a      	str	r2, [r3, #4]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	3308      	adds	r3, #8
 8006786:	429a      	cmp	r2, r3
 8006788:	d104      	bne.n	8006794 <vTaskSwitchContext+0x8c>
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	605a      	str	r2, [r3, #4]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	4a0c      	ldr	r2, [pc, #48]	@ (80067cc <vTaskSwitchContext+0xc4>)
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	4a09      	ldr	r2, [pc, #36]	@ (80067c4 <vTaskSwitchContext+0xbc>)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80067a4:	4b09      	ldr	r3, [pc, #36]	@ (80067cc <vTaskSwitchContext+0xc4>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3354      	adds	r3, #84	@ 0x54
 80067aa:	4a09      	ldr	r2, [pc, #36]	@ (80067d0 <vTaskSwitchContext+0xc8>)
 80067ac:	6013      	str	r3, [r2, #0]
}
 80067ae:	bf00      	nop
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	20000e60 	.word	0x20000e60
 80067c0:	20000e4c 	.word	0x20000e4c
 80067c4:	20000e40 	.word	0x20000e40
 80067c8:	20000968 	.word	0x20000968
 80067cc:	20000964 	.word	0x20000964
 80067d0:	20000020 	.word	0x20000020

080067d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10b      	bne.n	80067fc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80067e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e8:	f383 8811 	msr	BASEPRI, r3
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	60fb      	str	r3, [r7, #12]
}
 80067f6:	bf00      	nop
 80067f8:	bf00      	nop
 80067fa:	e7fd      	b.n	80067f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067fc:	4b07      	ldr	r3, [pc, #28]	@ (800681c <vTaskPlaceOnEventList+0x48>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3318      	adds	r3, #24
 8006802:	4619      	mov	r1, r3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7fe fc62 	bl	80050ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800680a:	2101      	movs	r1, #1
 800680c:	6838      	ldr	r0, [r7, #0]
 800680e:	f000 fd9f 	bl	8007350 <prvAddCurrentTaskToDelayedList>
}
 8006812:	bf00      	nop
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000964 	.word	0x20000964

08006820 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10b      	bne.n	800684a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	617b      	str	r3, [r7, #20]
}
 8006844:	bf00      	nop
 8006846:	bf00      	nop
 8006848:	e7fd      	b.n	8006846 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800684a:	4b0a      	ldr	r3, [pc, #40]	@ (8006874 <vTaskPlaceOnEventListRestricted+0x54>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3318      	adds	r3, #24
 8006850:	4619      	mov	r1, r3
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f7fe fc17 	bl	8005086 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800685e:	f04f 33ff 	mov.w	r3, #4294967295
 8006862:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006864:	6879      	ldr	r1, [r7, #4]
 8006866:	68b8      	ldr	r0, [r7, #8]
 8006868:	f000 fd72 	bl	8007350 <prvAddCurrentTaskToDelayedList>
	}
 800686c:	bf00      	nop
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	20000964 	.word	0x20000964

08006878 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10b      	bne.n	80068a6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	60fb      	str	r3, [r7, #12]
}
 80068a0:	bf00      	nop
 80068a2:	bf00      	nop
 80068a4:	e7fd      	b.n	80068a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	3318      	adds	r3, #24
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fe fc48 	bl	8005140 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006928 <xTaskRemoveFromEventList+0xb0>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d11d      	bne.n	80068f4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	3304      	adds	r3, #4
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fe fc3f 	bl	8005140 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c6:	4b19      	ldr	r3, [pc, #100]	@ (800692c <xTaskRemoveFromEventList+0xb4>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d903      	bls.n	80068d6 <xTaskRemoveFromEventList+0x5e>
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d2:	4a16      	ldr	r2, [pc, #88]	@ (800692c <xTaskRemoveFromEventList+0xb4>)
 80068d4:	6013      	str	r3, [r2, #0]
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068da:	4613      	mov	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4413      	add	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4a13      	ldr	r2, [pc, #76]	@ (8006930 <xTaskRemoveFromEventList+0xb8>)
 80068e4:	441a      	add	r2, r3
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	3304      	adds	r3, #4
 80068ea:	4619      	mov	r1, r3
 80068ec:	4610      	mov	r0, r2
 80068ee:	f7fe fbca 	bl	8005086 <vListInsertEnd>
 80068f2:	e005      	b.n	8006900 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	3318      	adds	r3, #24
 80068f8:	4619      	mov	r1, r3
 80068fa:	480e      	ldr	r0, [pc, #56]	@ (8006934 <xTaskRemoveFromEventList+0xbc>)
 80068fc:	f7fe fbc3 	bl	8005086 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006904:	4b0c      	ldr	r3, [pc, #48]	@ (8006938 <xTaskRemoveFromEventList+0xc0>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800690a:	429a      	cmp	r2, r3
 800690c:	d905      	bls.n	800691a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800690e:	2301      	movs	r3, #1
 8006910:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006912:	4b0a      	ldr	r3, [pc, #40]	@ (800693c <xTaskRemoveFromEventList+0xc4>)
 8006914:	2201      	movs	r2, #1
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	e001      	b.n	800691e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800691a:	2300      	movs	r3, #0
 800691c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800691e:	697b      	ldr	r3, [r7, #20]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3718      	adds	r7, #24
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	20000e60 	.word	0x20000e60
 800692c:	20000e40 	.word	0x20000e40
 8006930:	20000968 	.word	0x20000968
 8006934:	20000df8 	.word	0x20000df8
 8006938:	20000964 	.word	0x20000964
 800693c:	20000e4c 	.word	0x20000e4c

08006940 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006948:	4b06      	ldr	r3, [pc, #24]	@ (8006964 <vTaskInternalSetTimeOutState+0x24>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006950:	4b05      	ldr	r3, [pc, #20]	@ (8006968 <vTaskInternalSetTimeOutState+0x28>)
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	605a      	str	r2, [r3, #4]
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	20000e50 	.word	0x20000e50
 8006968:	20000e3c 	.word	0x20000e3c

0800696c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b088      	sub	sp, #32
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10b      	bne.n	8006994 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	613b      	str	r3, [r7, #16]
}
 800698e:	bf00      	nop
 8006990:	bf00      	nop
 8006992:	e7fd      	b.n	8006990 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10b      	bne.n	80069b2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	60fb      	str	r3, [r7, #12]
}
 80069ac:	bf00      	nop
 80069ae:	bf00      	nop
 80069b0:	e7fd      	b.n	80069ae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80069b2:	f001 f9a9 	bl	8007d08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069b6:	4b1d      	ldr	r3, [pc, #116]	@ (8006a2c <xTaskCheckForTimeOut+0xc0>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ce:	d102      	bne.n	80069d6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069d0:	2300      	movs	r3, #0
 80069d2:	61fb      	str	r3, [r7, #28]
 80069d4:	e023      	b.n	8006a1e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	4b15      	ldr	r3, [pc, #84]	@ (8006a30 <xTaskCheckForTimeOut+0xc4>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d007      	beq.n	80069f2 <xTaskCheckForTimeOut+0x86>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d302      	bcc.n	80069f2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80069ec:	2301      	movs	r3, #1
 80069ee:	61fb      	str	r3, [r7, #28]
 80069f0:	e015      	b.n	8006a1e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d20b      	bcs.n	8006a14 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	1ad2      	subs	r2, r2, r3
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff ff99 	bl	8006940 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	61fb      	str	r3, [r7, #28]
 8006a12:	e004      	b.n	8006a1e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2200      	movs	r2, #0
 8006a18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a1e:	f001 f9a5 	bl	8007d6c <vPortExitCritical>

	return xReturn;
 8006a22:	69fb      	ldr	r3, [r7, #28]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3720      	adds	r7, #32
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	20000e3c 	.word	0x20000e3c
 8006a30:	20000e50 	.word	0x20000e50

08006a34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a34:	b480      	push	{r7}
 8006a36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a38:	4b03      	ldr	r3, [pc, #12]	@ (8006a48 <vTaskMissedYield+0x14>)
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]
}
 8006a3e:	bf00      	nop
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	20000e4c 	.word	0x20000e4c

08006a4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a54:	f000 f852 	bl	8006afc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a58:	4b06      	ldr	r3, [pc, #24]	@ (8006a74 <prvIdleTask+0x28>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d9f9      	bls.n	8006a54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a60:	4b05      	ldr	r3, [pc, #20]	@ (8006a78 <prvIdleTask+0x2c>)
 8006a62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a70:	e7f0      	b.n	8006a54 <prvIdleTask+0x8>
 8006a72:	bf00      	nop
 8006a74:	20000968 	.word	0x20000968
 8006a78:	e000ed04 	.word	0xe000ed04

08006a7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a82:	2300      	movs	r3, #0
 8006a84:	607b      	str	r3, [r7, #4]
 8006a86:	e00c      	b.n	8006aa2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4a12      	ldr	r2, [pc, #72]	@ (8006adc <prvInitialiseTaskLists+0x60>)
 8006a94:	4413      	add	r3, r2
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fe fac8 	bl	800502c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	607b      	str	r3, [r7, #4]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b37      	cmp	r3, #55	@ 0x37
 8006aa6:	d9ef      	bls.n	8006a88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006aa8:	480d      	ldr	r0, [pc, #52]	@ (8006ae0 <prvInitialiseTaskLists+0x64>)
 8006aaa:	f7fe fabf 	bl	800502c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006aae:	480d      	ldr	r0, [pc, #52]	@ (8006ae4 <prvInitialiseTaskLists+0x68>)
 8006ab0:	f7fe fabc 	bl	800502c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ab4:	480c      	ldr	r0, [pc, #48]	@ (8006ae8 <prvInitialiseTaskLists+0x6c>)
 8006ab6:	f7fe fab9 	bl	800502c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006aba:	480c      	ldr	r0, [pc, #48]	@ (8006aec <prvInitialiseTaskLists+0x70>)
 8006abc:	f7fe fab6 	bl	800502c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ac0:	480b      	ldr	r0, [pc, #44]	@ (8006af0 <prvInitialiseTaskLists+0x74>)
 8006ac2:	f7fe fab3 	bl	800502c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8006af4 <prvInitialiseTaskLists+0x78>)
 8006ac8:	4a05      	ldr	r2, [pc, #20]	@ (8006ae0 <prvInitialiseTaskLists+0x64>)
 8006aca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006acc:	4b0a      	ldr	r3, [pc, #40]	@ (8006af8 <prvInitialiseTaskLists+0x7c>)
 8006ace:	4a05      	ldr	r2, [pc, #20]	@ (8006ae4 <prvInitialiseTaskLists+0x68>)
 8006ad0:	601a      	str	r2, [r3, #0]
}
 8006ad2:	bf00      	nop
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	20000968 	.word	0x20000968
 8006ae0:	20000dc8 	.word	0x20000dc8
 8006ae4:	20000ddc 	.word	0x20000ddc
 8006ae8:	20000df8 	.word	0x20000df8
 8006aec:	20000e0c 	.word	0x20000e0c
 8006af0:	20000e24 	.word	0x20000e24
 8006af4:	20000df0 	.word	0x20000df0
 8006af8:	20000df4 	.word	0x20000df4

08006afc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b02:	e019      	b.n	8006b38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b04:	f001 f900 	bl	8007d08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b08:	4b10      	ldr	r3, [pc, #64]	@ (8006b4c <prvCheckTasksWaitingTermination+0x50>)
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3304      	adds	r3, #4
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7fe fb13 	bl	8005140 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b50 <prvCheckTasksWaitingTermination+0x54>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	4a0b      	ldr	r2, [pc, #44]	@ (8006b50 <prvCheckTasksWaitingTermination+0x54>)
 8006b22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b24:	4b0b      	ldr	r3, [pc, #44]	@ (8006b54 <prvCheckTasksWaitingTermination+0x58>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8006b54 <prvCheckTasksWaitingTermination+0x58>)
 8006b2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b2e:	f001 f91d 	bl	8007d6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f810 	bl	8006b58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b38:	4b06      	ldr	r3, [pc, #24]	@ (8006b54 <prvCheckTasksWaitingTermination+0x58>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e1      	bne.n	8006b04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b40:	bf00      	nop
 8006b42:	bf00      	nop
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000e0c 	.word	0x20000e0c
 8006b50:	20000e38 	.word	0x20000e38
 8006b54:	20000e20 	.word	0x20000e20

08006b58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3354      	adds	r3, #84	@ 0x54
 8006b64:	4618      	mov	r0, r3
 8006b66:	f001 fc09 	bl	800837c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d108      	bne.n	8006b86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f001 fab5 	bl	80080e8 <vPortFree>
				vPortFree( pxTCB );
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f001 fab2 	bl	80080e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b84:	e019      	b.n	8006bba <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d103      	bne.n	8006b98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f001 faa9 	bl	80080e8 <vPortFree>
	}
 8006b96:	e010      	b.n	8006bba <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d00b      	beq.n	8006bba <prvDeleteTCB+0x62>
	__asm volatile
 8006ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	60fb      	str	r3, [r7, #12]
}
 8006bb4:	bf00      	nop
 8006bb6:	bf00      	nop
 8006bb8:	e7fd      	b.n	8006bb6 <prvDeleteTCB+0x5e>
	}
 8006bba:	bf00      	nop
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
	...

08006bc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bca:	4b0c      	ldr	r3, [pc, #48]	@ (8006bfc <prvResetNextTaskUnblockTime+0x38>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d104      	bne.n	8006bde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8006c00 <prvResetNextTaskUnblockTime+0x3c>)
 8006bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006bdc:	e008      	b.n	8006bf0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bde:	4b07      	ldr	r3, [pc, #28]	@ (8006bfc <prvResetNextTaskUnblockTime+0x38>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	4a04      	ldr	r2, [pc, #16]	@ (8006c00 <prvResetNextTaskUnblockTime+0x3c>)
 8006bee:	6013      	str	r3, [r2, #0]
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	20000df0 	.word	0x20000df0
 8006c00:	20000e58 	.word	0x20000e58

08006c04 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006c0a:	4b05      	ldr	r3, [pc, #20]	@ (8006c20 <xTaskGetCurrentTaskHandle+0x1c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006c10:	687b      	ldr	r3, [r7, #4]
	}
 8006c12:	4618      	mov	r0, r3
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	20000964 	.word	0x20000964

08006c24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c58 <xTaskGetSchedulerState+0x34>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d102      	bne.n	8006c38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c32:	2301      	movs	r3, #1
 8006c34:	607b      	str	r3, [r7, #4]
 8006c36:	e008      	b.n	8006c4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c38:	4b08      	ldr	r3, [pc, #32]	@ (8006c5c <xTaskGetSchedulerState+0x38>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d102      	bne.n	8006c46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c40:	2302      	movs	r3, #2
 8006c42:	607b      	str	r3, [r7, #4]
 8006c44:	e001      	b.n	8006c4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c46:	2300      	movs	r3, #0
 8006c48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c4a:	687b      	ldr	r3, [r7, #4]
	}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	20000e44 	.word	0x20000e44
 8006c5c:	20000e60 	.word	0x20000e60

08006c60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d051      	beq.n	8006d1a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8006d24 <xTaskPriorityInherit+0xc4>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d241      	bcs.n	8006d08 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	db06      	blt.n	8006c9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c8c:	4b25      	ldr	r3, [pc, #148]	@ (8006d24 <xTaskPriorityInherit+0xc4>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c92:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	6959      	ldr	r1, [r3, #20]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4a1f      	ldr	r2, [pc, #124]	@ (8006d28 <xTaskPriorityInherit+0xc8>)
 8006cac:	4413      	add	r3, r2
 8006cae:	4299      	cmp	r1, r3
 8006cb0:	d122      	bne.n	8006cf8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fe fa42 	bl	8005140 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cbc:	4b19      	ldr	r3, [pc, #100]	@ (8006d24 <xTaskPriorityInherit+0xc4>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cca:	4b18      	ldr	r3, [pc, #96]	@ (8006d2c <xTaskPriorityInherit+0xcc>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d903      	bls.n	8006cda <xTaskPriorityInherit+0x7a>
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd6:	4a15      	ldr	r2, [pc, #84]	@ (8006d2c <xTaskPriorityInherit+0xcc>)
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cde:	4613      	mov	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4a10      	ldr	r2, [pc, #64]	@ (8006d28 <xTaskPriorityInherit+0xc8>)
 8006ce8:	441a      	add	r2, r3
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	3304      	adds	r3, #4
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	f7fe f9c8 	bl	8005086 <vListInsertEnd>
 8006cf6:	e004      	b.n	8006d02 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8006d24 <xTaskPriorityInherit+0xc4>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006d02:	2301      	movs	r3, #1
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	e008      	b.n	8006d1a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d0c:	4b05      	ldr	r3, [pc, #20]	@ (8006d24 <xTaskPriorityInherit+0xc4>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d201      	bcs.n	8006d1a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006d16:	2301      	movs	r3, #1
 8006d18:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
	}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	20000964 	.word	0x20000964
 8006d28:	20000968 	.word	0x20000968
 8006d2c:	20000e40 	.word	0x20000e40

08006d30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d058      	beq.n	8006df8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d46:	4b2f      	ldr	r3, [pc, #188]	@ (8006e04 <xTaskPriorityDisinherit+0xd4>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d00b      	beq.n	8006d68 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	60fb      	str	r3, [r7, #12]
}
 8006d62:	bf00      	nop
 8006d64:	bf00      	nop
 8006d66:	e7fd      	b.n	8006d64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10b      	bne.n	8006d88 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	60bb      	str	r3, [r7, #8]
}
 8006d82:	bf00      	nop
 8006d84:	bf00      	nop
 8006d86:	e7fd      	b.n	8006d84 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d8c:	1e5a      	subs	r2, r3, #1
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d02c      	beq.n	8006df8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d128      	bne.n	8006df8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	3304      	adds	r3, #4
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fe f9c8 	bl	8005140 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8006e08 <xTaskPriorityDisinherit+0xd8>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d903      	bls.n	8006dd8 <xTaskPriorityDisinherit+0xa8>
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8006e08 <xTaskPriorityDisinherit+0xd8>)
 8006dd6:	6013      	str	r3, [r2, #0]
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ddc:	4613      	mov	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4a09      	ldr	r2, [pc, #36]	@ (8006e0c <xTaskPriorityDisinherit+0xdc>)
 8006de6:	441a      	add	r2, r3
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	3304      	adds	r3, #4
 8006dec:	4619      	mov	r1, r3
 8006dee:	4610      	mov	r0, r2
 8006df0:	f7fe f949 	bl	8005086 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006df4:	2301      	movs	r3, #1
 8006df6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006df8:	697b      	ldr	r3, [r7, #20]
	}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	20000964 	.word	0x20000964
 8006e08:	20000e40 	.word	0x20000e40
 8006e0c:	20000968 	.word	0x20000968

08006e10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b088      	sub	sp, #32
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d06c      	beq.n	8006f02 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10b      	bne.n	8006e48 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	60fb      	str	r3, [r7, #12]
}
 8006e42:	bf00      	nop
 8006e44:	bf00      	nop
 8006e46:	e7fd      	b.n	8006e44 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d902      	bls.n	8006e58 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	61fb      	str	r3, [r7, #28]
 8006e56:	e002      	b.n	8006e5e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e5c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e62:	69fa      	ldr	r2, [r7, #28]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d04c      	beq.n	8006f02 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d147      	bne.n	8006f02 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006e72:	4b26      	ldr	r3, [pc, #152]	@ (8006f0c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d10b      	bne.n	8006e94 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	60bb      	str	r3, [r7, #8]
}
 8006e8e:	bf00      	nop
 8006e90:	bf00      	nop
 8006e92:	e7fd      	b.n	8006e90 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e98:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	69fa      	ldr	r2, [r7, #28]
 8006e9e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	db04      	blt.n	8006eb2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	6959      	ldr	r1, [r3, #20]
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4a13      	ldr	r2, [pc, #76]	@ (8006f10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006ec2:	4413      	add	r3, r2
 8006ec4:	4299      	cmp	r1, r3
 8006ec6:	d11c      	bne.n	8006f02 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fe f937 	bl	8005140 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8006f14 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d903      	bls.n	8006ee6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8006f14 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eea:	4613      	mov	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4a07      	ldr	r2, [pc, #28]	@ (8006f10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006ef4:	441a      	add	r2, r3
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	3304      	adds	r3, #4
 8006efa:	4619      	mov	r1, r3
 8006efc:	4610      	mov	r0, r2
 8006efe:	f7fe f8c2 	bl	8005086 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f02:	bf00      	nop
 8006f04:	3720      	adds	r7, #32
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	20000964 	.word	0x20000964
 8006f10:	20000968 	.word	0x20000968
 8006f14:	20000e40 	.word	0x20000e40

08006f18 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006f18:	b480      	push	{r7}
 8006f1a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006f1c:	4b07      	ldr	r3, [pc, #28]	@ (8006f3c <pvTaskIncrementMutexHeldCount+0x24>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d004      	beq.n	8006f2e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006f24:	4b05      	ldr	r3, [pc, #20]	@ (8006f3c <pvTaskIncrementMutexHeldCount+0x24>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f2a:	3201      	adds	r2, #1
 8006f2c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006f2e:	4b03      	ldr	r3, [pc, #12]	@ (8006f3c <pvTaskIncrementMutexHeldCount+0x24>)
 8006f30:	681b      	ldr	r3, [r3, #0]
	}
 8006f32:	4618      	mov	r0, r3
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	20000964 	.word	0x20000964

08006f40 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
 8006f4c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006f4e:	f000 fedb 	bl	8007d08 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006f52:	4b29      	ldr	r3, [pc, #164]	@ (8006ff8 <xTaskNotifyWait+0xb8>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d01c      	beq.n	8006f9a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006f60:	4b25      	ldr	r3, [pc, #148]	@ (8006ff8 <xTaskNotifyWait+0xb8>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	43d2      	mvns	r2, r2
 8006f6c:	400a      	ands	r2, r1
 8006f6e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006f72:	4b21      	ldr	r3, [pc, #132]	@ (8006ff8 <xTaskNotifyWait+0xb8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00b      	beq.n	8006f9a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f82:	2101      	movs	r1, #1
 8006f84:	6838      	ldr	r0, [r7, #0]
 8006f86:	f000 f9e3 	bl	8007350 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8006ffc <xTaskNotifyWait+0xbc>)
 8006f8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006f9a:	f000 fee7 	bl	8007d6c <vPortExitCritical>

		taskENTER_CRITICAL();
 8006f9e:	f000 feb3 	bl	8007d08 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d005      	beq.n	8006fb4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006fa8:	4b13      	ldr	r3, [pc, #76]	@ (8006ff8 <xTaskNotifyWait+0xb8>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006fb4:	4b10      	ldr	r3, [pc, #64]	@ (8006ff8 <xTaskNotifyWait+0xb8>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d002      	beq.n	8006fc8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	617b      	str	r3, [r7, #20]
 8006fc6:	e00a      	b.n	8006fde <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff8 <xTaskNotifyWait+0xb8>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	43d2      	mvns	r2, r2
 8006fd4:	400a      	ands	r2, r1
 8006fd6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006fde:	4b06      	ldr	r3, [pc, #24]	@ (8006ff8 <xTaskNotifyWait+0xb8>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8006fe8:	f000 fec0 	bl	8007d6c <vPortExitCritical>

		return xReturn;
 8006fec:	697b      	ldr	r3, [r7, #20]
	}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3718      	adds	r7, #24
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20000964 	.word	0x20000964
 8006ffc:	e000ed04 	.word	0xe000ed04

08007000 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08a      	sub	sp, #40	@ 0x28
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	4613      	mov	r3, r2
 800700e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007010:	2301      	movs	r3, #1
 8007012:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10b      	bne.n	8007032 <xTaskGenericNotify+0x32>
	__asm volatile
 800701a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	61bb      	str	r3, [r7, #24]
}
 800702c:	bf00      	nop
 800702e:	bf00      	nop
 8007030:	e7fd      	b.n	800702e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007036:	f000 fe67 	bl	8007d08 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d004      	beq.n	800704a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007050:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	2202      	movs	r2, #2
 8007056:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800705a:	79fb      	ldrb	r3, [r7, #7]
 800705c:	2b04      	cmp	r3, #4
 800705e:	d82e      	bhi.n	80070be <xTaskGenericNotify+0xbe>
 8007060:	a201      	add	r2, pc, #4	@ (adr r2, 8007068 <xTaskGenericNotify+0x68>)
 8007062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007066:	bf00      	nop
 8007068:	080070e3 	.word	0x080070e3
 800706c:	0800707d 	.word	0x0800707d
 8007070:	0800708f 	.word	0x0800708f
 8007074:	0800709f 	.word	0x0800709f
 8007078:	080070a9 	.word	0x080070a9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	431a      	orrs	r2, r3
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800708c:	e02c      	b.n	80070e8 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007094:	1c5a      	adds	r2, r3, #1
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800709c:	e024      	b.n	80070e8 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80070a6:	e01f      	b.n	80070e8 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80070a8:	7ffb      	ldrb	r3, [r7, #31]
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d004      	beq.n	80070b8 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80070b6:	e017      	b.n	80070e8 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 80070b8:	2300      	movs	r3, #0
 80070ba:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80070bc:	e014      	b.n	80070e8 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80070c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c8:	d00d      	beq.n	80070e6 <xTaskGenericNotify+0xe6>
	__asm volatile
 80070ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	617b      	str	r3, [r7, #20]
}
 80070dc:	bf00      	nop
 80070de:	bf00      	nop
 80070e0:	e7fd      	b.n	80070de <xTaskGenericNotify+0xde>
					break;
 80070e2:	bf00      	nop
 80070e4:	e000      	b.n	80070e8 <xTaskGenericNotify+0xe8>

					break;
 80070e6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80070e8:	7ffb      	ldrb	r3, [r7, #31]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d13b      	bne.n	8007166 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	3304      	adds	r3, #4
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fe f824 	bl	8005140 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070fc:	4b1d      	ldr	r3, [pc, #116]	@ (8007174 <xTaskGenericNotify+0x174>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	429a      	cmp	r2, r3
 8007102:	d903      	bls.n	800710c <xTaskGenericNotify+0x10c>
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007108:	4a1a      	ldr	r2, [pc, #104]	@ (8007174 <xTaskGenericNotify+0x174>)
 800710a:	6013      	str	r3, [r2, #0]
 800710c:	6a3b      	ldr	r3, [r7, #32]
 800710e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007110:	4613      	mov	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4a17      	ldr	r2, [pc, #92]	@ (8007178 <xTaskGenericNotify+0x178>)
 800711a:	441a      	add	r2, r3
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	3304      	adds	r3, #4
 8007120:	4619      	mov	r1, r3
 8007122:	4610      	mov	r0, r2
 8007124:	f7fd ffaf 	bl	8005086 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00b      	beq.n	8007148 <xTaskGenericNotify+0x148>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	613b      	str	r3, [r7, #16]
}
 8007142:	bf00      	nop
 8007144:	bf00      	nop
 8007146:	e7fd      	b.n	8007144 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800714c:	4b0b      	ldr	r3, [pc, #44]	@ (800717c <xTaskGenericNotify+0x17c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007152:	429a      	cmp	r2, r3
 8007154:	d907      	bls.n	8007166 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007156:	4b0a      	ldr	r3, [pc, #40]	@ (8007180 <xTaskGenericNotify+0x180>)
 8007158:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800715c:	601a      	str	r2, [r3, #0]
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007166:	f000 fe01 	bl	8007d6c <vPortExitCritical>

		return xReturn;
 800716a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800716c:	4618      	mov	r0, r3
 800716e:	3728      	adds	r7, #40	@ 0x28
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	20000e40 	.word	0x20000e40
 8007178:	20000968 	.word	0x20000968
 800717c:	20000964 	.word	0x20000964
 8007180:	e000ed04 	.word	0xe000ed04

08007184 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007184:	b580      	push	{r7, lr}
 8007186:	b08e      	sub	sp, #56	@ 0x38
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	603b      	str	r3, [r7, #0]
 8007190:	4613      	mov	r3, r2
 8007192:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007194:	2301      	movs	r3, #1
 8007196:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10b      	bne.n	80071b6 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80071b0:	bf00      	nop
 80071b2:	bf00      	nop
 80071b4:	e7fd      	b.n	80071b2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071b6:	f000 fe87 	bl	8007ec8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80071be:	f3ef 8211 	mrs	r2, BASEPRI
 80071c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	623a      	str	r2, [r7, #32]
 80071d4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80071d6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d004      	beq.n	80071ea <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80071e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80071ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ec:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80071f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80071f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f6:	2202      	movs	r2, #2
 80071f8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80071fc:	79fb      	ldrb	r3, [r7, #7]
 80071fe:	2b04      	cmp	r3, #4
 8007200:	d82e      	bhi.n	8007260 <xTaskGenericNotifyFromISR+0xdc>
 8007202:	a201      	add	r2, pc, #4	@ (adr r2, 8007208 <xTaskGenericNotifyFromISR+0x84>)
 8007204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007208:	08007285 	.word	0x08007285
 800720c:	0800721d 	.word	0x0800721d
 8007210:	0800722f 	.word	0x0800722f
 8007214:	0800723f 	.word	0x0800723f
 8007218:	08007249 	.word	0x08007249
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800721c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	431a      	orrs	r2, r3
 8007226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007228:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800722c:	e02d      	b.n	800728a <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800722e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007230:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007234:	1c5a      	adds	r2, r3, #1
 8007236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007238:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800723c:	e025      	b.n	800728a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800723e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007246:	e020      	b.n	800728a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007248:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800724c:	2b02      	cmp	r3, #2
 800724e:	d004      	beq.n	800725a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007258:	e017      	b.n	800728a <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800725a:	2300      	movs	r3, #0
 800725c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800725e:	e014      	b.n	800728a <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007262:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726a:	d00d      	beq.n	8007288 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800726c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007270:	f383 8811 	msr	BASEPRI, r3
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	61bb      	str	r3, [r7, #24]
}
 800727e:	bf00      	nop
 8007280:	bf00      	nop
 8007282:	e7fd      	b.n	8007280 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8007284:	bf00      	nop
 8007286:	e000      	b.n	800728a <xTaskGenericNotifyFromISR+0x106>
					break;
 8007288:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800728a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800728e:	2b01      	cmp	r3, #1
 8007290:	d147      	bne.n	8007322 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00b      	beq.n	80072b2 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800729a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800729e:	f383 8811 	msr	BASEPRI, r3
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	617b      	str	r3, [r7, #20]
}
 80072ac:	bf00      	nop
 80072ae:	bf00      	nop
 80072b0:	e7fd      	b.n	80072ae <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072b2:	4b21      	ldr	r3, [pc, #132]	@ (8007338 <xTaskGenericNotifyFromISR+0x1b4>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d11d      	bne.n	80072f6 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072bc:	3304      	adds	r3, #4
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fd ff3e 	bl	8005140 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80072c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c8:	4b1c      	ldr	r3, [pc, #112]	@ (800733c <xTaskGenericNotifyFromISR+0x1b8>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d903      	bls.n	80072d8 <xTaskGenericNotifyFromISR+0x154>
 80072d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d4:	4a19      	ldr	r2, [pc, #100]	@ (800733c <xTaskGenericNotifyFromISR+0x1b8>)
 80072d6:	6013      	str	r3, [r2, #0]
 80072d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072dc:	4613      	mov	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4a16      	ldr	r2, [pc, #88]	@ (8007340 <xTaskGenericNotifyFromISR+0x1bc>)
 80072e6:	441a      	add	r2, r3
 80072e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ea:	3304      	adds	r3, #4
 80072ec:	4619      	mov	r1, r3
 80072ee:	4610      	mov	r0, r2
 80072f0:	f7fd fec9 	bl	8005086 <vListInsertEnd>
 80072f4:	e005      	b.n	8007302 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80072f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f8:	3318      	adds	r3, #24
 80072fa:	4619      	mov	r1, r3
 80072fc:	4811      	ldr	r0, [pc, #68]	@ (8007344 <xTaskGenericNotifyFromISR+0x1c0>)
 80072fe:	f7fd fec2 	bl	8005086 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007306:	4b10      	ldr	r3, [pc, #64]	@ (8007348 <xTaskGenericNotifyFromISR+0x1c4>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730c:	429a      	cmp	r2, r3
 800730e:	d908      	bls.n	8007322 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007316:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007318:	2201      	movs	r2, #1
 800731a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800731c:	4b0b      	ldr	r3, [pc, #44]	@ (800734c <xTaskGenericNotifyFromISR+0x1c8>)
 800731e:	2201      	movs	r2, #1
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007324:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	f383 8811 	msr	BASEPRI, r3
}
 800732c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800732e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8007330:	4618      	mov	r0, r3
 8007332:	3738      	adds	r7, #56	@ 0x38
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	20000e60 	.word	0x20000e60
 800733c:	20000e40 	.word	0x20000e40
 8007340:	20000968 	.word	0x20000968
 8007344:	20000df8 	.word	0x20000df8
 8007348:	20000964 	.word	0x20000964
 800734c:	20000e4c 	.word	0x20000e4c

08007350 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800735a:	4b21      	ldr	r3, [pc, #132]	@ (80073e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007360:	4b20      	ldr	r3, [pc, #128]	@ (80073e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3304      	adds	r3, #4
 8007366:	4618      	mov	r0, r3
 8007368:	f7fd feea 	bl	8005140 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007372:	d10a      	bne.n	800738a <prvAddCurrentTaskToDelayedList+0x3a>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d007      	beq.n	800738a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800737a:	4b1a      	ldr	r3, [pc, #104]	@ (80073e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3304      	adds	r3, #4
 8007380:	4619      	mov	r1, r3
 8007382:	4819      	ldr	r0, [pc, #100]	@ (80073e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007384:	f7fd fe7f 	bl	8005086 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007388:	e026      	b.n	80073d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4413      	add	r3, r2
 8007390:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007392:	4b14      	ldr	r3, [pc, #80]	@ (80073e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d209      	bcs.n	80073b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073a2:	4b12      	ldr	r3, [pc, #72]	@ (80073ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	4b0f      	ldr	r3, [pc, #60]	@ (80073e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3304      	adds	r3, #4
 80073ac:	4619      	mov	r1, r3
 80073ae:	4610      	mov	r0, r2
 80073b0:	f7fd fe8d 	bl	80050ce <vListInsert>
}
 80073b4:	e010      	b.n	80073d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073b6:	4b0e      	ldr	r3, [pc, #56]	@ (80073f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	4b0a      	ldr	r3, [pc, #40]	@ (80073e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3304      	adds	r3, #4
 80073c0:	4619      	mov	r1, r3
 80073c2:	4610      	mov	r0, r2
 80073c4:	f7fd fe83 	bl	80050ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80073c8:	4b0a      	ldr	r3, [pc, #40]	@ (80073f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d202      	bcs.n	80073d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80073d2:	4a08      	ldr	r2, [pc, #32]	@ (80073f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	6013      	str	r3, [r2, #0]
}
 80073d8:	bf00      	nop
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	20000e3c 	.word	0x20000e3c
 80073e4:	20000964 	.word	0x20000964
 80073e8:	20000e24 	.word	0x20000e24
 80073ec:	20000df4 	.word	0x20000df4
 80073f0:	20000df0 	.word	0x20000df0
 80073f4:	20000e58 	.word	0x20000e58

080073f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b08a      	sub	sp, #40	@ 0x28
 80073fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80073fe:	2300      	movs	r3, #0
 8007400:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007402:	f000 fb13 	bl	8007a2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007406:	4b1d      	ldr	r3, [pc, #116]	@ (800747c <xTimerCreateTimerTask+0x84>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d021      	beq.n	8007452 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800740e:	2300      	movs	r3, #0
 8007410:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007412:	2300      	movs	r3, #0
 8007414:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007416:	1d3a      	adds	r2, r7, #4
 8007418:	f107 0108 	add.w	r1, r7, #8
 800741c:	f107 030c 	add.w	r3, r7, #12
 8007420:	4618      	mov	r0, r3
 8007422:	f7fd fde9 	bl	8004ff8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	9202      	str	r2, [sp, #8]
 800742e:	9301      	str	r3, [sp, #4]
 8007430:	2302      	movs	r3, #2
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	2300      	movs	r3, #0
 8007436:	460a      	mov	r2, r1
 8007438:	4911      	ldr	r1, [pc, #68]	@ (8007480 <xTimerCreateTimerTask+0x88>)
 800743a:	4812      	ldr	r0, [pc, #72]	@ (8007484 <xTimerCreateTimerTask+0x8c>)
 800743c:	f7fe fdc0 	bl	8005fc0 <xTaskCreateStatic>
 8007440:	4603      	mov	r3, r0
 8007442:	4a11      	ldr	r2, [pc, #68]	@ (8007488 <xTimerCreateTimerTask+0x90>)
 8007444:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007446:	4b10      	ldr	r3, [pc, #64]	@ (8007488 <xTimerCreateTimerTask+0x90>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800744e:	2301      	movs	r3, #1
 8007450:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10b      	bne.n	8007470 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	613b      	str	r3, [r7, #16]
}
 800746a:	bf00      	nop
 800746c:	bf00      	nop
 800746e:	e7fd      	b.n	800746c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007470:	697b      	ldr	r3, [r7, #20]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	20000e94 	.word	0x20000e94
 8007480:	08008e94 	.word	0x08008e94
 8007484:	080075c5 	.word	0x080075c5
 8007488:	20000e98 	.word	0x20000e98

0800748c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08a      	sub	sp, #40	@ 0x28
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800749a:	2300      	movs	r3, #0
 800749c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d10b      	bne.n	80074bc <xTimerGenericCommand+0x30>
	__asm volatile
 80074a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a8:	f383 8811 	msr	BASEPRI, r3
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f3bf 8f4f 	dsb	sy
 80074b4:	623b      	str	r3, [r7, #32]
}
 80074b6:	bf00      	nop
 80074b8:	bf00      	nop
 80074ba:	e7fd      	b.n	80074b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80074bc:	4b19      	ldr	r3, [pc, #100]	@ (8007524 <xTimerGenericCommand+0x98>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d02a      	beq.n	800751a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2b05      	cmp	r3, #5
 80074d4:	dc18      	bgt.n	8007508 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80074d6:	f7ff fba5 	bl	8006c24 <xTaskGetSchedulerState>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d109      	bne.n	80074f4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80074e0:	4b10      	ldr	r3, [pc, #64]	@ (8007524 <xTimerGenericCommand+0x98>)
 80074e2:	6818      	ldr	r0, [r3, #0]
 80074e4:	f107 0110 	add.w	r1, r7, #16
 80074e8:	2300      	movs	r3, #0
 80074ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074ec:	f7fe f850 	bl	8005590 <xQueueGenericSend>
 80074f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80074f2:	e012      	b.n	800751a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80074f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007524 <xTimerGenericCommand+0x98>)
 80074f6:	6818      	ldr	r0, [r3, #0]
 80074f8:	f107 0110 	add.w	r1, r7, #16
 80074fc:	2300      	movs	r3, #0
 80074fe:	2200      	movs	r2, #0
 8007500:	f7fe f846 	bl	8005590 <xQueueGenericSend>
 8007504:	6278      	str	r0, [r7, #36]	@ 0x24
 8007506:	e008      	b.n	800751a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007508:	4b06      	ldr	r3, [pc, #24]	@ (8007524 <xTimerGenericCommand+0x98>)
 800750a:	6818      	ldr	r0, [r3, #0]
 800750c:	f107 0110 	add.w	r1, r7, #16
 8007510:	2300      	movs	r3, #0
 8007512:	683a      	ldr	r2, [r7, #0]
 8007514:	f7fe f93e 	bl	8005794 <xQueueGenericSendFromISR>
 8007518:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800751a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800751c:	4618      	mov	r0, r3
 800751e:	3728      	adds	r7, #40	@ 0x28
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	20000e94 	.word	0x20000e94

08007528 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b088      	sub	sp, #32
 800752c:	af02      	add	r7, sp, #8
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007532:	4b23      	ldr	r3, [pc, #140]	@ (80075c0 <prvProcessExpiredTimer+0x98>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	3304      	adds	r3, #4
 8007540:	4618      	mov	r0, r3
 8007542:	f7fd fdfd 	bl	8005140 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800754c:	f003 0304 	and.w	r3, r3, #4
 8007550:	2b00      	cmp	r3, #0
 8007552:	d023      	beq.n	800759c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	699a      	ldr	r2, [r3, #24]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	18d1      	adds	r1, r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	6978      	ldr	r0, [r7, #20]
 8007562:	f000 f8d5 	bl	8007710 <prvInsertTimerInActiveList>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d020      	beq.n	80075ae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800756c:	2300      	movs	r3, #0
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	2300      	movs	r3, #0
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	2100      	movs	r1, #0
 8007576:	6978      	ldr	r0, [r7, #20]
 8007578:	f7ff ff88 	bl	800748c <xTimerGenericCommand>
 800757c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d114      	bne.n	80075ae <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	60fb      	str	r3, [r7, #12]
}
 8007596:	bf00      	nop
 8007598:	bf00      	nop
 800759a:	e7fd      	b.n	8007598 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075a2:	f023 0301 	bic.w	r3, r3, #1
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	6978      	ldr	r0, [r7, #20]
 80075b4:	4798      	blx	r3
}
 80075b6:	bf00      	nop
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	20000e8c 	.word	0x20000e8c

080075c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075cc:	f107 0308 	add.w	r3, r7, #8
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 f859 	bl	8007688 <prvGetNextExpireTime>
 80075d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	4619      	mov	r1, r3
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f000 f805 	bl	80075ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80075e2:	f000 f8d7 	bl	8007794 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075e6:	bf00      	nop
 80075e8:	e7f0      	b.n	80075cc <prvTimerTask+0x8>
	...

080075ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80075f6:	f7fe ff11 	bl	800641c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075fa:	f107 0308 	add.w	r3, r7, #8
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 f866 	bl	80076d0 <prvSampleTimeNow>
 8007604:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d130      	bne.n	800766e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10a      	bne.n	8007628 <prvProcessTimerOrBlockTask+0x3c>
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	429a      	cmp	r2, r3
 8007618:	d806      	bhi.n	8007628 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800761a:	f7fe ff0d 	bl	8006438 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800761e:	68f9      	ldr	r1, [r7, #12]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff ff81 	bl	8007528 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007626:	e024      	b.n	8007672 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d008      	beq.n	8007640 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800762e:	4b13      	ldr	r3, [pc, #76]	@ (800767c <prvProcessTimerOrBlockTask+0x90>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <prvProcessTimerOrBlockTask+0x50>
 8007638:	2301      	movs	r3, #1
 800763a:	e000      	b.n	800763e <prvProcessTimerOrBlockTask+0x52>
 800763c:	2300      	movs	r3, #0
 800763e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007640:	4b0f      	ldr	r3, [pc, #60]	@ (8007680 <prvProcessTimerOrBlockTask+0x94>)
 8007642:	6818      	ldr	r0, [r3, #0]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	683a      	ldr	r2, [r7, #0]
 800764c:	4619      	mov	r1, r3
 800764e:	f7fe fc83 	bl	8005f58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007652:	f7fe fef1 	bl	8006438 <xTaskResumeAll>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10a      	bne.n	8007672 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800765c:	4b09      	ldr	r3, [pc, #36]	@ (8007684 <prvProcessTimerOrBlockTask+0x98>)
 800765e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	f3bf 8f6f 	isb	sy
}
 800766c:	e001      	b.n	8007672 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800766e:	f7fe fee3 	bl	8006438 <xTaskResumeAll>
}
 8007672:	bf00      	nop
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	20000e90 	.word	0x20000e90
 8007680:	20000e94 	.word	0x20000e94
 8007684:	e000ed04 	.word	0xe000ed04

08007688 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007690:	4b0e      	ldr	r3, [pc, #56]	@ (80076cc <prvGetNextExpireTime+0x44>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <prvGetNextExpireTime+0x16>
 800769a:	2201      	movs	r2, #1
 800769c:	e000      	b.n	80076a0 <prvGetNextExpireTime+0x18>
 800769e:	2200      	movs	r2, #0
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d105      	bne.n	80076b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076ac:	4b07      	ldr	r3, [pc, #28]	@ (80076cc <prvGetNextExpireTime+0x44>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	60fb      	str	r3, [r7, #12]
 80076b6:	e001      	b.n	80076bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80076bc:	68fb      	ldr	r3, [r7, #12]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	20000e8c 	.word	0x20000e8c

080076d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80076d8:	f7fe ff4c 	bl	8006574 <xTaskGetTickCount>
 80076dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80076de:	4b0b      	ldr	r3, [pc, #44]	@ (800770c <prvSampleTimeNow+0x3c>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d205      	bcs.n	80076f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80076e8:	f000 f93a 	bl	8007960 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	e002      	b.n	80076fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80076fa:	4a04      	ldr	r2, [pc, #16]	@ (800770c <prvSampleTimeNow+0x3c>)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007700:	68fb      	ldr	r3, [r7, #12]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	20000e9c 	.word	0x20000e9c

08007710 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
 800771c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800771e:	2300      	movs	r3, #0
 8007720:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	429a      	cmp	r2, r3
 8007734:	d812      	bhi.n	800775c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	1ad2      	subs	r2, r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	429a      	cmp	r2, r3
 8007742:	d302      	bcc.n	800774a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007744:	2301      	movs	r3, #1
 8007746:	617b      	str	r3, [r7, #20]
 8007748:	e01b      	b.n	8007782 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800774a:	4b10      	ldr	r3, [pc, #64]	@ (800778c <prvInsertTimerInActiveList+0x7c>)
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3304      	adds	r3, #4
 8007752:	4619      	mov	r1, r3
 8007754:	4610      	mov	r0, r2
 8007756:	f7fd fcba 	bl	80050ce <vListInsert>
 800775a:	e012      	b.n	8007782 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	429a      	cmp	r2, r3
 8007762:	d206      	bcs.n	8007772 <prvInsertTimerInActiveList+0x62>
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	429a      	cmp	r2, r3
 800776a:	d302      	bcc.n	8007772 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800776c:	2301      	movs	r3, #1
 800776e:	617b      	str	r3, [r7, #20]
 8007770:	e007      	b.n	8007782 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007772:	4b07      	ldr	r3, [pc, #28]	@ (8007790 <prvInsertTimerInActiveList+0x80>)
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	3304      	adds	r3, #4
 800777a:	4619      	mov	r1, r3
 800777c:	4610      	mov	r0, r2
 800777e:	f7fd fca6 	bl	80050ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007782:	697b      	ldr	r3, [r7, #20]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3718      	adds	r7, #24
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	20000e90 	.word	0x20000e90
 8007790:	20000e8c 	.word	0x20000e8c

08007794 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b08e      	sub	sp, #56	@ 0x38
 8007798:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800779a:	e0ce      	b.n	800793a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	da19      	bge.n	80077d6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80077a2:	1d3b      	adds	r3, r7, #4
 80077a4:	3304      	adds	r3, #4
 80077a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80077a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10b      	bne.n	80077c6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	61fb      	str	r3, [r7, #28]
}
 80077c0:	bf00      	nop
 80077c2:	bf00      	nop
 80077c4:	e7fd      	b.n	80077c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80077c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077cc:	6850      	ldr	r0, [r2, #4]
 80077ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077d0:	6892      	ldr	r2, [r2, #8]
 80077d2:	4611      	mov	r1, r2
 80077d4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f2c0 80ae 	blt.w	800793a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80077e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d004      	beq.n	80077f4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ec:	3304      	adds	r3, #4
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fd fca6 	bl	8005140 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077f4:	463b      	mov	r3, r7
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7ff ff6a 	bl	80076d0 <prvSampleTimeNow>
 80077fc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b09      	cmp	r3, #9
 8007802:	f200 8097 	bhi.w	8007934 <prvProcessReceivedCommands+0x1a0>
 8007806:	a201      	add	r2, pc, #4	@ (adr r2, 800780c <prvProcessReceivedCommands+0x78>)
 8007808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780c:	08007835 	.word	0x08007835
 8007810:	08007835 	.word	0x08007835
 8007814:	08007835 	.word	0x08007835
 8007818:	080078ab 	.word	0x080078ab
 800781c:	080078bf 	.word	0x080078bf
 8007820:	0800790b 	.word	0x0800790b
 8007824:	08007835 	.word	0x08007835
 8007828:	08007835 	.word	0x08007835
 800782c:	080078ab 	.word	0x080078ab
 8007830:	080078bf 	.word	0x080078bf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007836:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800783a:	f043 0301 	orr.w	r3, r3, #1
 800783e:	b2da      	uxtb	r2, r3
 8007840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007842:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	18d1      	adds	r1, r2, r3
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007854:	f7ff ff5c 	bl	8007710 <prvInsertTimerInActiveList>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d06c      	beq.n	8007938 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800785e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007864:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007868:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800786c:	f003 0304 	and.w	r3, r3, #4
 8007870:	2b00      	cmp	r3, #0
 8007872:	d061      	beq.n	8007938 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	441a      	add	r2, r3
 800787c:	2300      	movs	r3, #0
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	2300      	movs	r3, #0
 8007882:	2100      	movs	r1, #0
 8007884:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007886:	f7ff fe01 	bl	800748c <xTimerGenericCommand>
 800788a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d152      	bne.n	8007938 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	61bb      	str	r3, [r7, #24]
}
 80078a4:	bf00      	nop
 80078a6:	bf00      	nop
 80078a8:	e7fd      	b.n	80078a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078b0:	f023 0301 	bic.w	r3, r3, #1
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80078bc:	e03d      	b.n	800793a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078c4:	f043 0301 	orr.w	r3, r3, #1
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80078d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d10b      	bne.n	80078f6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80078de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	617b      	str	r3, [r7, #20]
}
 80078f0:	bf00      	nop
 80078f2:	bf00      	nop
 80078f4:	e7fd      	b.n	80078f2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80078f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f8:	699a      	ldr	r2, [r3, #24]
 80078fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fc:	18d1      	adds	r1, r2, r3
 80078fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007902:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007904:	f7ff ff04 	bl	8007710 <prvInsertTimerInActiveList>
					break;
 8007908:	e017      	b.n	800793a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800790a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d103      	bne.n	8007920 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007918:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800791a:	f000 fbe5 	bl	80080e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800791e:	e00c      	b.n	800793a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007922:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007926:	f023 0301 	bic.w	r3, r3, #1
 800792a:	b2da      	uxtb	r2, r3
 800792c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007932:	e002      	b.n	800793a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007934:	bf00      	nop
 8007936:	e000      	b.n	800793a <prvProcessReceivedCommands+0x1a6>
					break;
 8007938:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800793a:	4b08      	ldr	r3, [pc, #32]	@ (800795c <prvProcessReceivedCommands+0x1c8>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	1d39      	adds	r1, r7, #4
 8007940:	2200      	movs	r2, #0
 8007942:	4618      	mov	r0, r3
 8007944:	f7fd ffc4 	bl	80058d0 <xQueueReceive>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	f47f af26 	bne.w	800779c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007950:	bf00      	nop
 8007952:	bf00      	nop
 8007954:	3730      	adds	r7, #48	@ 0x30
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	20000e94 	.word	0x20000e94

08007960 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b088      	sub	sp, #32
 8007964:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007966:	e049      	b.n	80079fc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007968:	4b2e      	ldr	r3, [pc, #184]	@ (8007a24 <prvSwitchTimerLists+0xc4>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007972:	4b2c      	ldr	r3, [pc, #176]	@ (8007a24 <prvSwitchTimerLists+0xc4>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3304      	adds	r3, #4
 8007980:	4618      	mov	r0, r3
 8007982:	f7fd fbdd 	bl	8005140 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6a1b      	ldr	r3, [r3, #32]
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007994:	f003 0304 	and.w	r3, r3, #4
 8007998:	2b00      	cmp	r3, #0
 800799a:	d02f      	beq.n	80079fc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	4413      	add	r3, r2
 80079a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d90e      	bls.n	80079cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079ba:	4b1a      	ldr	r3, [pc, #104]	@ (8007a24 <prvSwitchTimerLists+0xc4>)
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	3304      	adds	r3, #4
 80079c2:	4619      	mov	r1, r3
 80079c4:	4610      	mov	r0, r2
 80079c6:	f7fd fb82 	bl	80050ce <vListInsert>
 80079ca:	e017      	b.n	80079fc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079cc:	2300      	movs	r3, #0
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	2300      	movs	r3, #0
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	2100      	movs	r1, #0
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f7ff fd58 	bl	800748c <xTimerGenericCommand>
 80079dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10b      	bne.n	80079fc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80079e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e8:	f383 8811 	msr	BASEPRI, r3
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	603b      	str	r3, [r7, #0]
}
 80079f6:	bf00      	nop
 80079f8:	bf00      	nop
 80079fa:	e7fd      	b.n	80079f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079fc:	4b09      	ldr	r3, [pc, #36]	@ (8007a24 <prvSwitchTimerLists+0xc4>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1b0      	bne.n	8007968 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a06:	4b07      	ldr	r3, [pc, #28]	@ (8007a24 <prvSwitchTimerLists+0xc4>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a0c:	4b06      	ldr	r3, [pc, #24]	@ (8007a28 <prvSwitchTimerLists+0xc8>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a04      	ldr	r2, [pc, #16]	@ (8007a24 <prvSwitchTimerLists+0xc4>)
 8007a12:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a14:	4a04      	ldr	r2, [pc, #16]	@ (8007a28 <prvSwitchTimerLists+0xc8>)
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	6013      	str	r3, [r2, #0]
}
 8007a1a:	bf00      	nop
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	20000e8c 	.word	0x20000e8c
 8007a28:	20000e90 	.word	0x20000e90

08007a2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a32:	f000 f969 	bl	8007d08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007a36:	4b15      	ldr	r3, [pc, #84]	@ (8007a8c <prvCheckForValidListAndQueue+0x60>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d120      	bne.n	8007a80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a3e:	4814      	ldr	r0, [pc, #80]	@ (8007a90 <prvCheckForValidListAndQueue+0x64>)
 8007a40:	f7fd faf4 	bl	800502c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a44:	4813      	ldr	r0, [pc, #76]	@ (8007a94 <prvCheckForValidListAndQueue+0x68>)
 8007a46:	f7fd faf1 	bl	800502c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a4a:	4b13      	ldr	r3, [pc, #76]	@ (8007a98 <prvCheckForValidListAndQueue+0x6c>)
 8007a4c:	4a10      	ldr	r2, [pc, #64]	@ (8007a90 <prvCheckForValidListAndQueue+0x64>)
 8007a4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a50:	4b12      	ldr	r3, [pc, #72]	@ (8007a9c <prvCheckForValidListAndQueue+0x70>)
 8007a52:	4a10      	ldr	r2, [pc, #64]	@ (8007a94 <prvCheckForValidListAndQueue+0x68>)
 8007a54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a56:	2300      	movs	r3, #0
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	4b11      	ldr	r3, [pc, #68]	@ (8007aa0 <prvCheckForValidListAndQueue+0x74>)
 8007a5c:	4a11      	ldr	r2, [pc, #68]	@ (8007aa4 <prvCheckForValidListAndQueue+0x78>)
 8007a5e:	2110      	movs	r1, #16
 8007a60:	200a      	movs	r0, #10
 8007a62:	f7fd fc01 	bl	8005268 <xQueueGenericCreateStatic>
 8007a66:	4603      	mov	r3, r0
 8007a68:	4a08      	ldr	r2, [pc, #32]	@ (8007a8c <prvCheckForValidListAndQueue+0x60>)
 8007a6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a6c:	4b07      	ldr	r3, [pc, #28]	@ (8007a8c <prvCheckForValidListAndQueue+0x60>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d005      	beq.n	8007a80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a74:	4b05      	ldr	r3, [pc, #20]	@ (8007a8c <prvCheckForValidListAndQueue+0x60>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	490b      	ldr	r1, [pc, #44]	@ (8007aa8 <prvCheckForValidListAndQueue+0x7c>)
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fe fa42 	bl	8005f04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a80:	f000 f974 	bl	8007d6c <vPortExitCritical>
}
 8007a84:	bf00      	nop
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	20000e94 	.word	0x20000e94
 8007a90:	20000e64 	.word	0x20000e64
 8007a94:	20000e78 	.word	0x20000e78
 8007a98:	20000e8c 	.word	0x20000e8c
 8007a9c:	20000e90 	.word	0x20000e90
 8007aa0:	20000f40 	.word	0x20000f40
 8007aa4:	20000ea0 	.word	0x20000ea0
 8007aa8:	08008e9c 	.word	0x08008e9c

08007aac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	3b04      	subs	r3, #4
 8007abc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007ac4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3b04      	subs	r3, #4
 8007aca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	f023 0201 	bic.w	r2, r3, #1
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3b04      	subs	r3, #4
 8007ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007adc:	4a0c      	ldr	r2, [pc, #48]	@ (8007b10 <pxPortInitialiseStack+0x64>)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3b14      	subs	r3, #20
 8007ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3b04      	subs	r3, #4
 8007af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f06f 0202 	mvn.w	r2, #2
 8007afa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3b20      	subs	r3, #32
 8007b00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b02:	68fb      	ldr	r3, [r7, #12]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	08007b15 	.word	0x08007b15

08007b14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b1e:	4b13      	ldr	r3, [pc, #76]	@ (8007b6c <prvTaskExitError+0x58>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b26:	d00b      	beq.n	8007b40 <prvTaskExitError+0x2c>
	__asm volatile
 8007b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	60fb      	str	r3, [r7, #12]
}
 8007b3a:	bf00      	nop
 8007b3c:	bf00      	nop
 8007b3e:	e7fd      	b.n	8007b3c <prvTaskExitError+0x28>
	__asm volatile
 8007b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	60bb      	str	r3, [r7, #8]
}
 8007b52:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b54:	bf00      	nop
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d0fc      	beq.n	8007b56 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b5c:	bf00      	nop
 8007b5e:	bf00      	nop
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	2000001c 	.word	0x2000001c

08007b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b70:	4b07      	ldr	r3, [pc, #28]	@ (8007b90 <pxCurrentTCBConst2>)
 8007b72:	6819      	ldr	r1, [r3, #0]
 8007b74:	6808      	ldr	r0, [r1, #0]
 8007b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7a:	f380 8809 	msr	PSP, r0
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f04f 0000 	mov.w	r0, #0
 8007b86:	f380 8811 	msr	BASEPRI, r0
 8007b8a:	4770      	bx	lr
 8007b8c:	f3af 8000 	nop.w

08007b90 <pxCurrentTCBConst2>:
 8007b90:	20000964 	.word	0x20000964
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b94:	bf00      	nop
 8007b96:	bf00      	nop

08007b98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b98:	4808      	ldr	r0, [pc, #32]	@ (8007bbc <prvPortStartFirstTask+0x24>)
 8007b9a:	6800      	ldr	r0, [r0, #0]
 8007b9c:	6800      	ldr	r0, [r0, #0]
 8007b9e:	f380 8808 	msr	MSP, r0
 8007ba2:	f04f 0000 	mov.w	r0, #0
 8007ba6:	f380 8814 	msr	CONTROL, r0
 8007baa:	b662      	cpsie	i
 8007bac:	b661      	cpsie	f
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	df00      	svc	0
 8007bb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007bba:	bf00      	nop
 8007bbc:	e000ed08 	.word	0xe000ed08

08007bc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007bc6:	4b47      	ldr	r3, [pc, #284]	@ (8007ce4 <xPortStartScheduler+0x124>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a47      	ldr	r2, [pc, #284]	@ (8007ce8 <xPortStartScheduler+0x128>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d10b      	bne.n	8007be8 <xPortStartScheduler+0x28>
	__asm volatile
 8007bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	60fb      	str	r3, [r7, #12]
}
 8007be2:	bf00      	nop
 8007be4:	bf00      	nop
 8007be6:	e7fd      	b.n	8007be4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007be8:	4b3e      	ldr	r3, [pc, #248]	@ (8007ce4 <xPortStartScheduler+0x124>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a3f      	ldr	r2, [pc, #252]	@ (8007cec <xPortStartScheduler+0x12c>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d10b      	bne.n	8007c0a <xPortStartScheduler+0x4a>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	613b      	str	r3, [r7, #16]
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop
 8007c08:	e7fd      	b.n	8007c06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c0a:	4b39      	ldr	r3, [pc, #228]	@ (8007cf0 <xPortStartScheduler+0x130>)
 8007c0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	22ff      	movs	r2, #255	@ 0xff
 8007c1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c24:	78fb      	ldrb	r3, [r7, #3]
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	4b31      	ldr	r3, [pc, #196]	@ (8007cf4 <xPortStartScheduler+0x134>)
 8007c30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c32:	4b31      	ldr	r3, [pc, #196]	@ (8007cf8 <xPortStartScheduler+0x138>)
 8007c34:	2207      	movs	r2, #7
 8007c36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c38:	e009      	b.n	8007c4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007c3a:	4b2f      	ldr	r3, [pc, #188]	@ (8007cf8 <xPortStartScheduler+0x138>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	4a2d      	ldr	r2, [pc, #180]	@ (8007cf8 <xPortStartScheduler+0x138>)
 8007c42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c44:	78fb      	ldrb	r3, [r7, #3]
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	005b      	lsls	r3, r3, #1
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c4e:	78fb      	ldrb	r3, [r7, #3]
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c56:	2b80      	cmp	r3, #128	@ 0x80
 8007c58:	d0ef      	beq.n	8007c3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c5a:	4b27      	ldr	r3, [pc, #156]	@ (8007cf8 <xPortStartScheduler+0x138>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f1c3 0307 	rsb	r3, r3, #7
 8007c62:	2b04      	cmp	r3, #4
 8007c64:	d00b      	beq.n	8007c7e <xPortStartScheduler+0xbe>
	__asm volatile
 8007c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6a:	f383 8811 	msr	BASEPRI, r3
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f3bf 8f4f 	dsb	sy
 8007c76:	60bb      	str	r3, [r7, #8]
}
 8007c78:	bf00      	nop
 8007c7a:	bf00      	nop
 8007c7c:	e7fd      	b.n	8007c7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8007cf8 <xPortStartScheduler+0x138>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	021b      	lsls	r3, r3, #8
 8007c84:	4a1c      	ldr	r2, [pc, #112]	@ (8007cf8 <xPortStartScheduler+0x138>)
 8007c86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c88:	4b1b      	ldr	r3, [pc, #108]	@ (8007cf8 <xPortStartScheduler+0x138>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007c90:	4a19      	ldr	r2, [pc, #100]	@ (8007cf8 <xPortStartScheduler+0x138>)
 8007c92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	b2da      	uxtb	r2, r3
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c9c:	4b17      	ldr	r3, [pc, #92]	@ (8007cfc <xPortStartScheduler+0x13c>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a16      	ldr	r2, [pc, #88]	@ (8007cfc <xPortStartScheduler+0x13c>)
 8007ca2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007ca6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ca8:	4b14      	ldr	r3, [pc, #80]	@ (8007cfc <xPortStartScheduler+0x13c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a13      	ldr	r2, [pc, #76]	@ (8007cfc <xPortStartScheduler+0x13c>)
 8007cae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007cb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007cb4:	f000 f8da 	bl	8007e6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007cb8:	4b11      	ldr	r3, [pc, #68]	@ (8007d00 <xPortStartScheduler+0x140>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007cbe:	f000 f8f9 	bl	8007eb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007cc2:	4b10      	ldr	r3, [pc, #64]	@ (8007d04 <xPortStartScheduler+0x144>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8007d04 <xPortStartScheduler+0x144>)
 8007cc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007ccc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007cce:	f7ff ff63 	bl	8007b98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007cd2:	f7fe fd19 	bl	8006708 <vTaskSwitchContext>
	prvTaskExitError();
 8007cd6:	f7ff ff1d 	bl	8007b14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	e000ed00 	.word	0xe000ed00
 8007ce8:	410fc271 	.word	0x410fc271
 8007cec:	410fc270 	.word	0x410fc270
 8007cf0:	e000e400 	.word	0xe000e400
 8007cf4:	20000f90 	.word	0x20000f90
 8007cf8:	20000f94 	.word	0x20000f94
 8007cfc:	e000ed20 	.word	0xe000ed20
 8007d00:	2000001c 	.word	0x2000001c
 8007d04:	e000ef34 	.word	0xe000ef34

08007d08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	607b      	str	r3, [r7, #4]
}
 8007d20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d22:	4b10      	ldr	r3, [pc, #64]	@ (8007d64 <vPortEnterCritical+0x5c>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	3301      	adds	r3, #1
 8007d28:	4a0e      	ldr	r2, [pc, #56]	@ (8007d64 <vPortEnterCritical+0x5c>)
 8007d2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8007d64 <vPortEnterCritical+0x5c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d110      	bne.n	8007d56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d34:	4b0c      	ldr	r3, [pc, #48]	@ (8007d68 <vPortEnterCritical+0x60>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00b      	beq.n	8007d56 <vPortEnterCritical+0x4e>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	603b      	str	r3, [r7, #0]
}
 8007d50:	bf00      	nop
 8007d52:	bf00      	nop
 8007d54:	e7fd      	b.n	8007d52 <vPortEnterCritical+0x4a>
	}
}
 8007d56:	bf00      	nop
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	2000001c 	.word	0x2000001c
 8007d68:	e000ed04 	.word	0xe000ed04

08007d6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d72:	4b12      	ldr	r3, [pc, #72]	@ (8007dbc <vPortExitCritical+0x50>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10b      	bne.n	8007d92 <vPortExitCritical+0x26>
	__asm volatile
 8007d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d7e:	f383 8811 	msr	BASEPRI, r3
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	607b      	str	r3, [r7, #4]
}
 8007d8c:	bf00      	nop
 8007d8e:	bf00      	nop
 8007d90:	e7fd      	b.n	8007d8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d92:	4b0a      	ldr	r3, [pc, #40]	@ (8007dbc <vPortExitCritical+0x50>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	3b01      	subs	r3, #1
 8007d98:	4a08      	ldr	r2, [pc, #32]	@ (8007dbc <vPortExitCritical+0x50>)
 8007d9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d9c:	4b07      	ldr	r3, [pc, #28]	@ (8007dbc <vPortExitCritical+0x50>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d105      	bne.n	8007db0 <vPortExitCritical+0x44>
 8007da4:	2300      	movs	r3, #0
 8007da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	f383 8811 	msr	BASEPRI, r3
}
 8007dae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	2000001c 	.word	0x2000001c

08007dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007dc0:	f3ef 8009 	mrs	r0, PSP
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	4b15      	ldr	r3, [pc, #84]	@ (8007e20 <pxCurrentTCBConst>)
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	f01e 0f10 	tst.w	lr, #16
 8007dd0:	bf08      	it	eq
 8007dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dda:	6010      	str	r0, [r2, #0]
 8007ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007de0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007de4:	f380 8811 	msr	BASEPRI, r0
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f7fe fc8a 	bl	8006708 <vTaskSwitchContext>
 8007df4:	f04f 0000 	mov.w	r0, #0
 8007df8:	f380 8811 	msr	BASEPRI, r0
 8007dfc:	bc09      	pop	{r0, r3}
 8007dfe:	6819      	ldr	r1, [r3, #0]
 8007e00:	6808      	ldr	r0, [r1, #0]
 8007e02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e06:	f01e 0f10 	tst.w	lr, #16
 8007e0a:	bf08      	it	eq
 8007e0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e10:	f380 8809 	msr	PSP, r0
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	f3af 8000 	nop.w

08007e20 <pxCurrentTCBConst>:
 8007e20:	20000964 	.word	0x20000964
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e24:	bf00      	nop
 8007e26:	bf00      	nop

08007e28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	607b      	str	r3, [r7, #4]
}
 8007e40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e42:	f7fe fba7 	bl	8006594 <xTaskIncrementTick>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e4c:	4b06      	ldr	r3, [pc, #24]	@ (8007e68 <xPortSysTickHandler+0x40>)
 8007e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	2300      	movs	r3, #0
 8007e56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	f383 8811 	msr	BASEPRI, r3
}
 8007e5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	e000ed04 	.word	0xe000ed04

08007e6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e70:	4b0b      	ldr	r3, [pc, #44]	@ (8007ea0 <vPortSetupTimerInterrupt+0x34>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e76:	4b0b      	ldr	r3, [pc, #44]	@ (8007ea4 <vPortSetupTimerInterrupt+0x38>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ea8 <vPortSetupTimerInterrupt+0x3c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a0a      	ldr	r2, [pc, #40]	@ (8007eac <vPortSetupTimerInterrupt+0x40>)
 8007e82:	fba2 2303 	umull	r2, r3, r2, r3
 8007e86:	099b      	lsrs	r3, r3, #6
 8007e88:	4a09      	ldr	r2, [pc, #36]	@ (8007eb0 <vPortSetupTimerInterrupt+0x44>)
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e8e:	4b04      	ldr	r3, [pc, #16]	@ (8007ea0 <vPortSetupTimerInterrupt+0x34>)
 8007e90:	2207      	movs	r2, #7
 8007e92:	601a      	str	r2, [r3, #0]
}
 8007e94:	bf00      	nop
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	e000e010 	.word	0xe000e010
 8007ea4:	e000e018 	.word	0xe000e018
 8007ea8:	20000000 	.word	0x20000000
 8007eac:	10624dd3 	.word	0x10624dd3
 8007eb0:	e000e014 	.word	0xe000e014

08007eb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007eb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ec4 <vPortEnableVFP+0x10>
 8007eb8:	6801      	ldr	r1, [r0, #0]
 8007eba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007ebe:	6001      	str	r1, [r0, #0]
 8007ec0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ec2:	bf00      	nop
 8007ec4:	e000ed88 	.word	0xe000ed88

08007ec8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ece:	f3ef 8305 	mrs	r3, IPSR
 8007ed2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b0f      	cmp	r3, #15
 8007ed8:	d915      	bls.n	8007f06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007eda:	4a18      	ldr	r2, [pc, #96]	@ (8007f3c <vPortValidateInterruptPriority+0x74>)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ee4:	4b16      	ldr	r3, [pc, #88]	@ (8007f40 <vPortValidateInterruptPriority+0x78>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	7afa      	ldrb	r2, [r7, #11]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d20b      	bcs.n	8007f06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	607b      	str	r3, [r7, #4]
}
 8007f00:	bf00      	nop
 8007f02:	bf00      	nop
 8007f04:	e7fd      	b.n	8007f02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f06:	4b0f      	ldr	r3, [pc, #60]	@ (8007f44 <vPortValidateInterruptPriority+0x7c>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8007f48 <vPortValidateInterruptPriority+0x80>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d90b      	bls.n	8007f2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f1a:	f383 8811 	msr	BASEPRI, r3
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f3bf 8f4f 	dsb	sy
 8007f26:	603b      	str	r3, [r7, #0]
}
 8007f28:	bf00      	nop
 8007f2a:	bf00      	nop
 8007f2c:	e7fd      	b.n	8007f2a <vPortValidateInterruptPriority+0x62>
	}
 8007f2e:	bf00      	nop
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	e000e3f0 	.word	0xe000e3f0
 8007f40:	20000f90 	.word	0x20000f90
 8007f44:	e000ed0c 	.word	0xe000ed0c
 8007f48:	20000f94 	.word	0x20000f94

08007f4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08a      	sub	sp, #40	@ 0x28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f54:	2300      	movs	r3, #0
 8007f56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f58:	f7fe fa60 	bl	800641c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f5c:	4b5c      	ldr	r3, [pc, #368]	@ (80080d0 <pvPortMalloc+0x184>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f64:	f000 f924 	bl	80081b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f68:	4b5a      	ldr	r3, [pc, #360]	@ (80080d4 <pvPortMalloc+0x188>)
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4013      	ands	r3, r2
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f040 8095 	bne.w	80080a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d01e      	beq.n	8007fba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007f7c:	2208      	movs	r2, #8
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4413      	add	r3, r2
 8007f82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f003 0307 	and.w	r3, r3, #7
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d015      	beq.n	8007fba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f023 0307 	bic.w	r3, r3, #7
 8007f94:	3308      	adds	r3, #8
 8007f96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f003 0307 	and.w	r3, r3, #7
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00b      	beq.n	8007fba <pvPortMalloc+0x6e>
	__asm volatile
 8007fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa6:	f383 8811 	msr	BASEPRI, r3
 8007faa:	f3bf 8f6f 	isb	sy
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	617b      	str	r3, [r7, #20]
}
 8007fb4:	bf00      	nop
 8007fb6:	bf00      	nop
 8007fb8:	e7fd      	b.n	8007fb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d06f      	beq.n	80080a0 <pvPortMalloc+0x154>
 8007fc0:	4b45      	ldr	r3, [pc, #276]	@ (80080d8 <pvPortMalloc+0x18c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d86a      	bhi.n	80080a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007fca:	4b44      	ldr	r3, [pc, #272]	@ (80080dc <pvPortMalloc+0x190>)
 8007fcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007fce:	4b43      	ldr	r3, [pc, #268]	@ (80080dc <pvPortMalloc+0x190>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fd4:	e004      	b.n	8007fe0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d903      	bls.n	8007ff2 <pvPortMalloc+0xa6>
 8007fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1f1      	bne.n	8007fd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ff2:	4b37      	ldr	r3, [pc, #220]	@ (80080d0 <pvPortMalloc+0x184>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d051      	beq.n	80080a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ffc:	6a3b      	ldr	r3, [r7, #32]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2208      	movs	r2, #8
 8008002:	4413      	add	r3, r2
 8008004:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	6a3b      	ldr	r3, [r7, #32]
 800800c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800800e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008010:	685a      	ldr	r2, [r3, #4]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	1ad2      	subs	r2, r2, r3
 8008016:	2308      	movs	r3, #8
 8008018:	005b      	lsls	r3, r3, #1
 800801a:	429a      	cmp	r2, r3
 800801c:	d920      	bls.n	8008060 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800801e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4413      	add	r3, r2
 8008024:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	f003 0307 	and.w	r3, r3, #7
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00b      	beq.n	8008048 <pvPortMalloc+0xfc>
	__asm volatile
 8008030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	613b      	str	r3, [r7, #16]
}
 8008042:	bf00      	nop
 8008044:	bf00      	nop
 8008046:	e7fd      	b.n	8008044 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	1ad2      	subs	r2, r2, r3
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800805a:	69b8      	ldr	r0, [r7, #24]
 800805c:	f000 f90a 	bl	8008274 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008060:	4b1d      	ldr	r3, [pc, #116]	@ (80080d8 <pvPortMalloc+0x18c>)
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	4a1b      	ldr	r2, [pc, #108]	@ (80080d8 <pvPortMalloc+0x18c>)
 800806c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800806e:	4b1a      	ldr	r3, [pc, #104]	@ (80080d8 <pvPortMalloc+0x18c>)
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	4b1b      	ldr	r3, [pc, #108]	@ (80080e0 <pvPortMalloc+0x194>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	429a      	cmp	r2, r3
 8008078:	d203      	bcs.n	8008082 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800807a:	4b17      	ldr	r3, [pc, #92]	@ (80080d8 <pvPortMalloc+0x18c>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a18      	ldr	r2, [pc, #96]	@ (80080e0 <pvPortMalloc+0x194>)
 8008080:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008084:	685a      	ldr	r2, [r3, #4]
 8008086:	4b13      	ldr	r3, [pc, #76]	@ (80080d4 <pvPortMalloc+0x188>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	431a      	orrs	r2, r3
 800808c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008096:	4b13      	ldr	r3, [pc, #76]	@ (80080e4 <pvPortMalloc+0x198>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	3301      	adds	r3, #1
 800809c:	4a11      	ldr	r2, [pc, #68]	@ (80080e4 <pvPortMalloc+0x198>)
 800809e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080a0:	f7fe f9ca 	bl	8006438 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	f003 0307 	and.w	r3, r3, #7
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00b      	beq.n	80080c6 <pvPortMalloc+0x17a>
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	60fb      	str	r3, [r7, #12]
}
 80080c0:	bf00      	nop
 80080c2:	bf00      	nop
 80080c4:	e7fd      	b.n	80080c2 <pvPortMalloc+0x176>
	return pvReturn;
 80080c6:	69fb      	ldr	r3, [r7, #28]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3728      	adds	r7, #40	@ 0x28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	20004ba0 	.word	0x20004ba0
 80080d4:	20004bb4 	.word	0x20004bb4
 80080d8:	20004ba4 	.word	0x20004ba4
 80080dc:	20004b98 	.word	0x20004b98
 80080e0:	20004ba8 	.word	0x20004ba8
 80080e4:	20004bac 	.word	0x20004bac

080080e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d04f      	beq.n	800819a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080fa:	2308      	movs	r3, #8
 80080fc:	425b      	negs	r3, r3
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	4413      	add	r3, r2
 8008102:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	685a      	ldr	r2, [r3, #4]
 800810c:	4b25      	ldr	r3, [pc, #148]	@ (80081a4 <vPortFree+0xbc>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4013      	ands	r3, r2
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10b      	bne.n	800812e <vPortFree+0x46>
	__asm volatile
 8008116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	60fb      	str	r3, [r7, #12]
}
 8008128:	bf00      	nop
 800812a:	bf00      	nop
 800812c:	e7fd      	b.n	800812a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00b      	beq.n	800814e <vPortFree+0x66>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	60bb      	str	r3, [r7, #8]
}
 8008148:	bf00      	nop
 800814a:	bf00      	nop
 800814c:	e7fd      	b.n	800814a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	4b14      	ldr	r3, [pc, #80]	@ (80081a4 <vPortFree+0xbc>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4013      	ands	r3, r2
 8008158:	2b00      	cmp	r3, #0
 800815a:	d01e      	beq.n	800819a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d11a      	bne.n	800819a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	4b0e      	ldr	r3, [pc, #56]	@ (80081a4 <vPortFree+0xbc>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	43db      	mvns	r3, r3
 800816e:	401a      	ands	r2, r3
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008174:	f7fe f952 	bl	800641c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	4b0a      	ldr	r3, [pc, #40]	@ (80081a8 <vPortFree+0xc0>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4413      	add	r3, r2
 8008182:	4a09      	ldr	r2, [pc, #36]	@ (80081a8 <vPortFree+0xc0>)
 8008184:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008186:	6938      	ldr	r0, [r7, #16]
 8008188:	f000 f874 	bl	8008274 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800818c:	4b07      	ldr	r3, [pc, #28]	@ (80081ac <vPortFree+0xc4>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3301      	adds	r3, #1
 8008192:	4a06      	ldr	r2, [pc, #24]	@ (80081ac <vPortFree+0xc4>)
 8008194:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008196:	f7fe f94f 	bl	8006438 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800819a:	bf00      	nop
 800819c:	3718      	adds	r7, #24
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20004bb4 	.word	0x20004bb4
 80081a8:	20004ba4 	.word	0x20004ba4
 80081ac:	20004bb0 	.word	0x20004bb0

080081b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80081ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80081bc:	4b27      	ldr	r3, [pc, #156]	@ (800825c <prvHeapInit+0xac>)
 80081be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f003 0307 	and.w	r3, r3, #7
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00c      	beq.n	80081e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	3307      	adds	r3, #7
 80081ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f023 0307 	bic.w	r3, r3, #7
 80081d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	4a1f      	ldr	r2, [pc, #124]	@ (800825c <prvHeapInit+0xac>)
 80081e0:	4413      	add	r3, r2
 80081e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80081e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008260 <prvHeapInit+0xb0>)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80081ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008260 <prvHeapInit+0xb0>)
 80081f0:	2200      	movs	r2, #0
 80081f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	4413      	add	r3, r2
 80081fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081fc:	2208      	movs	r2, #8
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	1a9b      	subs	r3, r3, r2
 8008202:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f023 0307 	bic.w	r3, r3, #7
 800820a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	4a15      	ldr	r2, [pc, #84]	@ (8008264 <prvHeapInit+0xb4>)
 8008210:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008212:	4b14      	ldr	r3, [pc, #80]	@ (8008264 <prvHeapInit+0xb4>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2200      	movs	r2, #0
 8008218:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800821a:	4b12      	ldr	r3, [pc, #72]	@ (8008264 <prvHeapInit+0xb4>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2200      	movs	r2, #0
 8008220:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	1ad2      	subs	r2, r2, r3
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008230:	4b0c      	ldr	r3, [pc, #48]	@ (8008264 <prvHeapInit+0xb4>)
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	4a0a      	ldr	r2, [pc, #40]	@ (8008268 <prvHeapInit+0xb8>)
 800823e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	4a09      	ldr	r2, [pc, #36]	@ (800826c <prvHeapInit+0xbc>)
 8008246:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008248:	4b09      	ldr	r3, [pc, #36]	@ (8008270 <prvHeapInit+0xc0>)
 800824a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800824e:	601a      	str	r2, [r3, #0]
}
 8008250:	bf00      	nop
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	20000f98 	.word	0x20000f98
 8008260:	20004b98 	.word	0x20004b98
 8008264:	20004ba0 	.word	0x20004ba0
 8008268:	20004ba8 	.word	0x20004ba8
 800826c:	20004ba4 	.word	0x20004ba4
 8008270:	20004bb4 	.word	0x20004bb4

08008274 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800827c:	4b28      	ldr	r3, [pc, #160]	@ (8008320 <prvInsertBlockIntoFreeList+0xac>)
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	e002      	b.n	8008288 <prvInsertBlockIntoFreeList+0x14>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	429a      	cmp	r2, r3
 8008290:	d8f7      	bhi.n	8008282 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	4413      	add	r3, r2
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d108      	bne.n	80082b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	685a      	ldr	r2, [r3, #4]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	441a      	add	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	441a      	add	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d118      	bne.n	80082fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	4b15      	ldr	r3, [pc, #84]	@ (8008324 <prvInsertBlockIntoFreeList+0xb0>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d00d      	beq.n	80082f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	441a      	add	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	601a      	str	r2, [r3, #0]
 80082f0:	e008      	b.n	8008304 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008324 <prvInsertBlockIntoFreeList+0xb0>)
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	e003      	b.n	8008304 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	429a      	cmp	r2, r3
 800830a:	d002      	beq.n	8008312 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008312:	bf00      	nop
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	20004b98 	.word	0x20004b98
 8008324:	20004ba0 	.word	0x20004ba0

08008328 <siprintf>:
 8008328:	b40e      	push	{r1, r2, r3}
 800832a:	b510      	push	{r4, lr}
 800832c:	b09d      	sub	sp, #116	@ 0x74
 800832e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008330:	9002      	str	r0, [sp, #8]
 8008332:	9006      	str	r0, [sp, #24]
 8008334:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008338:	480a      	ldr	r0, [pc, #40]	@ (8008364 <siprintf+0x3c>)
 800833a:	9107      	str	r1, [sp, #28]
 800833c:	9104      	str	r1, [sp, #16]
 800833e:	490a      	ldr	r1, [pc, #40]	@ (8008368 <siprintf+0x40>)
 8008340:	f853 2b04 	ldr.w	r2, [r3], #4
 8008344:	9105      	str	r1, [sp, #20]
 8008346:	2400      	movs	r4, #0
 8008348:	a902      	add	r1, sp, #8
 800834a:	6800      	ldr	r0, [r0, #0]
 800834c:	9301      	str	r3, [sp, #4]
 800834e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008350:	f000 fa08 	bl	8008764 <_svfiprintf_r>
 8008354:	9b02      	ldr	r3, [sp, #8]
 8008356:	701c      	strb	r4, [r3, #0]
 8008358:	b01d      	add	sp, #116	@ 0x74
 800835a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800835e:	b003      	add	sp, #12
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	20000020 	.word	0x20000020
 8008368:	ffff0208 	.word	0xffff0208

0800836c <memset>:
 800836c:	4402      	add	r2, r0
 800836e:	4603      	mov	r3, r0
 8008370:	4293      	cmp	r3, r2
 8008372:	d100      	bne.n	8008376 <memset+0xa>
 8008374:	4770      	bx	lr
 8008376:	f803 1b01 	strb.w	r1, [r3], #1
 800837a:	e7f9      	b.n	8008370 <memset+0x4>

0800837c <_reclaim_reent>:
 800837c:	4b2d      	ldr	r3, [pc, #180]	@ (8008434 <_reclaim_reent+0xb8>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4283      	cmp	r3, r0
 8008382:	b570      	push	{r4, r5, r6, lr}
 8008384:	4604      	mov	r4, r0
 8008386:	d053      	beq.n	8008430 <_reclaim_reent+0xb4>
 8008388:	69c3      	ldr	r3, [r0, #28]
 800838a:	b31b      	cbz	r3, 80083d4 <_reclaim_reent+0x58>
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	b163      	cbz	r3, 80083aa <_reclaim_reent+0x2e>
 8008390:	2500      	movs	r5, #0
 8008392:	69e3      	ldr	r3, [r4, #28]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	5959      	ldr	r1, [r3, r5]
 8008398:	b9b1      	cbnz	r1, 80083c8 <_reclaim_reent+0x4c>
 800839a:	3504      	adds	r5, #4
 800839c:	2d80      	cmp	r5, #128	@ 0x80
 800839e:	d1f8      	bne.n	8008392 <_reclaim_reent+0x16>
 80083a0:	69e3      	ldr	r3, [r4, #28]
 80083a2:	4620      	mov	r0, r4
 80083a4:	68d9      	ldr	r1, [r3, #12]
 80083a6:	f000 f889 	bl	80084bc <_free_r>
 80083aa:	69e3      	ldr	r3, [r4, #28]
 80083ac:	6819      	ldr	r1, [r3, #0]
 80083ae:	b111      	cbz	r1, 80083b6 <_reclaim_reent+0x3a>
 80083b0:	4620      	mov	r0, r4
 80083b2:	f000 f883 	bl	80084bc <_free_r>
 80083b6:	69e3      	ldr	r3, [r4, #28]
 80083b8:	689d      	ldr	r5, [r3, #8]
 80083ba:	b15d      	cbz	r5, 80083d4 <_reclaim_reent+0x58>
 80083bc:	4629      	mov	r1, r5
 80083be:	4620      	mov	r0, r4
 80083c0:	682d      	ldr	r5, [r5, #0]
 80083c2:	f000 f87b 	bl	80084bc <_free_r>
 80083c6:	e7f8      	b.n	80083ba <_reclaim_reent+0x3e>
 80083c8:	680e      	ldr	r6, [r1, #0]
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 f876 	bl	80084bc <_free_r>
 80083d0:	4631      	mov	r1, r6
 80083d2:	e7e1      	b.n	8008398 <_reclaim_reent+0x1c>
 80083d4:	6961      	ldr	r1, [r4, #20]
 80083d6:	b111      	cbz	r1, 80083de <_reclaim_reent+0x62>
 80083d8:	4620      	mov	r0, r4
 80083da:	f000 f86f 	bl	80084bc <_free_r>
 80083de:	69e1      	ldr	r1, [r4, #28]
 80083e0:	b111      	cbz	r1, 80083e8 <_reclaim_reent+0x6c>
 80083e2:	4620      	mov	r0, r4
 80083e4:	f000 f86a 	bl	80084bc <_free_r>
 80083e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80083ea:	b111      	cbz	r1, 80083f2 <_reclaim_reent+0x76>
 80083ec:	4620      	mov	r0, r4
 80083ee:	f000 f865 	bl	80084bc <_free_r>
 80083f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083f4:	b111      	cbz	r1, 80083fc <_reclaim_reent+0x80>
 80083f6:	4620      	mov	r0, r4
 80083f8:	f000 f860 	bl	80084bc <_free_r>
 80083fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80083fe:	b111      	cbz	r1, 8008406 <_reclaim_reent+0x8a>
 8008400:	4620      	mov	r0, r4
 8008402:	f000 f85b 	bl	80084bc <_free_r>
 8008406:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008408:	b111      	cbz	r1, 8008410 <_reclaim_reent+0x94>
 800840a:	4620      	mov	r0, r4
 800840c:	f000 f856 	bl	80084bc <_free_r>
 8008410:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008412:	b111      	cbz	r1, 800841a <_reclaim_reent+0x9e>
 8008414:	4620      	mov	r0, r4
 8008416:	f000 f851 	bl	80084bc <_free_r>
 800841a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800841c:	b111      	cbz	r1, 8008424 <_reclaim_reent+0xa8>
 800841e:	4620      	mov	r0, r4
 8008420:	f000 f84c 	bl	80084bc <_free_r>
 8008424:	6a23      	ldr	r3, [r4, #32]
 8008426:	b11b      	cbz	r3, 8008430 <_reclaim_reent+0xb4>
 8008428:	4620      	mov	r0, r4
 800842a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800842e:	4718      	bx	r3
 8008430:	bd70      	pop	{r4, r5, r6, pc}
 8008432:	bf00      	nop
 8008434:	20000020 	.word	0x20000020

08008438 <__errno>:
 8008438:	4b01      	ldr	r3, [pc, #4]	@ (8008440 <__errno+0x8>)
 800843a:	6818      	ldr	r0, [r3, #0]
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	20000020 	.word	0x20000020

08008444 <__libc_init_array>:
 8008444:	b570      	push	{r4, r5, r6, lr}
 8008446:	4d0d      	ldr	r5, [pc, #52]	@ (800847c <__libc_init_array+0x38>)
 8008448:	4c0d      	ldr	r4, [pc, #52]	@ (8008480 <__libc_init_array+0x3c>)
 800844a:	1b64      	subs	r4, r4, r5
 800844c:	10a4      	asrs	r4, r4, #2
 800844e:	2600      	movs	r6, #0
 8008450:	42a6      	cmp	r6, r4
 8008452:	d109      	bne.n	8008468 <__libc_init_array+0x24>
 8008454:	4d0b      	ldr	r5, [pc, #44]	@ (8008484 <__libc_init_array+0x40>)
 8008456:	4c0c      	ldr	r4, [pc, #48]	@ (8008488 <__libc_init_array+0x44>)
 8008458:	f000 fc6c 	bl	8008d34 <_init>
 800845c:	1b64      	subs	r4, r4, r5
 800845e:	10a4      	asrs	r4, r4, #2
 8008460:	2600      	movs	r6, #0
 8008462:	42a6      	cmp	r6, r4
 8008464:	d105      	bne.n	8008472 <__libc_init_array+0x2e>
 8008466:	bd70      	pop	{r4, r5, r6, pc}
 8008468:	f855 3b04 	ldr.w	r3, [r5], #4
 800846c:	4798      	blx	r3
 800846e:	3601      	adds	r6, #1
 8008470:	e7ee      	b.n	8008450 <__libc_init_array+0xc>
 8008472:	f855 3b04 	ldr.w	r3, [r5], #4
 8008476:	4798      	blx	r3
 8008478:	3601      	adds	r6, #1
 800847a:	e7f2      	b.n	8008462 <__libc_init_array+0x1e>
 800847c:	08008ff8 	.word	0x08008ff8
 8008480:	08008ff8 	.word	0x08008ff8
 8008484:	08008ff8 	.word	0x08008ff8
 8008488:	08008ffc 	.word	0x08008ffc

0800848c <__retarget_lock_acquire_recursive>:
 800848c:	4770      	bx	lr

0800848e <__retarget_lock_release_recursive>:
 800848e:	4770      	bx	lr

08008490 <strcpy>:
 8008490:	4603      	mov	r3, r0
 8008492:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008496:	f803 2b01 	strb.w	r2, [r3], #1
 800849a:	2a00      	cmp	r2, #0
 800849c:	d1f9      	bne.n	8008492 <strcpy+0x2>
 800849e:	4770      	bx	lr

080084a0 <memcpy>:
 80084a0:	440a      	add	r2, r1
 80084a2:	4291      	cmp	r1, r2
 80084a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80084a8:	d100      	bne.n	80084ac <memcpy+0xc>
 80084aa:	4770      	bx	lr
 80084ac:	b510      	push	{r4, lr}
 80084ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084b6:	4291      	cmp	r1, r2
 80084b8:	d1f9      	bne.n	80084ae <memcpy+0xe>
 80084ba:	bd10      	pop	{r4, pc}

080084bc <_free_r>:
 80084bc:	b538      	push	{r3, r4, r5, lr}
 80084be:	4605      	mov	r5, r0
 80084c0:	2900      	cmp	r1, #0
 80084c2:	d041      	beq.n	8008548 <_free_r+0x8c>
 80084c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084c8:	1f0c      	subs	r4, r1, #4
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	bfb8      	it	lt
 80084ce:	18e4      	addlt	r4, r4, r3
 80084d0:	f000 f8e0 	bl	8008694 <__malloc_lock>
 80084d4:	4a1d      	ldr	r2, [pc, #116]	@ (800854c <_free_r+0x90>)
 80084d6:	6813      	ldr	r3, [r2, #0]
 80084d8:	b933      	cbnz	r3, 80084e8 <_free_r+0x2c>
 80084da:	6063      	str	r3, [r4, #4]
 80084dc:	6014      	str	r4, [r2, #0]
 80084de:	4628      	mov	r0, r5
 80084e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084e4:	f000 b8dc 	b.w	80086a0 <__malloc_unlock>
 80084e8:	42a3      	cmp	r3, r4
 80084ea:	d908      	bls.n	80084fe <_free_r+0x42>
 80084ec:	6820      	ldr	r0, [r4, #0]
 80084ee:	1821      	adds	r1, r4, r0
 80084f0:	428b      	cmp	r3, r1
 80084f2:	bf01      	itttt	eq
 80084f4:	6819      	ldreq	r1, [r3, #0]
 80084f6:	685b      	ldreq	r3, [r3, #4]
 80084f8:	1809      	addeq	r1, r1, r0
 80084fa:	6021      	streq	r1, [r4, #0]
 80084fc:	e7ed      	b.n	80084da <_free_r+0x1e>
 80084fe:	461a      	mov	r2, r3
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	b10b      	cbz	r3, 8008508 <_free_r+0x4c>
 8008504:	42a3      	cmp	r3, r4
 8008506:	d9fa      	bls.n	80084fe <_free_r+0x42>
 8008508:	6811      	ldr	r1, [r2, #0]
 800850a:	1850      	adds	r0, r2, r1
 800850c:	42a0      	cmp	r0, r4
 800850e:	d10b      	bne.n	8008528 <_free_r+0x6c>
 8008510:	6820      	ldr	r0, [r4, #0]
 8008512:	4401      	add	r1, r0
 8008514:	1850      	adds	r0, r2, r1
 8008516:	4283      	cmp	r3, r0
 8008518:	6011      	str	r1, [r2, #0]
 800851a:	d1e0      	bne.n	80084de <_free_r+0x22>
 800851c:	6818      	ldr	r0, [r3, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	6053      	str	r3, [r2, #4]
 8008522:	4408      	add	r0, r1
 8008524:	6010      	str	r0, [r2, #0]
 8008526:	e7da      	b.n	80084de <_free_r+0x22>
 8008528:	d902      	bls.n	8008530 <_free_r+0x74>
 800852a:	230c      	movs	r3, #12
 800852c:	602b      	str	r3, [r5, #0]
 800852e:	e7d6      	b.n	80084de <_free_r+0x22>
 8008530:	6820      	ldr	r0, [r4, #0]
 8008532:	1821      	adds	r1, r4, r0
 8008534:	428b      	cmp	r3, r1
 8008536:	bf04      	itt	eq
 8008538:	6819      	ldreq	r1, [r3, #0]
 800853a:	685b      	ldreq	r3, [r3, #4]
 800853c:	6063      	str	r3, [r4, #4]
 800853e:	bf04      	itt	eq
 8008540:	1809      	addeq	r1, r1, r0
 8008542:	6021      	streq	r1, [r4, #0]
 8008544:	6054      	str	r4, [r2, #4]
 8008546:	e7ca      	b.n	80084de <_free_r+0x22>
 8008548:	bd38      	pop	{r3, r4, r5, pc}
 800854a:	bf00      	nop
 800854c:	20004cfc 	.word	0x20004cfc

08008550 <sbrk_aligned>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	4e0f      	ldr	r6, [pc, #60]	@ (8008590 <sbrk_aligned+0x40>)
 8008554:	460c      	mov	r4, r1
 8008556:	6831      	ldr	r1, [r6, #0]
 8008558:	4605      	mov	r5, r0
 800855a:	b911      	cbnz	r1, 8008562 <sbrk_aligned+0x12>
 800855c:	f000 fba4 	bl	8008ca8 <_sbrk_r>
 8008560:	6030      	str	r0, [r6, #0]
 8008562:	4621      	mov	r1, r4
 8008564:	4628      	mov	r0, r5
 8008566:	f000 fb9f 	bl	8008ca8 <_sbrk_r>
 800856a:	1c43      	adds	r3, r0, #1
 800856c:	d103      	bne.n	8008576 <sbrk_aligned+0x26>
 800856e:	f04f 34ff 	mov.w	r4, #4294967295
 8008572:	4620      	mov	r0, r4
 8008574:	bd70      	pop	{r4, r5, r6, pc}
 8008576:	1cc4      	adds	r4, r0, #3
 8008578:	f024 0403 	bic.w	r4, r4, #3
 800857c:	42a0      	cmp	r0, r4
 800857e:	d0f8      	beq.n	8008572 <sbrk_aligned+0x22>
 8008580:	1a21      	subs	r1, r4, r0
 8008582:	4628      	mov	r0, r5
 8008584:	f000 fb90 	bl	8008ca8 <_sbrk_r>
 8008588:	3001      	adds	r0, #1
 800858a:	d1f2      	bne.n	8008572 <sbrk_aligned+0x22>
 800858c:	e7ef      	b.n	800856e <sbrk_aligned+0x1e>
 800858e:	bf00      	nop
 8008590:	20004cf8 	.word	0x20004cf8

08008594 <_malloc_r>:
 8008594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008598:	1ccd      	adds	r5, r1, #3
 800859a:	f025 0503 	bic.w	r5, r5, #3
 800859e:	3508      	adds	r5, #8
 80085a0:	2d0c      	cmp	r5, #12
 80085a2:	bf38      	it	cc
 80085a4:	250c      	movcc	r5, #12
 80085a6:	2d00      	cmp	r5, #0
 80085a8:	4606      	mov	r6, r0
 80085aa:	db01      	blt.n	80085b0 <_malloc_r+0x1c>
 80085ac:	42a9      	cmp	r1, r5
 80085ae:	d904      	bls.n	80085ba <_malloc_r+0x26>
 80085b0:	230c      	movs	r3, #12
 80085b2:	6033      	str	r3, [r6, #0]
 80085b4:	2000      	movs	r0, #0
 80085b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008690 <_malloc_r+0xfc>
 80085be:	f000 f869 	bl	8008694 <__malloc_lock>
 80085c2:	f8d8 3000 	ldr.w	r3, [r8]
 80085c6:	461c      	mov	r4, r3
 80085c8:	bb44      	cbnz	r4, 800861c <_malloc_r+0x88>
 80085ca:	4629      	mov	r1, r5
 80085cc:	4630      	mov	r0, r6
 80085ce:	f7ff ffbf 	bl	8008550 <sbrk_aligned>
 80085d2:	1c43      	adds	r3, r0, #1
 80085d4:	4604      	mov	r4, r0
 80085d6:	d158      	bne.n	800868a <_malloc_r+0xf6>
 80085d8:	f8d8 4000 	ldr.w	r4, [r8]
 80085dc:	4627      	mov	r7, r4
 80085de:	2f00      	cmp	r7, #0
 80085e0:	d143      	bne.n	800866a <_malloc_r+0xd6>
 80085e2:	2c00      	cmp	r4, #0
 80085e4:	d04b      	beq.n	800867e <_malloc_r+0xea>
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	4639      	mov	r1, r7
 80085ea:	4630      	mov	r0, r6
 80085ec:	eb04 0903 	add.w	r9, r4, r3
 80085f0:	f000 fb5a 	bl	8008ca8 <_sbrk_r>
 80085f4:	4581      	cmp	r9, r0
 80085f6:	d142      	bne.n	800867e <_malloc_r+0xea>
 80085f8:	6821      	ldr	r1, [r4, #0]
 80085fa:	1a6d      	subs	r5, r5, r1
 80085fc:	4629      	mov	r1, r5
 80085fe:	4630      	mov	r0, r6
 8008600:	f7ff ffa6 	bl	8008550 <sbrk_aligned>
 8008604:	3001      	adds	r0, #1
 8008606:	d03a      	beq.n	800867e <_malloc_r+0xea>
 8008608:	6823      	ldr	r3, [r4, #0]
 800860a:	442b      	add	r3, r5
 800860c:	6023      	str	r3, [r4, #0]
 800860e:	f8d8 3000 	ldr.w	r3, [r8]
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	bb62      	cbnz	r2, 8008670 <_malloc_r+0xdc>
 8008616:	f8c8 7000 	str.w	r7, [r8]
 800861a:	e00f      	b.n	800863c <_malloc_r+0xa8>
 800861c:	6822      	ldr	r2, [r4, #0]
 800861e:	1b52      	subs	r2, r2, r5
 8008620:	d420      	bmi.n	8008664 <_malloc_r+0xd0>
 8008622:	2a0b      	cmp	r2, #11
 8008624:	d917      	bls.n	8008656 <_malloc_r+0xc2>
 8008626:	1961      	adds	r1, r4, r5
 8008628:	42a3      	cmp	r3, r4
 800862a:	6025      	str	r5, [r4, #0]
 800862c:	bf18      	it	ne
 800862e:	6059      	strne	r1, [r3, #4]
 8008630:	6863      	ldr	r3, [r4, #4]
 8008632:	bf08      	it	eq
 8008634:	f8c8 1000 	streq.w	r1, [r8]
 8008638:	5162      	str	r2, [r4, r5]
 800863a:	604b      	str	r3, [r1, #4]
 800863c:	4630      	mov	r0, r6
 800863e:	f000 f82f 	bl	80086a0 <__malloc_unlock>
 8008642:	f104 000b 	add.w	r0, r4, #11
 8008646:	1d23      	adds	r3, r4, #4
 8008648:	f020 0007 	bic.w	r0, r0, #7
 800864c:	1ac2      	subs	r2, r0, r3
 800864e:	bf1c      	itt	ne
 8008650:	1a1b      	subne	r3, r3, r0
 8008652:	50a3      	strne	r3, [r4, r2]
 8008654:	e7af      	b.n	80085b6 <_malloc_r+0x22>
 8008656:	6862      	ldr	r2, [r4, #4]
 8008658:	42a3      	cmp	r3, r4
 800865a:	bf0c      	ite	eq
 800865c:	f8c8 2000 	streq.w	r2, [r8]
 8008660:	605a      	strne	r2, [r3, #4]
 8008662:	e7eb      	b.n	800863c <_malloc_r+0xa8>
 8008664:	4623      	mov	r3, r4
 8008666:	6864      	ldr	r4, [r4, #4]
 8008668:	e7ae      	b.n	80085c8 <_malloc_r+0x34>
 800866a:	463c      	mov	r4, r7
 800866c:	687f      	ldr	r7, [r7, #4]
 800866e:	e7b6      	b.n	80085de <_malloc_r+0x4a>
 8008670:	461a      	mov	r2, r3
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	42a3      	cmp	r3, r4
 8008676:	d1fb      	bne.n	8008670 <_malloc_r+0xdc>
 8008678:	2300      	movs	r3, #0
 800867a:	6053      	str	r3, [r2, #4]
 800867c:	e7de      	b.n	800863c <_malloc_r+0xa8>
 800867e:	230c      	movs	r3, #12
 8008680:	6033      	str	r3, [r6, #0]
 8008682:	4630      	mov	r0, r6
 8008684:	f000 f80c 	bl	80086a0 <__malloc_unlock>
 8008688:	e794      	b.n	80085b4 <_malloc_r+0x20>
 800868a:	6005      	str	r5, [r0, #0]
 800868c:	e7d6      	b.n	800863c <_malloc_r+0xa8>
 800868e:	bf00      	nop
 8008690:	20004cfc 	.word	0x20004cfc

08008694 <__malloc_lock>:
 8008694:	4801      	ldr	r0, [pc, #4]	@ (800869c <__malloc_lock+0x8>)
 8008696:	f7ff bef9 	b.w	800848c <__retarget_lock_acquire_recursive>
 800869a:	bf00      	nop
 800869c:	20004cf4 	.word	0x20004cf4

080086a0 <__malloc_unlock>:
 80086a0:	4801      	ldr	r0, [pc, #4]	@ (80086a8 <__malloc_unlock+0x8>)
 80086a2:	f7ff bef4 	b.w	800848e <__retarget_lock_release_recursive>
 80086a6:	bf00      	nop
 80086a8:	20004cf4 	.word	0x20004cf4

080086ac <__ssputs_r>:
 80086ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086b0:	688e      	ldr	r6, [r1, #8]
 80086b2:	461f      	mov	r7, r3
 80086b4:	42be      	cmp	r6, r7
 80086b6:	680b      	ldr	r3, [r1, #0]
 80086b8:	4682      	mov	sl, r0
 80086ba:	460c      	mov	r4, r1
 80086bc:	4690      	mov	r8, r2
 80086be:	d82d      	bhi.n	800871c <__ssputs_r+0x70>
 80086c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80086c8:	d026      	beq.n	8008718 <__ssputs_r+0x6c>
 80086ca:	6965      	ldr	r5, [r4, #20]
 80086cc:	6909      	ldr	r1, [r1, #16]
 80086ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086d2:	eba3 0901 	sub.w	r9, r3, r1
 80086d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086da:	1c7b      	adds	r3, r7, #1
 80086dc:	444b      	add	r3, r9
 80086de:	106d      	asrs	r5, r5, #1
 80086e0:	429d      	cmp	r5, r3
 80086e2:	bf38      	it	cc
 80086e4:	461d      	movcc	r5, r3
 80086e6:	0553      	lsls	r3, r2, #21
 80086e8:	d527      	bpl.n	800873a <__ssputs_r+0x8e>
 80086ea:	4629      	mov	r1, r5
 80086ec:	f7ff ff52 	bl	8008594 <_malloc_r>
 80086f0:	4606      	mov	r6, r0
 80086f2:	b360      	cbz	r0, 800874e <__ssputs_r+0xa2>
 80086f4:	6921      	ldr	r1, [r4, #16]
 80086f6:	464a      	mov	r2, r9
 80086f8:	f7ff fed2 	bl	80084a0 <memcpy>
 80086fc:	89a3      	ldrh	r3, [r4, #12]
 80086fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008706:	81a3      	strh	r3, [r4, #12]
 8008708:	6126      	str	r6, [r4, #16]
 800870a:	6165      	str	r5, [r4, #20]
 800870c:	444e      	add	r6, r9
 800870e:	eba5 0509 	sub.w	r5, r5, r9
 8008712:	6026      	str	r6, [r4, #0]
 8008714:	60a5      	str	r5, [r4, #8]
 8008716:	463e      	mov	r6, r7
 8008718:	42be      	cmp	r6, r7
 800871a:	d900      	bls.n	800871e <__ssputs_r+0x72>
 800871c:	463e      	mov	r6, r7
 800871e:	6820      	ldr	r0, [r4, #0]
 8008720:	4632      	mov	r2, r6
 8008722:	4641      	mov	r1, r8
 8008724:	f000 faa6 	bl	8008c74 <memmove>
 8008728:	68a3      	ldr	r3, [r4, #8]
 800872a:	1b9b      	subs	r3, r3, r6
 800872c:	60a3      	str	r3, [r4, #8]
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	4433      	add	r3, r6
 8008732:	6023      	str	r3, [r4, #0]
 8008734:	2000      	movs	r0, #0
 8008736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800873a:	462a      	mov	r2, r5
 800873c:	f000 fac4 	bl	8008cc8 <_realloc_r>
 8008740:	4606      	mov	r6, r0
 8008742:	2800      	cmp	r0, #0
 8008744:	d1e0      	bne.n	8008708 <__ssputs_r+0x5c>
 8008746:	6921      	ldr	r1, [r4, #16]
 8008748:	4650      	mov	r0, sl
 800874a:	f7ff feb7 	bl	80084bc <_free_r>
 800874e:	230c      	movs	r3, #12
 8008750:	f8ca 3000 	str.w	r3, [sl]
 8008754:	89a3      	ldrh	r3, [r4, #12]
 8008756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800875a:	81a3      	strh	r3, [r4, #12]
 800875c:	f04f 30ff 	mov.w	r0, #4294967295
 8008760:	e7e9      	b.n	8008736 <__ssputs_r+0x8a>
	...

08008764 <_svfiprintf_r>:
 8008764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008768:	4698      	mov	r8, r3
 800876a:	898b      	ldrh	r3, [r1, #12]
 800876c:	061b      	lsls	r3, r3, #24
 800876e:	b09d      	sub	sp, #116	@ 0x74
 8008770:	4607      	mov	r7, r0
 8008772:	460d      	mov	r5, r1
 8008774:	4614      	mov	r4, r2
 8008776:	d510      	bpl.n	800879a <_svfiprintf_r+0x36>
 8008778:	690b      	ldr	r3, [r1, #16]
 800877a:	b973      	cbnz	r3, 800879a <_svfiprintf_r+0x36>
 800877c:	2140      	movs	r1, #64	@ 0x40
 800877e:	f7ff ff09 	bl	8008594 <_malloc_r>
 8008782:	6028      	str	r0, [r5, #0]
 8008784:	6128      	str	r0, [r5, #16]
 8008786:	b930      	cbnz	r0, 8008796 <_svfiprintf_r+0x32>
 8008788:	230c      	movs	r3, #12
 800878a:	603b      	str	r3, [r7, #0]
 800878c:	f04f 30ff 	mov.w	r0, #4294967295
 8008790:	b01d      	add	sp, #116	@ 0x74
 8008792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008796:	2340      	movs	r3, #64	@ 0x40
 8008798:	616b      	str	r3, [r5, #20]
 800879a:	2300      	movs	r3, #0
 800879c:	9309      	str	r3, [sp, #36]	@ 0x24
 800879e:	2320      	movs	r3, #32
 80087a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80087a8:	2330      	movs	r3, #48	@ 0x30
 80087aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008948 <_svfiprintf_r+0x1e4>
 80087ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087b2:	f04f 0901 	mov.w	r9, #1
 80087b6:	4623      	mov	r3, r4
 80087b8:	469a      	mov	sl, r3
 80087ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087be:	b10a      	cbz	r2, 80087c4 <_svfiprintf_r+0x60>
 80087c0:	2a25      	cmp	r2, #37	@ 0x25
 80087c2:	d1f9      	bne.n	80087b8 <_svfiprintf_r+0x54>
 80087c4:	ebba 0b04 	subs.w	fp, sl, r4
 80087c8:	d00b      	beq.n	80087e2 <_svfiprintf_r+0x7e>
 80087ca:	465b      	mov	r3, fp
 80087cc:	4622      	mov	r2, r4
 80087ce:	4629      	mov	r1, r5
 80087d0:	4638      	mov	r0, r7
 80087d2:	f7ff ff6b 	bl	80086ac <__ssputs_r>
 80087d6:	3001      	adds	r0, #1
 80087d8:	f000 80a7 	beq.w	800892a <_svfiprintf_r+0x1c6>
 80087dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087de:	445a      	add	r2, fp
 80087e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80087e2:	f89a 3000 	ldrb.w	r3, [sl]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f000 809f 	beq.w	800892a <_svfiprintf_r+0x1c6>
 80087ec:	2300      	movs	r3, #0
 80087ee:	f04f 32ff 	mov.w	r2, #4294967295
 80087f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087f6:	f10a 0a01 	add.w	sl, sl, #1
 80087fa:	9304      	str	r3, [sp, #16]
 80087fc:	9307      	str	r3, [sp, #28]
 80087fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008802:	931a      	str	r3, [sp, #104]	@ 0x68
 8008804:	4654      	mov	r4, sl
 8008806:	2205      	movs	r2, #5
 8008808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800880c:	484e      	ldr	r0, [pc, #312]	@ (8008948 <_svfiprintf_r+0x1e4>)
 800880e:	f7f7 fd17 	bl	8000240 <memchr>
 8008812:	9a04      	ldr	r2, [sp, #16]
 8008814:	b9d8      	cbnz	r0, 800884e <_svfiprintf_r+0xea>
 8008816:	06d0      	lsls	r0, r2, #27
 8008818:	bf44      	itt	mi
 800881a:	2320      	movmi	r3, #32
 800881c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008820:	0711      	lsls	r1, r2, #28
 8008822:	bf44      	itt	mi
 8008824:	232b      	movmi	r3, #43	@ 0x2b
 8008826:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800882a:	f89a 3000 	ldrb.w	r3, [sl]
 800882e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008830:	d015      	beq.n	800885e <_svfiprintf_r+0xfa>
 8008832:	9a07      	ldr	r2, [sp, #28]
 8008834:	4654      	mov	r4, sl
 8008836:	2000      	movs	r0, #0
 8008838:	f04f 0c0a 	mov.w	ip, #10
 800883c:	4621      	mov	r1, r4
 800883e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008842:	3b30      	subs	r3, #48	@ 0x30
 8008844:	2b09      	cmp	r3, #9
 8008846:	d94b      	bls.n	80088e0 <_svfiprintf_r+0x17c>
 8008848:	b1b0      	cbz	r0, 8008878 <_svfiprintf_r+0x114>
 800884a:	9207      	str	r2, [sp, #28]
 800884c:	e014      	b.n	8008878 <_svfiprintf_r+0x114>
 800884e:	eba0 0308 	sub.w	r3, r0, r8
 8008852:	fa09 f303 	lsl.w	r3, r9, r3
 8008856:	4313      	orrs	r3, r2
 8008858:	9304      	str	r3, [sp, #16]
 800885a:	46a2      	mov	sl, r4
 800885c:	e7d2      	b.n	8008804 <_svfiprintf_r+0xa0>
 800885e:	9b03      	ldr	r3, [sp, #12]
 8008860:	1d19      	adds	r1, r3, #4
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	9103      	str	r1, [sp, #12]
 8008866:	2b00      	cmp	r3, #0
 8008868:	bfbb      	ittet	lt
 800886a:	425b      	neglt	r3, r3
 800886c:	f042 0202 	orrlt.w	r2, r2, #2
 8008870:	9307      	strge	r3, [sp, #28]
 8008872:	9307      	strlt	r3, [sp, #28]
 8008874:	bfb8      	it	lt
 8008876:	9204      	strlt	r2, [sp, #16]
 8008878:	7823      	ldrb	r3, [r4, #0]
 800887a:	2b2e      	cmp	r3, #46	@ 0x2e
 800887c:	d10a      	bne.n	8008894 <_svfiprintf_r+0x130>
 800887e:	7863      	ldrb	r3, [r4, #1]
 8008880:	2b2a      	cmp	r3, #42	@ 0x2a
 8008882:	d132      	bne.n	80088ea <_svfiprintf_r+0x186>
 8008884:	9b03      	ldr	r3, [sp, #12]
 8008886:	1d1a      	adds	r2, r3, #4
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	9203      	str	r2, [sp, #12]
 800888c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008890:	3402      	adds	r4, #2
 8008892:	9305      	str	r3, [sp, #20]
 8008894:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008958 <_svfiprintf_r+0x1f4>
 8008898:	7821      	ldrb	r1, [r4, #0]
 800889a:	2203      	movs	r2, #3
 800889c:	4650      	mov	r0, sl
 800889e:	f7f7 fccf 	bl	8000240 <memchr>
 80088a2:	b138      	cbz	r0, 80088b4 <_svfiprintf_r+0x150>
 80088a4:	9b04      	ldr	r3, [sp, #16]
 80088a6:	eba0 000a 	sub.w	r0, r0, sl
 80088aa:	2240      	movs	r2, #64	@ 0x40
 80088ac:	4082      	lsls	r2, r0
 80088ae:	4313      	orrs	r3, r2
 80088b0:	3401      	adds	r4, #1
 80088b2:	9304      	str	r3, [sp, #16]
 80088b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b8:	4824      	ldr	r0, [pc, #144]	@ (800894c <_svfiprintf_r+0x1e8>)
 80088ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088be:	2206      	movs	r2, #6
 80088c0:	f7f7 fcbe 	bl	8000240 <memchr>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d036      	beq.n	8008936 <_svfiprintf_r+0x1d2>
 80088c8:	4b21      	ldr	r3, [pc, #132]	@ (8008950 <_svfiprintf_r+0x1ec>)
 80088ca:	bb1b      	cbnz	r3, 8008914 <_svfiprintf_r+0x1b0>
 80088cc:	9b03      	ldr	r3, [sp, #12]
 80088ce:	3307      	adds	r3, #7
 80088d0:	f023 0307 	bic.w	r3, r3, #7
 80088d4:	3308      	adds	r3, #8
 80088d6:	9303      	str	r3, [sp, #12]
 80088d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088da:	4433      	add	r3, r6
 80088dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80088de:	e76a      	b.n	80087b6 <_svfiprintf_r+0x52>
 80088e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80088e4:	460c      	mov	r4, r1
 80088e6:	2001      	movs	r0, #1
 80088e8:	e7a8      	b.n	800883c <_svfiprintf_r+0xd8>
 80088ea:	2300      	movs	r3, #0
 80088ec:	3401      	adds	r4, #1
 80088ee:	9305      	str	r3, [sp, #20]
 80088f0:	4619      	mov	r1, r3
 80088f2:	f04f 0c0a 	mov.w	ip, #10
 80088f6:	4620      	mov	r0, r4
 80088f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088fc:	3a30      	subs	r2, #48	@ 0x30
 80088fe:	2a09      	cmp	r2, #9
 8008900:	d903      	bls.n	800890a <_svfiprintf_r+0x1a6>
 8008902:	2b00      	cmp	r3, #0
 8008904:	d0c6      	beq.n	8008894 <_svfiprintf_r+0x130>
 8008906:	9105      	str	r1, [sp, #20]
 8008908:	e7c4      	b.n	8008894 <_svfiprintf_r+0x130>
 800890a:	fb0c 2101 	mla	r1, ip, r1, r2
 800890e:	4604      	mov	r4, r0
 8008910:	2301      	movs	r3, #1
 8008912:	e7f0      	b.n	80088f6 <_svfiprintf_r+0x192>
 8008914:	ab03      	add	r3, sp, #12
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	462a      	mov	r2, r5
 800891a:	4b0e      	ldr	r3, [pc, #56]	@ (8008954 <_svfiprintf_r+0x1f0>)
 800891c:	a904      	add	r1, sp, #16
 800891e:	4638      	mov	r0, r7
 8008920:	f3af 8000 	nop.w
 8008924:	1c42      	adds	r2, r0, #1
 8008926:	4606      	mov	r6, r0
 8008928:	d1d6      	bne.n	80088d8 <_svfiprintf_r+0x174>
 800892a:	89ab      	ldrh	r3, [r5, #12]
 800892c:	065b      	lsls	r3, r3, #25
 800892e:	f53f af2d 	bmi.w	800878c <_svfiprintf_r+0x28>
 8008932:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008934:	e72c      	b.n	8008790 <_svfiprintf_r+0x2c>
 8008936:	ab03      	add	r3, sp, #12
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	462a      	mov	r2, r5
 800893c:	4b05      	ldr	r3, [pc, #20]	@ (8008954 <_svfiprintf_r+0x1f0>)
 800893e:	a904      	add	r1, sp, #16
 8008940:	4638      	mov	r0, r7
 8008942:	f000 f879 	bl	8008a38 <_printf_i>
 8008946:	e7ed      	b.n	8008924 <_svfiprintf_r+0x1c0>
 8008948:	08008fbc 	.word	0x08008fbc
 800894c:	08008fc6 	.word	0x08008fc6
 8008950:	00000000 	.word	0x00000000
 8008954:	080086ad 	.word	0x080086ad
 8008958:	08008fc2 	.word	0x08008fc2

0800895c <_printf_common>:
 800895c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008960:	4616      	mov	r6, r2
 8008962:	4698      	mov	r8, r3
 8008964:	688a      	ldr	r2, [r1, #8]
 8008966:	690b      	ldr	r3, [r1, #16]
 8008968:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800896c:	4293      	cmp	r3, r2
 800896e:	bfb8      	it	lt
 8008970:	4613      	movlt	r3, r2
 8008972:	6033      	str	r3, [r6, #0]
 8008974:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008978:	4607      	mov	r7, r0
 800897a:	460c      	mov	r4, r1
 800897c:	b10a      	cbz	r2, 8008982 <_printf_common+0x26>
 800897e:	3301      	adds	r3, #1
 8008980:	6033      	str	r3, [r6, #0]
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	0699      	lsls	r1, r3, #26
 8008986:	bf42      	ittt	mi
 8008988:	6833      	ldrmi	r3, [r6, #0]
 800898a:	3302      	addmi	r3, #2
 800898c:	6033      	strmi	r3, [r6, #0]
 800898e:	6825      	ldr	r5, [r4, #0]
 8008990:	f015 0506 	ands.w	r5, r5, #6
 8008994:	d106      	bne.n	80089a4 <_printf_common+0x48>
 8008996:	f104 0a19 	add.w	sl, r4, #25
 800899a:	68e3      	ldr	r3, [r4, #12]
 800899c:	6832      	ldr	r2, [r6, #0]
 800899e:	1a9b      	subs	r3, r3, r2
 80089a0:	42ab      	cmp	r3, r5
 80089a2:	dc26      	bgt.n	80089f2 <_printf_common+0x96>
 80089a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089a8:	6822      	ldr	r2, [r4, #0]
 80089aa:	3b00      	subs	r3, #0
 80089ac:	bf18      	it	ne
 80089ae:	2301      	movne	r3, #1
 80089b0:	0692      	lsls	r2, r2, #26
 80089b2:	d42b      	bmi.n	8008a0c <_printf_common+0xb0>
 80089b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089b8:	4641      	mov	r1, r8
 80089ba:	4638      	mov	r0, r7
 80089bc:	47c8      	blx	r9
 80089be:	3001      	adds	r0, #1
 80089c0:	d01e      	beq.n	8008a00 <_printf_common+0xa4>
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	6922      	ldr	r2, [r4, #16]
 80089c6:	f003 0306 	and.w	r3, r3, #6
 80089ca:	2b04      	cmp	r3, #4
 80089cc:	bf02      	ittt	eq
 80089ce:	68e5      	ldreq	r5, [r4, #12]
 80089d0:	6833      	ldreq	r3, [r6, #0]
 80089d2:	1aed      	subeq	r5, r5, r3
 80089d4:	68a3      	ldr	r3, [r4, #8]
 80089d6:	bf0c      	ite	eq
 80089d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089dc:	2500      	movne	r5, #0
 80089de:	4293      	cmp	r3, r2
 80089e0:	bfc4      	itt	gt
 80089e2:	1a9b      	subgt	r3, r3, r2
 80089e4:	18ed      	addgt	r5, r5, r3
 80089e6:	2600      	movs	r6, #0
 80089e8:	341a      	adds	r4, #26
 80089ea:	42b5      	cmp	r5, r6
 80089ec:	d11a      	bne.n	8008a24 <_printf_common+0xc8>
 80089ee:	2000      	movs	r0, #0
 80089f0:	e008      	b.n	8008a04 <_printf_common+0xa8>
 80089f2:	2301      	movs	r3, #1
 80089f4:	4652      	mov	r2, sl
 80089f6:	4641      	mov	r1, r8
 80089f8:	4638      	mov	r0, r7
 80089fa:	47c8      	blx	r9
 80089fc:	3001      	adds	r0, #1
 80089fe:	d103      	bne.n	8008a08 <_printf_common+0xac>
 8008a00:	f04f 30ff 	mov.w	r0, #4294967295
 8008a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a08:	3501      	adds	r5, #1
 8008a0a:	e7c6      	b.n	800899a <_printf_common+0x3e>
 8008a0c:	18e1      	adds	r1, r4, r3
 8008a0e:	1c5a      	adds	r2, r3, #1
 8008a10:	2030      	movs	r0, #48	@ 0x30
 8008a12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a16:	4422      	add	r2, r4
 8008a18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a20:	3302      	adds	r3, #2
 8008a22:	e7c7      	b.n	80089b4 <_printf_common+0x58>
 8008a24:	2301      	movs	r3, #1
 8008a26:	4622      	mov	r2, r4
 8008a28:	4641      	mov	r1, r8
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	47c8      	blx	r9
 8008a2e:	3001      	adds	r0, #1
 8008a30:	d0e6      	beq.n	8008a00 <_printf_common+0xa4>
 8008a32:	3601      	adds	r6, #1
 8008a34:	e7d9      	b.n	80089ea <_printf_common+0x8e>
	...

08008a38 <_printf_i>:
 8008a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a3c:	7e0f      	ldrb	r7, [r1, #24]
 8008a3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a40:	2f78      	cmp	r7, #120	@ 0x78
 8008a42:	4691      	mov	r9, r2
 8008a44:	4680      	mov	r8, r0
 8008a46:	460c      	mov	r4, r1
 8008a48:	469a      	mov	sl, r3
 8008a4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a4e:	d807      	bhi.n	8008a60 <_printf_i+0x28>
 8008a50:	2f62      	cmp	r7, #98	@ 0x62
 8008a52:	d80a      	bhi.n	8008a6a <_printf_i+0x32>
 8008a54:	2f00      	cmp	r7, #0
 8008a56:	f000 80d1 	beq.w	8008bfc <_printf_i+0x1c4>
 8008a5a:	2f58      	cmp	r7, #88	@ 0x58
 8008a5c:	f000 80b8 	beq.w	8008bd0 <_printf_i+0x198>
 8008a60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a68:	e03a      	b.n	8008ae0 <_printf_i+0xa8>
 8008a6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a6e:	2b15      	cmp	r3, #21
 8008a70:	d8f6      	bhi.n	8008a60 <_printf_i+0x28>
 8008a72:	a101      	add	r1, pc, #4	@ (adr r1, 8008a78 <_printf_i+0x40>)
 8008a74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a78:	08008ad1 	.word	0x08008ad1
 8008a7c:	08008ae5 	.word	0x08008ae5
 8008a80:	08008a61 	.word	0x08008a61
 8008a84:	08008a61 	.word	0x08008a61
 8008a88:	08008a61 	.word	0x08008a61
 8008a8c:	08008a61 	.word	0x08008a61
 8008a90:	08008ae5 	.word	0x08008ae5
 8008a94:	08008a61 	.word	0x08008a61
 8008a98:	08008a61 	.word	0x08008a61
 8008a9c:	08008a61 	.word	0x08008a61
 8008aa0:	08008a61 	.word	0x08008a61
 8008aa4:	08008be3 	.word	0x08008be3
 8008aa8:	08008b0f 	.word	0x08008b0f
 8008aac:	08008b9d 	.word	0x08008b9d
 8008ab0:	08008a61 	.word	0x08008a61
 8008ab4:	08008a61 	.word	0x08008a61
 8008ab8:	08008c05 	.word	0x08008c05
 8008abc:	08008a61 	.word	0x08008a61
 8008ac0:	08008b0f 	.word	0x08008b0f
 8008ac4:	08008a61 	.word	0x08008a61
 8008ac8:	08008a61 	.word	0x08008a61
 8008acc:	08008ba5 	.word	0x08008ba5
 8008ad0:	6833      	ldr	r3, [r6, #0]
 8008ad2:	1d1a      	adds	r2, r3, #4
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6032      	str	r2, [r6, #0]
 8008ad8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008adc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e09c      	b.n	8008c1e <_printf_i+0x1e6>
 8008ae4:	6833      	ldr	r3, [r6, #0]
 8008ae6:	6820      	ldr	r0, [r4, #0]
 8008ae8:	1d19      	adds	r1, r3, #4
 8008aea:	6031      	str	r1, [r6, #0]
 8008aec:	0606      	lsls	r6, r0, #24
 8008aee:	d501      	bpl.n	8008af4 <_printf_i+0xbc>
 8008af0:	681d      	ldr	r5, [r3, #0]
 8008af2:	e003      	b.n	8008afc <_printf_i+0xc4>
 8008af4:	0645      	lsls	r5, r0, #25
 8008af6:	d5fb      	bpl.n	8008af0 <_printf_i+0xb8>
 8008af8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008afc:	2d00      	cmp	r5, #0
 8008afe:	da03      	bge.n	8008b08 <_printf_i+0xd0>
 8008b00:	232d      	movs	r3, #45	@ 0x2d
 8008b02:	426d      	negs	r5, r5
 8008b04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b08:	4858      	ldr	r0, [pc, #352]	@ (8008c6c <_printf_i+0x234>)
 8008b0a:	230a      	movs	r3, #10
 8008b0c:	e011      	b.n	8008b32 <_printf_i+0xfa>
 8008b0e:	6821      	ldr	r1, [r4, #0]
 8008b10:	6833      	ldr	r3, [r6, #0]
 8008b12:	0608      	lsls	r0, r1, #24
 8008b14:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b18:	d402      	bmi.n	8008b20 <_printf_i+0xe8>
 8008b1a:	0649      	lsls	r1, r1, #25
 8008b1c:	bf48      	it	mi
 8008b1e:	b2ad      	uxthmi	r5, r5
 8008b20:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b22:	4852      	ldr	r0, [pc, #328]	@ (8008c6c <_printf_i+0x234>)
 8008b24:	6033      	str	r3, [r6, #0]
 8008b26:	bf14      	ite	ne
 8008b28:	230a      	movne	r3, #10
 8008b2a:	2308      	moveq	r3, #8
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b32:	6866      	ldr	r6, [r4, #4]
 8008b34:	60a6      	str	r6, [r4, #8]
 8008b36:	2e00      	cmp	r6, #0
 8008b38:	db05      	blt.n	8008b46 <_printf_i+0x10e>
 8008b3a:	6821      	ldr	r1, [r4, #0]
 8008b3c:	432e      	orrs	r6, r5
 8008b3e:	f021 0104 	bic.w	r1, r1, #4
 8008b42:	6021      	str	r1, [r4, #0]
 8008b44:	d04b      	beq.n	8008bde <_printf_i+0x1a6>
 8008b46:	4616      	mov	r6, r2
 8008b48:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b4c:	fb03 5711 	mls	r7, r3, r1, r5
 8008b50:	5dc7      	ldrb	r7, [r0, r7]
 8008b52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b56:	462f      	mov	r7, r5
 8008b58:	42bb      	cmp	r3, r7
 8008b5a:	460d      	mov	r5, r1
 8008b5c:	d9f4      	bls.n	8008b48 <_printf_i+0x110>
 8008b5e:	2b08      	cmp	r3, #8
 8008b60:	d10b      	bne.n	8008b7a <_printf_i+0x142>
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	07df      	lsls	r7, r3, #31
 8008b66:	d508      	bpl.n	8008b7a <_printf_i+0x142>
 8008b68:	6923      	ldr	r3, [r4, #16]
 8008b6a:	6861      	ldr	r1, [r4, #4]
 8008b6c:	4299      	cmp	r1, r3
 8008b6e:	bfde      	ittt	le
 8008b70:	2330      	movle	r3, #48	@ 0x30
 8008b72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b7a:	1b92      	subs	r2, r2, r6
 8008b7c:	6122      	str	r2, [r4, #16]
 8008b7e:	f8cd a000 	str.w	sl, [sp]
 8008b82:	464b      	mov	r3, r9
 8008b84:	aa03      	add	r2, sp, #12
 8008b86:	4621      	mov	r1, r4
 8008b88:	4640      	mov	r0, r8
 8008b8a:	f7ff fee7 	bl	800895c <_printf_common>
 8008b8e:	3001      	adds	r0, #1
 8008b90:	d14a      	bne.n	8008c28 <_printf_i+0x1f0>
 8008b92:	f04f 30ff 	mov.w	r0, #4294967295
 8008b96:	b004      	add	sp, #16
 8008b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b9c:	6823      	ldr	r3, [r4, #0]
 8008b9e:	f043 0320 	orr.w	r3, r3, #32
 8008ba2:	6023      	str	r3, [r4, #0]
 8008ba4:	4832      	ldr	r0, [pc, #200]	@ (8008c70 <_printf_i+0x238>)
 8008ba6:	2778      	movs	r7, #120	@ 0x78
 8008ba8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008bac:	6823      	ldr	r3, [r4, #0]
 8008bae:	6831      	ldr	r1, [r6, #0]
 8008bb0:	061f      	lsls	r7, r3, #24
 8008bb2:	f851 5b04 	ldr.w	r5, [r1], #4
 8008bb6:	d402      	bmi.n	8008bbe <_printf_i+0x186>
 8008bb8:	065f      	lsls	r7, r3, #25
 8008bba:	bf48      	it	mi
 8008bbc:	b2ad      	uxthmi	r5, r5
 8008bbe:	6031      	str	r1, [r6, #0]
 8008bc0:	07d9      	lsls	r1, r3, #31
 8008bc2:	bf44      	itt	mi
 8008bc4:	f043 0320 	orrmi.w	r3, r3, #32
 8008bc8:	6023      	strmi	r3, [r4, #0]
 8008bca:	b11d      	cbz	r5, 8008bd4 <_printf_i+0x19c>
 8008bcc:	2310      	movs	r3, #16
 8008bce:	e7ad      	b.n	8008b2c <_printf_i+0xf4>
 8008bd0:	4826      	ldr	r0, [pc, #152]	@ (8008c6c <_printf_i+0x234>)
 8008bd2:	e7e9      	b.n	8008ba8 <_printf_i+0x170>
 8008bd4:	6823      	ldr	r3, [r4, #0]
 8008bd6:	f023 0320 	bic.w	r3, r3, #32
 8008bda:	6023      	str	r3, [r4, #0]
 8008bdc:	e7f6      	b.n	8008bcc <_printf_i+0x194>
 8008bde:	4616      	mov	r6, r2
 8008be0:	e7bd      	b.n	8008b5e <_printf_i+0x126>
 8008be2:	6833      	ldr	r3, [r6, #0]
 8008be4:	6825      	ldr	r5, [r4, #0]
 8008be6:	6961      	ldr	r1, [r4, #20]
 8008be8:	1d18      	adds	r0, r3, #4
 8008bea:	6030      	str	r0, [r6, #0]
 8008bec:	062e      	lsls	r6, r5, #24
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	d501      	bpl.n	8008bf6 <_printf_i+0x1be>
 8008bf2:	6019      	str	r1, [r3, #0]
 8008bf4:	e002      	b.n	8008bfc <_printf_i+0x1c4>
 8008bf6:	0668      	lsls	r0, r5, #25
 8008bf8:	d5fb      	bpl.n	8008bf2 <_printf_i+0x1ba>
 8008bfa:	8019      	strh	r1, [r3, #0]
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	6123      	str	r3, [r4, #16]
 8008c00:	4616      	mov	r6, r2
 8008c02:	e7bc      	b.n	8008b7e <_printf_i+0x146>
 8008c04:	6833      	ldr	r3, [r6, #0]
 8008c06:	1d1a      	adds	r2, r3, #4
 8008c08:	6032      	str	r2, [r6, #0]
 8008c0a:	681e      	ldr	r6, [r3, #0]
 8008c0c:	6862      	ldr	r2, [r4, #4]
 8008c0e:	2100      	movs	r1, #0
 8008c10:	4630      	mov	r0, r6
 8008c12:	f7f7 fb15 	bl	8000240 <memchr>
 8008c16:	b108      	cbz	r0, 8008c1c <_printf_i+0x1e4>
 8008c18:	1b80      	subs	r0, r0, r6
 8008c1a:	6060      	str	r0, [r4, #4]
 8008c1c:	6863      	ldr	r3, [r4, #4]
 8008c1e:	6123      	str	r3, [r4, #16]
 8008c20:	2300      	movs	r3, #0
 8008c22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c26:	e7aa      	b.n	8008b7e <_printf_i+0x146>
 8008c28:	6923      	ldr	r3, [r4, #16]
 8008c2a:	4632      	mov	r2, r6
 8008c2c:	4649      	mov	r1, r9
 8008c2e:	4640      	mov	r0, r8
 8008c30:	47d0      	blx	sl
 8008c32:	3001      	adds	r0, #1
 8008c34:	d0ad      	beq.n	8008b92 <_printf_i+0x15a>
 8008c36:	6823      	ldr	r3, [r4, #0]
 8008c38:	079b      	lsls	r3, r3, #30
 8008c3a:	d413      	bmi.n	8008c64 <_printf_i+0x22c>
 8008c3c:	68e0      	ldr	r0, [r4, #12]
 8008c3e:	9b03      	ldr	r3, [sp, #12]
 8008c40:	4298      	cmp	r0, r3
 8008c42:	bfb8      	it	lt
 8008c44:	4618      	movlt	r0, r3
 8008c46:	e7a6      	b.n	8008b96 <_printf_i+0x15e>
 8008c48:	2301      	movs	r3, #1
 8008c4a:	4632      	mov	r2, r6
 8008c4c:	4649      	mov	r1, r9
 8008c4e:	4640      	mov	r0, r8
 8008c50:	47d0      	blx	sl
 8008c52:	3001      	adds	r0, #1
 8008c54:	d09d      	beq.n	8008b92 <_printf_i+0x15a>
 8008c56:	3501      	adds	r5, #1
 8008c58:	68e3      	ldr	r3, [r4, #12]
 8008c5a:	9903      	ldr	r1, [sp, #12]
 8008c5c:	1a5b      	subs	r3, r3, r1
 8008c5e:	42ab      	cmp	r3, r5
 8008c60:	dcf2      	bgt.n	8008c48 <_printf_i+0x210>
 8008c62:	e7eb      	b.n	8008c3c <_printf_i+0x204>
 8008c64:	2500      	movs	r5, #0
 8008c66:	f104 0619 	add.w	r6, r4, #25
 8008c6a:	e7f5      	b.n	8008c58 <_printf_i+0x220>
 8008c6c:	08008fcd 	.word	0x08008fcd
 8008c70:	08008fde 	.word	0x08008fde

08008c74 <memmove>:
 8008c74:	4288      	cmp	r0, r1
 8008c76:	b510      	push	{r4, lr}
 8008c78:	eb01 0402 	add.w	r4, r1, r2
 8008c7c:	d902      	bls.n	8008c84 <memmove+0x10>
 8008c7e:	4284      	cmp	r4, r0
 8008c80:	4623      	mov	r3, r4
 8008c82:	d807      	bhi.n	8008c94 <memmove+0x20>
 8008c84:	1e43      	subs	r3, r0, #1
 8008c86:	42a1      	cmp	r1, r4
 8008c88:	d008      	beq.n	8008c9c <memmove+0x28>
 8008c8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c92:	e7f8      	b.n	8008c86 <memmove+0x12>
 8008c94:	4402      	add	r2, r0
 8008c96:	4601      	mov	r1, r0
 8008c98:	428a      	cmp	r2, r1
 8008c9a:	d100      	bne.n	8008c9e <memmove+0x2a>
 8008c9c:	bd10      	pop	{r4, pc}
 8008c9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ca2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ca6:	e7f7      	b.n	8008c98 <memmove+0x24>

08008ca8 <_sbrk_r>:
 8008ca8:	b538      	push	{r3, r4, r5, lr}
 8008caa:	4d06      	ldr	r5, [pc, #24]	@ (8008cc4 <_sbrk_r+0x1c>)
 8008cac:	2300      	movs	r3, #0
 8008cae:	4604      	mov	r4, r0
 8008cb0:	4608      	mov	r0, r1
 8008cb2:	602b      	str	r3, [r5, #0]
 8008cb4:	f7f8 fd00 	bl	80016b8 <_sbrk>
 8008cb8:	1c43      	adds	r3, r0, #1
 8008cba:	d102      	bne.n	8008cc2 <_sbrk_r+0x1a>
 8008cbc:	682b      	ldr	r3, [r5, #0]
 8008cbe:	b103      	cbz	r3, 8008cc2 <_sbrk_r+0x1a>
 8008cc0:	6023      	str	r3, [r4, #0]
 8008cc2:	bd38      	pop	{r3, r4, r5, pc}
 8008cc4:	20004cf0 	.word	0x20004cf0

08008cc8 <_realloc_r>:
 8008cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ccc:	4607      	mov	r7, r0
 8008cce:	4614      	mov	r4, r2
 8008cd0:	460d      	mov	r5, r1
 8008cd2:	b921      	cbnz	r1, 8008cde <_realloc_r+0x16>
 8008cd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd8:	4611      	mov	r1, r2
 8008cda:	f7ff bc5b 	b.w	8008594 <_malloc_r>
 8008cde:	b92a      	cbnz	r2, 8008cec <_realloc_r+0x24>
 8008ce0:	f7ff fbec 	bl	80084bc <_free_r>
 8008ce4:	4625      	mov	r5, r4
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cec:	f000 f81a 	bl	8008d24 <_malloc_usable_size_r>
 8008cf0:	4284      	cmp	r4, r0
 8008cf2:	4606      	mov	r6, r0
 8008cf4:	d802      	bhi.n	8008cfc <_realloc_r+0x34>
 8008cf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008cfa:	d8f4      	bhi.n	8008ce6 <_realloc_r+0x1e>
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	4638      	mov	r0, r7
 8008d00:	f7ff fc48 	bl	8008594 <_malloc_r>
 8008d04:	4680      	mov	r8, r0
 8008d06:	b908      	cbnz	r0, 8008d0c <_realloc_r+0x44>
 8008d08:	4645      	mov	r5, r8
 8008d0a:	e7ec      	b.n	8008ce6 <_realloc_r+0x1e>
 8008d0c:	42b4      	cmp	r4, r6
 8008d0e:	4622      	mov	r2, r4
 8008d10:	4629      	mov	r1, r5
 8008d12:	bf28      	it	cs
 8008d14:	4632      	movcs	r2, r6
 8008d16:	f7ff fbc3 	bl	80084a0 <memcpy>
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	4638      	mov	r0, r7
 8008d1e:	f7ff fbcd 	bl	80084bc <_free_r>
 8008d22:	e7f1      	b.n	8008d08 <_realloc_r+0x40>

08008d24 <_malloc_usable_size_r>:
 8008d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d28:	1f18      	subs	r0, r3, #4
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	bfbc      	itt	lt
 8008d2e:	580b      	ldrlt	r3, [r1, r0]
 8008d30:	18c0      	addlt	r0, r0, r3
 8008d32:	4770      	bx	lr

08008d34 <_init>:
 8008d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d36:	bf00      	nop
 8008d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d3a:	bc08      	pop	{r3}
 8008d3c:	469e      	mov	lr, r3
 8008d3e:	4770      	bx	lr

08008d40 <_fini>:
 8008d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d42:	bf00      	nop
 8008d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d46:	bc08      	pop	{r3}
 8008d48:	469e      	mov	lr, r3
 8008d4a:	4770      	bx	lr
